
FFT_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013864  080086d8  080086d8  000186d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bf3c  0801bf3c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801bf3c  0801bf3c  0002bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bf44  0801bf44  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bf44  0801bf44  0002bf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bf48  0801bf48  0002bf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801bf4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000629c  200001dc  0801c128  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006478  0801c128  00036478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112f9  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002771  00000000  00000000  00041505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00043c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00044960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b19  00000000  00000000  000454e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076b  00000000  00000000  00049001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec7ed  00000000  00000000  0005976c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00145f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  0014601c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000318f  00000000  00000000  0014a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086bc 	.word	0x080086bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080086bc 	.word	0x080086bc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <user_leds_init>:




void user_leds_init(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <user_leds_init+0x64>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a16      	ldr	r2, [pc, #88]	; (8001010 <user_leds_init+0x64>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PB0 as output
	GPIOB->MODER |= (1U<<0);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <user_leds_init+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <user_leds_init+0x68>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<1);
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <user_leds_init+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a11      	ldr	r2, [pc, #68]	; (8001014 <user_leds_init+0x68>)
 8000fce:	f023 0302 	bic.w	r3, r3, #2
 8000fd2:	6013      	str	r3, [r2, #0]

	//Set PB7 as output
	GPIOB->MODER |= (1U<<14);
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <user_leds_init+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <user_leds_init+0x68>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fde:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<15);
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <user_leds_init+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <user_leds_init+0x68>)
 8000fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fea:	6013      	str	r3, [r2, #0]

	//Set PB14 as output
	GPIOB->MODER |= (1U<<28);
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <user_leds_init+0x68>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <user_leds_init+0x68>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<29);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <user_leds_init+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <user_leds_init+0x68>)
 8000ffe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001002:	6013      	str	r3, [r2, #0]




}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400

08001018 <led_toggle>:
	GPIOB->ODR ^=(RED_LED | GREEN_LED | BLUE_LED);
}


void led_toggle(ledType led)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	GPIOB->ODR ^=led;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <led_toggle+0x20>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	4904      	ldr	r1, [pc, #16]	; (8001038 <led_toggle+0x20>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4053      	eors	r3, r2
 800102a:	614b      	str	r3, [r1, #20]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40020400 	.word	0x40020400

0800103c <led_on>:


void led_on(ledType led)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |=led;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <led_on+0x20>)
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	4904      	ldr	r1, [pc, #16]	; (800105c <led_on+0x20>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	614b      	str	r3, [r1, #20]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40020400 	.word	0x40020400

08001060 <PeriphCommonClock_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PeriphCommonClock_Config(void) //Disappears when I2S1 disabled
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0a2      	sub	sp, #136	; 0x88
 8001064:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2284      	movs	r2, #132	; 0x84
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fdcb 	bl	8005c08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fc27 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 800109c:	f000 fb2c 	bl	80016f8 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3788      	adds	r7, #136	; 0x88
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DoFFT>:

void DoFFT() {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 80010ae:	af02      	add	r7, sp, #8
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, fft_in_buf, fft_out_buf,0);
 80010b0:	2300      	movs	r3, #0
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <DoFFT+0x174>)
 80010b4:	495a      	ldr	r1, [pc, #360]	; (8001220 <DoFFT+0x178>)
 80010b6:	485b      	ldr	r0, [pc, #364]	; (8001224 <DoFFT+0x17c>)
 80010b8:	f003 fe36 	bl	8004d28 <arm_rfft_fast_f32>

	uint16_t peakVal = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	int peak = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	int freqs[FFT_BUFFER_SIZE/2];
	int freqpoint = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	int offset = 150; //variable noisefloor offset
 80010ce:	2396      	movs	r3, #150	; 0x96
 80010d0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	float freq = 0;
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80010dc:	6013      	str	r3, [r2, #0]



	//calculate abs values and linear-to-dB
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80010e4:	e03f      	b.n	8001166 <DoFFT+0xbe>
		//freqs[freqpoint] = (int)(20*log10f(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1]))))-offset;
		freqs[freqpoint] = (int)(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1])));
 80010e6:	4a4d      	ldr	r2, [pc, #308]	; (800121c <DoFFT+0x174>)
 80010e8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <DoFFT+0x174>)
 80010f6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001106:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800110a:	3301      	adds	r3, #1
 800110c:	4a43      	ldr	r2, [pc, #268]	; (800121c <DoFFT+0x174>)
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	edd3 6a00 	vldr	s13, [r3]
 8001116:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800111a:	3301      	adds	r3, #1
 800111c:	4a3f      	ldr	r2, [pc, #252]	; (800121c <DoFFT+0x174>)
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f007 faa1 	bl	8008678 <sqrtf>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	ee17 1a90 	vmov	r1, s15
 8001142:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001146:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800114a:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//if (freqs[freqpoint]<100) freqs[freqpoint]=0;
		freqpoint ++;
 8001152:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001156:	3301      	adds	r3, #1
 8001158:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 800115c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001160:	3302      	adds	r3, #2
 8001162:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8001166:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	dbba      	blt.n	80010e6 <DoFFT+0x3e>
	}

	for (int j = 0; j <FFT_BUFFER_SIZE/2; j +=1)
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8001176:	e032      	b.n	80011de <DoFFT+0x136>
	{
		if(freqs[j] > peak)
 8001178:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800117c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001180:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800118c:	429a      	cmp	r2, r3
 800118e:	da0d      	bge.n	80011ac <DoFFT+0x104>
		{
			peak = freqs[j];
 8001190:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001194:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001198:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
			peakVal = j;
 80011a4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80011a8:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e

		}
		freq = (100000*peakVal)/((FFT_BUFFER_SIZE*100000)/48828);
 80011ac:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <DoFFT+0x180>)
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <DoFFT+0x184>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	441a      	add	r2, r3
 80011be:	12d2      	asrs	r2, r2, #11
 80011c0:	17db      	asrs	r3, r3, #31
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80011d0:	edc3 7a00 	vstr	s15, [r3]
	for (int j = 0; j <FFT_BUFFER_SIZE/2; j +=1)
 80011d4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80011d8:	3301      	adds	r3, #1
 80011da:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80011de:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80011e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e6:	dbc7      	blt.n	8001178 <DoFFT+0xd0>
//			peakVal = peakVal;
//		}
//	}


printf("%d %d %0.1f\r\n",peak,peakVal,freq);
 80011e8:	f8b7 481e 	ldrh.w	r4, [r7, #2078]	; 0x81e
 80011ec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f7ff fa29 	bl	8000648 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	e9cd 2300 	strd	r2, r3, [sp]
 80011fe:	4622      	mov	r2, r4
 8001200:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <DoFFT+0x188>)
 8001206:	f005 f971 	bl	80064ec <iprintf>

dataReadyFlag = 0;
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <DoFFT+0x18c>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]



}
 8001210:	bf00      	nop
 8001212:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	20005444 	.word	0x20005444
 8001220:	20004444 	.word	0x20004444
 8001224:	20006448 	.word	0x20006448
 8001228:	000186a0 	.word	0x000186a0
 800122c:	fa04a397 	.word	0xfa04a397
 8001230:	080086d8 	.word	0x080086d8
 8001234:	20006444 	.word	0x20006444

08001238 <HAL_I2S_RxHalfCpltCallback>:
//	}
//	dataReadyFlag = 0;
//}

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	dataReadyFlag = 1;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
	led_toggle(BLUE_LED);
 8001246:	2080      	movs	r0, #128	; 0x80
 8001248:	f7ff fee6 	bl	8001018 <led_toggle>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20006444 	.word	0x20006444

08001258 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	dataReadyFlag = 2;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_I2S_RxCpltCallback+0x20>)
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
	led_toggle(RED_LED);
 8001266:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800126a:	f7ff fed5 	bl	8001018 <led_toggle>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20006444 	.word	0x20006444

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fd5a 	bl	8001d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f889 	bl	800139c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphCommonClock_Config(); // Disappears when I2S1 disabled
 800128a:	f7ff fee9 	bl	8001060 <PeriphCommonClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 f9c5 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 8001292:	f000 f989 	bl	80015a8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001296:	f000 f957 	bl	8001548 <MX_USART3_UART_Init>
  MX_I2S2_Init();
 800129a:	f000 f8eb 	bl	8001474 <MX_I2S2_Init>
  MX_SPI1_Init();
 800129e:	f000 f915 	bl	80014cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Initialise LEDs*/
  user_leds_init();
 80012a2:	f7ff fe83 	bl	8000fac <user_leds_init>

  /*Initialise UART3 which is connected to USB*/
  //uart3_tx_init();

  /*Initialise FFT*/
  arm_rfft_fast_init_f32(&fft_handler, FFT_BUFFER_SIZE);
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	4836      	ldr	r0, [pc, #216]	; (8001384 <main+0x108>)
 80012ac:	f003 fc8a 	bl	8004bc4 <arm_rfft_fast_init_f32>

  // Start I2S DMA streams
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(&hi2s2, rxBuf, ADC_BUFFER_SIZE); // Start DMA stream
 80012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b4:	4934      	ldr	r1, [pc, #208]	; (8001388 <main+0x10c>)
 80012b6:	4835      	ldr	r0, [pc, #212]	; (800138c <main+0x110>)
 80012b8:	f001 fcd2 	bl	8002c60 <HAL_I2S_Receive_DMA>
 80012bc:	4603      	mov	r3, r0
 80012be:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <main+0x54>
  {
	  led_on(RED_LED);
 80012c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ca:	f7ff feb7 	bl	800103c <led_on>
 80012ce:	e002      	b.n	80012d6 <main+0x5a>
  }
  else
  {
	  led_on(GREEN_LED);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff feb3 	bl	800103c <led_on>

  while (1)
  {


	  int fft_in_ptr = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
	  if (dataReadyFlag == 1)
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <main+0x114>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d124      	bne.n	800132c <main+0xb0>
	  {
		  //processData();
		  //dataReadyFlag = 0;
		  for (int i = 0; i < (ADC_BUFFER_SIZE/2); i += 2)
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	e01b      	b.n	8001320 <main+0xa4>
		  {
//			  fft_in_buf[fft_in_ptr] = (float) ((uint32_t) (rxBuf[i]<<16)|rxBuf[i+1]);
//			  fft_in_buf[fft_in_ptr] += (float) ((uint32_t) (rxBuf[i+2]<<16)|rxBuf[i+3]);

			  fft_in_buf[fft_in_ptr] = rxBuf[i];
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <main+0x10c>)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <main+0x118>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	edc3 7a00 	vstr	s15, [r3]

			  txBuf[i] = rxBuf[i];
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <main+0x10c>)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <main+0x11c>)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  //txBuf[i+1] = rxBuf[i+1];
			  //txBuf[i+2] = rxBuf[i+2];
			  //txBuf[i+3] = rxBuf[i+3];
			  fft_in_ptr++;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
		  for (int i = 0; i < (ADC_BUFFER_SIZE/2); i += 2)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3302      	adds	r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001326:	dbdf      	blt.n	80012e8 <main+0x6c>


		  }
		  DoFFT();
 8001328:	f7ff febe 	bl	80010a8 <DoFFT>
	  }

	  if (dataReadyFlag == 2)
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <main+0x114>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d1d0      	bne.n	80012d6 <main+0x5a>
	  {
		  //processData();
		  //dataReadyFlag = 0;
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 8001334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	e01b      	b.n	8001374 <main+0xf8>
		  {
			  //fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
			  //fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
			  fft_in_buf[fft_in_ptr] = rxBuf[i] ;
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <main+0x10c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	4a11      	ldr	r2, [pc, #68]	; (8001394 <main+0x118>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <main+0x10c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <main+0x11c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  //txBuf[i+1] = rxBuf[i+1];
			  //txBuf[i+2] = rxBuf[i+2];
			  //txBuf[i+3] = rxBuf[i+3];
			  fft_in_ptr++;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3302      	adds	r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800137a:	dbdf      	blt.n	800133c <main+0xc0>
			  //printf("%d\r\n",txBuf[i]);


		  }
		  DoFFT();
 800137c:	f7ff fe94 	bl	80010a8 <DoFFT>
  {
 8001380:	e7a9      	b.n	80012d6 <main+0x5a>
 8001382:	bf00      	nop
 8001384:	20006448 	.word	0x20006448
 8001388:	20000444 	.word	0x20000444
 800138c:	200001f8 	.word	0x200001f8
 8001390:	20006444 	.word	0x20006444
 8001394:	20004444 	.word	0x20004444
 8001398:	20002444 	.word	0x20002444

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2230      	movs	r2, #48	; 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fc2c 	bl	8005c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <SystemClock_Config+0xd0>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <SystemClock_Config+0xd0>)
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <SystemClock_Config+0xd0>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SystemClock_Config+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <SystemClock_Config+0xd4>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <SystemClock_Config+0xd4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001404:	2308      	movs	r3, #8
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001408:	23d8      	movs	r3, #216	; 0xd8
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fdd9 	bl	8002fd0 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001424:	f000 f968 	bl	80016f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001428:	f001 fd82 	bl	8002f30 <HAL_PWREx_EnableOverDrive>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001432:	f000 f961 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2107      	movs	r1, #7
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f85f 	bl	8003518 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001460:	f000 f94a 	bl	80016f8 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	; 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2S2_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2S2_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2S2_Init+0x50>)
 8001480:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001484:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2S2_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_I2S2_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2S2_Init+0x50>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2S2_Init+0x50>)
 800149c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80014a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_I2S2_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2S2_Init+0x50>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_I2S2_Init+0x50>)
 80014b0:	f001 faf0 	bl	8002a94 <HAL_I2S_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2S2_Init+0x4a>
  {
    Error_Handler();
 80014ba:	f000 f91d 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	40003800 	.word	0x40003800

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_SPI1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI1_Init+0x74>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI1_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI1_Init+0x74>)
 8001526:	2208      	movs	r2, #8
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_SPI1_Init+0x74>)
 800152c:	f002 fdca 	bl	80040c4 <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f8df 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000298 	.word	0x20000298
 8001544:	40013000 	.word	0x40013000

08001548 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_USART3_UART_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART3_UART_Init+0x58>)
 800158c:	f002 fe45 	bl	800421a <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 f8af 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003bc 	.word	0x200003bc
 80015a4:	40004800 	.word	0x40004800

080015a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_DMA_Init+0x70>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <MX_DMA_Init+0x70>)
 80015b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_DMA_Init+0x70>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_DMA_Init+0x70>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <MX_DMA_Init+0x70>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_DMA_Init+0x70>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	200e      	movs	r0, #14
 80015e4:	f000 fce1 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015e8:	200e      	movs	r0, #14
 80015ea:	f000 fcfa 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2038      	movs	r0, #56	; 0x38
 80015f4:	f000 fcd9 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015f8:	2038      	movs	r0, #56	; 0x38
 80015fa:	f000 fcf2 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	203b      	movs	r0, #59	; 0x3b
 8001604:	f000 fcd1 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001608:	203b      	movs	r0, #59	; 0x3b
 800160a:	f000 fcea 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_GPIO_Init+0xa8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_GPIO_Init+0xa8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_D_C_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <MX_GPIO_Init+0xac>)
 800169a:	f001 f9e1 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D_C_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D_C_Pin;
 800169e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_GPIO_Init+0xac>)
 80016b8:	f001 f826 	bl	8002708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020c00 	.word	0x40020c00

080016cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <_write+0x28>)
 80016e4:	f002 fde7 	bl	80042b6 <HAL_UART_Transmit>
	return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200003bc 	.word	0x200003bc

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x44>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_MspInit+0x44>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_MspInit+0x44>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x44>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x44>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x44>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0ac      	sub	sp, #176	; 0xb0
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	2284      	movs	r2, #132	; 0x84
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fa4b 	bl	8005c08 <memset>
  if(hi2s->Instance==SPI2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4f      	ldr	r2, [pc, #316]	; (80018b4 <HAL_I2S_MspInit+0x168>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f040 8096 	bne.w	80018aa <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8001792:	2300      	movs	r3, #0
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	4618      	mov	r0, r3
 800179c:	f002 f8a2 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 80017a6:	f7ff ffa7 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a42      	ldr	r2, [pc, #264]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a3c      	ldr	r2, [pc, #240]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_I2S_MspInit+0x16c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80017f2:	2342      	movs	r3, #66	; 0x42
 80017f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180a:	2305      	movs	r3, #5
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001814:	4619      	mov	r1, r3
 8001816:	4829      	ldr	r0, [pc, #164]	; (80018bc <HAL_I2S_MspInit+0x170>)
 8001818:	f000 ff76 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800181c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001836:	2305      	movs	r3, #5
 8001838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001840:	4619      	mov	r1, r3
 8001842:	481f      	ldr	r0, [pc, #124]	; (80018c0 <HAL_I2S_MspInit+0x174>)
 8001844:	f000 ff60 	bl	8002708 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_I2S_MspInit+0x17c>)
 800184c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 800186a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001882:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001886:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 8001890:	f000 fbc2 	bl	8002018 <HAL_DMA_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 800189a:	f7ff ff2d 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_I2S_MspInit+0x178>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	37b0      	adds	r7, #176	; 0xb0
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40003800 	.word	0x40003800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020400 	.word	0x40020400
 80018c4:	20000238 	.word	0x20000238
 80018c8:	40026058 	.word	0x40026058

080018cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_SPI_MspInit+0x138>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f040 8086 	bne.w	80019fc <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	4a44      	ldr	r2, [pc, #272]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 80018f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fa:	6453      	str	r3, [r2, #68]	; 0x44
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <HAL_SPI_MspInit+0x13c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001920:	23e0      	movs	r3, #224	; 0xe0
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001930:	2305      	movs	r3, #5
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4834      	ldr	r0, [pc, #208]	; (8001a0c <HAL_SPI_MspInit+0x140>)
 800193c:	f000 fee4 	bl	8002708 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001942:	4a34      	ldr	r2, [pc, #208]	; (8001a14 <HAL_SPI_MspInit+0x148>)
 8001944:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001948:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800194c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194e:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001950:	2240      	movs	r2, #64	; 0x40
 8001952:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 800195c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001960:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001982:	4823      	ldr	r0, [pc, #140]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001984:	f000 fb48 	bl	8002018 <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 800198e:	f7ff feb3 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_SPI_MspInit+0x144>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_SPI_MspInit+0x150>)
 80019a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019e2:	f000 fb19 	bl	8002018 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 80019ec:	f7ff fe84 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_SPI_MspInit+0x14c>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	200002fc 	.word	0x200002fc
 8001a14:	40026458 	.word	0x40026458
 8001a18:	2000035c 	.word	0x2000035c
 8001a1c:	40026410 	.word	0x40026410

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0aa      	sub	sp, #168	; 0xa8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2284      	movs	r2, #132	; 0x84
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 f8e1 	bl	8005c08 <memset>
  if(huart->Instance==USART3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d13c      	bne.n	8001aca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 ff40 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a6a:	f7ff fe45 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_UART_MspInit+0xbc>)
 8001ac6:	f000 fe1f 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	37a8      	adds	r7, #168	; 0xa8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004800 	.word	0x40004800
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020c00 	.word	0x40020c00

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f942 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA1_Stream3_IRQHandler+0x10>)
 8001b3a:	f000 fb7b 	bl	8002234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000238 	.word	0x20000238

08001b48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <DMA2_Stream0_IRQHandler+0x10>)
 8001b4e:	f000 fb71 	bl	8002234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000035c 	.word	0x2000035c

08001b5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <DMA2_Stream3_IRQHandler+0x10>)
 8001b62:	f000 fb67 	bl	8002234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200002fc 	.word	0x200002fc

08001b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_kill>:

int _kill(int pid, int sig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8a:	f004 f813 	bl	8005bb4 <__errno>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2216      	movs	r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_exit>:

void _exit (int status)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ffe7 	bl	8001b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb2:	e7fe      	b.n	8001bb2 <_exit+0x12>

08001bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc6:	f3af 8000 	nop.w
 8001bca:	4601      	mov	r1, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf0      	blt.n	8001bc6 <_read+0x12>
  }

  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f003 ff94 	bl	8005bb4 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20050000 	.word	0x20050000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20006460 	.word	0x20006460
 8001cc0:	20006478 	.word	0x20006478

08001cc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cee:	490e      	ldr	r1, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d04:	4c0b      	ldr	r4, [pc, #44]	; (8001d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d12:	f7ff ffd7 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f003 ff53 	bl	8005bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7ff faaf 	bl	800127c <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d2c:	0801bf4c 	.word	0x0801bf4c
  ldr r2, =_sbss
 8001d30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d34:	20006478 	.word	0x20006478

08001d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>

08001d3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 f928 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d44:	200f      	movs	r0, #15
 8001d46:	f000 f805 	bl	8001d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4a:	f7ff fcdb 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x54>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f943 	bl	8001ffe <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f000 f90b 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_InitTick+0x5c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20006464 	.word	0x20006464

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20006464 	.word	0x20006464

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <__NVIC_SetPriorityGrouping+0x40>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x40>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	05fa0000 	.word	0x05fa0000

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff feda 	bl	8001ddc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e099      	b.n	8002168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002054:	e00f      	b.n	8002076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002056:	f7ff fec1 	bl	8001ddc <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b05      	cmp	r3, #5
 8002062:	d908      	bls.n	8002076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e078      	b.n	8002168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e8      	bne.n	8002056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_DMA_Init+0x158>)
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4313      	orrs	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0307 	bic.w	r3, r3, #7
 80020f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2b04      	cmp	r3, #4
 8002108:	d117      	bne.n	800213a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa77 	bl	8002610 <DMA_CheckFifoParam>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002136:	2301      	movs	r3, #1
 8002138:	e016      	b.n	8002168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fa2e 	bl	80025a4 <DMA_CalcBaseAndBitshift>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	f010803f 	.word	0xf010803f

08002174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_DMA_Start_IT+0x26>
 8002196:	2302      	movs	r3, #2
 8002198:	e048      	b.n	800222c <HAL_DMA_Start_IT+0xb8>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d137      	bne.n	800221e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9c0 	bl	8002548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	223f      	movs	r2, #63	; 0x3f
 80021ce:	409a      	lsls	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0216 	orr.w	r2, r2, #22
 80021e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0208 	orr.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e005      	b.n	800222a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800222a:	7dfb      	ldrb	r3, [r7, #23]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002240:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_DMA_IRQHandler+0x248>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a8e      	ldr	r2, [pc, #568]	; (8002480 <HAL_DMA_IRQHandler+0x24c>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2208      	movs	r2, #8
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01a      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2208      	movs	r2, #8
 800228e:	409a      	lsls	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2201      	movs	r2, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2201      	movs	r2, #1
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2204      	movs	r2, #4
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	2204      	movs	r2, #4
 80022fa:	409a      	lsls	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0204 	orr.w	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	2210      	movs	r2, #16
 8002312:	409a      	lsls	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03c      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	2210      	movs	r2, #16
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d018      	beq.n	8002376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d024      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
 8002362:	e01f      	b.n	80023a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e016      	b.n	80023a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0208 	bic.w	r2, r2, #8
 8002392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2220      	movs	r2, #32
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 808f 	beq.w	80024d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8087 	beq.w	80024d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	2220      	movs	r2, #32
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d136      	bne.n	800244c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0216 	bic.w	r2, r2, #22
 80023ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <HAL_DMA_IRQHandler+0x1da>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0208 	bic.w	r2, r2, #8
 800241c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	223f      	movs	r2, #63	; 0x3f
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	2b00      	cmp	r3, #0
 8002440:	d07e      	beq.n	8002540 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
        }
        return;
 800244a:	e079      	b.n	8002540 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01d      	beq.n	8002496 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	2b00      	cmp	r3, #0
 800246e:	d031      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e02c      	b.n	80024d4 <HAL_DMA_IRQHandler+0x2a0>
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000
 8002480:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e01e      	b.n	80024d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0210 	bic.w	r2, r2, #16
 80024b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d032      	beq.n	8002542 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d022      	beq.n	800252e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2205      	movs	r2, #5
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	d307      	bcc.n	800251c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f2      	bne.n	8002500 <HAL_DMA_IRQHandler+0x2cc>
 800251a:	e000      	b.n	800251e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800251c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
 800253e:	e000      	b.n	8002542 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002540:	bf00      	nop
    }
  }
}
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d108      	bne.n	8002588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002586:	e007      	b.n	8002598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3b10      	subs	r3, #16
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <DMA_CalcBaseAndBitshift+0x60>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <DMA_CalcBaseAndBitshift+0x64>)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d908      	bls.n	80025e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <DMA_CalcBaseAndBitshift+0x68>)
 80025da:	4013      	ands	r3, r2
 80025dc:	1d1a      	adds	r2, r3, #4
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	659a      	str	r2, [r3, #88]	; 0x58
 80025e2:	e006      	b.n	80025f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <DMA_CalcBaseAndBitshift+0x68>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	aaaaaaab 	.word	0xaaaaaaab
 8002608:	08008700 	.word	0x08008700
 800260c:	fffffc00 	.word	0xfffffc00

08002610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11f      	bne.n	800266a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d856      	bhi.n	80026de <DMA_CheckFifoParam+0xce>
 8002630:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <DMA_CheckFifoParam+0x28>)
 8002632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002636:	bf00      	nop
 8002638:	08002649 	.word	0x08002649
 800263c:	0800265b 	.word	0x0800265b
 8002640:	08002649 	.word	0x08002649
 8002644:	080026df 	.word	0x080026df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d046      	beq.n	80026e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e043      	b.n	80026e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002662:	d140      	bne.n	80026e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e03d      	b.n	80026e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002672:	d121      	bne.n	80026b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d837      	bhi.n	80026ea <DMA_CheckFifoParam+0xda>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <DMA_CheckFifoParam+0x70>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	08002691 	.word	0x08002691
 8002684:	08002697 	.word	0x08002697
 8002688:	08002691 	.word	0x08002691
 800268c:	080026a9 	.word	0x080026a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      break;
 8002694:	e030      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d025      	beq.n	80026ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a6:	e022      	b.n	80026ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026b6:	e01c      	b.n	80026f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d903      	bls.n	80026c6 <DMA_CheckFifoParam+0xb6>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d003      	beq.n	80026cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026c4:	e018      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ca:	e015      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e00b      	b.n	80026f6 <DMA_CheckFifoParam+0xe6>
      break;
 80026de:	bf00      	nop
 80026e0:	e00a      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e008      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
 80026e8:	e006      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
 80026ec:	e004      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
 80026f0:	e002      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <DMA_CheckFifoParam+0xe8>
      break;
 80026f6:	bf00      	nop
    }
  } 
  
  return status; 
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e175      	b.n	8002a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 8164 	bne.w	8002a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d005      	beq.n	800275e <HAL_GPIO_Init+0x56>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d130      	bne.n	80027c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0201 	and.w	r2, r3, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d017      	beq.n	80027fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80be 	beq.w	8002a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_GPIO_Init+0x324>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028aa:	4a61      	ldr	r2, [pc, #388]	; (8002a30 <HAL_GPIO_Init+0x328>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d037      	beq.n	8002946 <HAL_GPIO_Init+0x23e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_GPIO_Init+0x330>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_GPIO_Init+0x23a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x236>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x338>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x232>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_GPIO_Init+0x33c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x22e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_GPIO_Init+0x340>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x22a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_GPIO_Init+0x344>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x226>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_GPIO_Init+0x348>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x222>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x21e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_GPIO_Init+0x350>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x21a>
 800291e:	2309      	movs	r3, #9
 8002920:	e012      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002922:	230a      	movs	r3, #10
 8002924:	e010      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002926:	2308      	movs	r3, #8
 8002928:	e00e      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292a:	2307      	movs	r3, #7
 800292c:	e00c      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292e:	2306      	movs	r3, #6
 8002930:	e00a      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002932:	2305      	movs	r3, #5
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002936:	2304      	movs	r3, #4
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002958:	4935      	ldr	r1, [pc, #212]	; (8002a30 <HAL_GPIO_Init+0x328>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_GPIO_Init+0x354>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029de:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f ae86 	bls.w	8002728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021c00 	.word	0x40021c00
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022400 	.word	0x40022400
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0d2      	b.n	8002c4c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fe46 	bl	800174c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69d9      	ldr	r1, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <HAL_I2S_Init+0x1c0>)
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2202      	movs	r2, #2
 8002ade:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d067      	beq.n	8002bb8 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002af0:	2310      	movs	r3, #16
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e001      	b.n	8002afa <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d802      	bhi.n	8002b08 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d102      	bne.n	8002b16 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_I2S_Init+0x1c4>)
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e003      	b.n	8002b1e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f968 	bl	8002dec <I2S_GetClockFreq>
 8002b1c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b26:	d125      	bne.n	8002b74 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d010      	beq.n	8002b52 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	3305      	adds	r3, #5
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	e01f      	b.n	8002b92 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	461a      	mov	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	3305      	adds	r3, #5
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e00e      	b.n	8002b92 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	3305      	adds	r3, #5
 8002b90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <HAL_I2S_Init+0x1c8>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	08db      	lsrs	r3, r3, #3
 8002b9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d902      	bls.n	8002bcc <HAL_I2S_Init+0x138>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d907      	bls.n	8002bdc <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	f043 0210 	orr.w	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e037      	b.n	8002c4c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	ea42 0103 	orr.w	r1, r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_I2S_Init+0x1c0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6851      	ldr	r1, [r2, #4]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68d2      	ldr	r2, [r2, #12]
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6992      	ldr	r2, [r2, #24]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d003      	beq.n	8002c2c <HAL_I2S_Init+0x198>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2bb0      	cmp	r3, #176	; 0xb0
 8002c2a:	d107      	bne.n	8002c3c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffff040 	.word	0xfffff040
 8002c58:	00bb8000 	.word	0x00bb8000
 8002c5c:	cccccccd 	.word	0xcccccccd

08002c60 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_I2S_Receive_DMA+0x1a>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0a1      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2S_Receive_DMA+0x2e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e099      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x162>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
 8002cac:	e089      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d002      	beq.n	8002cda <HAL_I2S_Receive_DMA+0x7a>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002cee:	e005      	b.n	8002cfc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <HAL_I2S_Receive_DMA+0x16c>)
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_I2S_Receive_DMA+0x170>)
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4a30      	ldr	r2, [pc, #192]	; (8002dd4 <HAL_I2S_Receive_DMA+0x174>)
 8002d12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d22:	d10a      	bne.n	8002d3a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d52:	f7ff fa0f 	bl	8002174 <HAL_DMA_Start_IT>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f043 0208 	orr.w	r2, r3, #8
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e022      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d98:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	08002ec7 	.word	0x08002ec7
 8002dd0:	08002e85 	.word	0x08002e85
 8002dd4:	08002ee3 	.word	0x08002ee3

08002dd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d02d      	beq.n	8002e58 <I2S_GetClockFreq+0x6c>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d12e      	bne.n	8002e5e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <I2S_GetClockFreq+0x88>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <I2S_GetClockFreq+0x88>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <I2S_GetClockFreq+0x8c>)
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e007      	b.n	8002e2e <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <I2S_GetClockFreq+0x88>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <I2S_GetClockFreq+0x90>)
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <I2S_GetClockFreq+0x88>)
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e34:	0f1b      	lsrs	r3, r3, #28
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <I2S_GetClockFreq+0x88>)
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	613b      	str	r3, [r7, #16]

      break;
 8002e56:	e005      	b.n	8002e64 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <I2S_GetClockFreq+0x94>)
 8002e5a:	613b      	str	r3, [r7, #16]
      break;
 8002e5c:	e002      	b.n	8002e64 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
      break;
 8002e62:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8002e64:	693b      	ldr	r3, [r7, #16]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	017d7840 	.word	0x017d7840
 8002e80:	00bb8000 	.word	0x00bb8000

08002e84 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10e      	bne.n	8002eb8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7fe f9cd 	bl	8001258 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7fe f9af 	bl	8001238 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0203 	bic.w	r2, r2, #3
 8002efe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	f043 0208 	orr.w	r2, r3, #8
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff ff59 	bl	8002dd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5e:	f7fe ff3d 	bl	8001ddc <HAL_GetTick>
 8002f62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f64:	e009      	b.n	8002f7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f66:	f7fe ff39 	bl	8001ddc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f74:	d901      	bls.n	8002f7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e022      	b.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	d1ee      	bne.n	8002f66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f94:	f7fe ff22 	bl	8001ddc <HAL_GetTick>
 8002f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f9a:	e009      	b.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f9c:	f7fe ff1e 	bl	8001ddc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002faa:	d901      	bls.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e007      	b.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fbc:	d1ee      	bne.n	8002f9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e291      	b.n	800350a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8087 	beq.w	8003102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff4:	4b96      	ldr	r3, [pc, #600]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d00c      	beq.n	800301a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003000:	4b93      	ldr	r3, [pc, #588]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d112      	bne.n	8003032 <HAL_RCC_OscConfig+0x62>
 800300c:	4b90      	ldr	r3, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003018:	d10b      	bne.n	8003032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301a:	4b8d      	ldr	r3, [pc, #564]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06c      	beq.n	8003100 <HAL_RCC_OscConfig+0x130>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d168      	bne.n	8003100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e26b      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x7a>
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e02e      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x9c>
 8003052:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7e      	ldr	r2, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b7c      	ldr	r3, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7b      	ldr	r2, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0xc0>
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a72      	ldr	r2, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xd8>
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6b      	ldr	r2, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fe94 	bl	8001ddc <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe fe90 	bl	8001ddc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e21f      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xe8>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe fe80 	bl	8001ddc <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe fe7c 	bl	8001ddc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e20b      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x110>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d069      	beq.n	80031e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310e:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x190>
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x17a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1df      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	493d      	ldr	r1, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e040      	b.n	80031e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d023      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a38      	ldr	r2, [pc, #224]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fe32 	bl	8001ddc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe fe2e 	bl	8001ddc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1bd      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4929      	ldr	r1, [pc, #164]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
 80031ae:	e018      	b.n	80031e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fe0e 	bl	8001ddc <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c4:	f7fe fe0a 	bl	8001ddc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e199      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d038      	beq.n	8003260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d019      	beq.n	800322a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe fdeb 	bl	8001ddc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fde7 	bl	8001ddc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e176      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x23a>
 8003228:	e01a      	b.n	8003260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_RCC_OscConfig+0x280>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fe fdd1 	bl	8001ddc <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323e:	f7fe fdcd 	bl	8001ddc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d903      	bls.n	8003254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e15c      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
 8003250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ee      	bne.n	800323e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a4 	beq.w	80033b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326e:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a87      	ldr	r2, [pc, #540]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b85      	ldr	r3, [pc, #532]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003296:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <HAL_RCC_OscConfig+0x4d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d118      	bne.n	80032d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032a2:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x4d0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7e      	ldr	r2, [pc, #504]	; (80034a0 <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fd95 	bl	8001ddc <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fe fd91 	bl	8001ddc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b64      	cmp	r3, #100	; 0x64
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e120      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c8:	4b75      	ldr	r3, [pc, #468]	; (80034a0 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x31a>
 80032dc:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a6e      	ldr	r2, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	e02d      	b.n	8003346 <HAL_RCC_OscConfig+0x376>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x33c>
 80032f2:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b67      	ldr	r3, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	e01c      	b.n	8003346 <HAL_RCC_OscConfig+0x376>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x35e>
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a60      	ldr	r2, [pc, #384]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a5d      	ldr	r2, [pc, #372]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	e00b      	b.n	8003346 <HAL_RCC_OscConfig+0x376>
 800332e:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a5a      	ldr	r2, [pc, #360]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	4b58      	ldr	r3, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a57      	ldr	r2, [pc, #348]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d015      	beq.n	800337a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fd45 	bl	8001ddc <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fd41 	bl	8001ddc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0ce      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	4b4b      	ldr	r3, [pc, #300]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <HAL_RCC_OscConfig+0x386>
 8003378:	e014      	b.n	80033a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fd2f 	bl	8001ddc <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe fd2b 	bl	8001ddc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0b8      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	4b40      	ldr	r3, [pc, #256]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ee      	bne.n	8003382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b3c      	ldr	r3, [pc, #240]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a3b      	ldr	r2, [pc, #236]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80a4 	beq.w	8003508 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d06b      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d149      	bne.n	8003468 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a30      	ldr	r2, [pc, #192]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fcfc 	bl	8001ddc <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fcf8 	bl	8001ddc <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e087      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	4313      	orrs	r3, r2
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800342e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003432:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fccc 	bl	8001ddc <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fcc8 	bl	8001ddc <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e057      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x478>
 8003466:	e04f      	b.n	8003508 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0b      	ldr	r2, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe fcb2 	bl	8001ddc <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fcae 	bl	8001ddc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e03d      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_OscConfig+0x4cc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x4ac>
 800349a:	e035      	b.n	8003508 <HAL_RCC_OscConfig+0x538>
 800349c:	40023800 	.word	0x40023800
 80034a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x544>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d028      	beq.n	8003504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d121      	bne.n	8003504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11a      	bne.n	8003504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0d0      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d910      	bls.n	8003560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 020f 	bic.w	r2, r3, #15
 8003546:	4965      	ldr	r1, [pc, #404]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b63      	ldr	r3, [pc, #396]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0b8      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d020      	beq.n	80035ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003578:	4b59      	ldr	r3, [pc, #356]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a58      	ldr	r2, [pc, #352]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a52      	ldr	r2, [pc, #328]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800359a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359c:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	494d      	ldr	r1, [pc, #308]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d040      	beq.n	800363c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d115      	bne.n	80035fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e07f      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e073      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06b      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4936      	ldr	r1, [pc, #216]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fe fbe6 	bl	8001ddc <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fbe2 	bl	8001ddc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e053      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d210      	bcs.n	800366c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	4922      	ldr	r1, [pc, #136]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e032      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4916      	ldr	r1, [pc, #88]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	490e      	ldr	r1, [pc, #56]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036aa:	f000 f821 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	490a      	ldr	r1, [pc, #40]	; (80036e4 <HAL_RCC_ClockConfig+0x1cc>)
 80036bc:	5ccb      	ldrb	r3, [r1, r3]
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_ClockConfig+0x1d0>)
 80036c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1d4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fb42 	bl	8001d54 <HAL_InitTick>

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023c00 	.word	0x40023c00
 80036e0:	40023800 	.word	0x40023800
 80036e4:	080086e8 	.word	0x080086e8
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000004 	.word	0x20000004

080036f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f4:	b090      	sub	sp, #64	; 0x40
 80036f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 80036fc:	2300      	movs	r3, #0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003700:	2300      	movs	r3, #0
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d00d      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x40>
 8003714:	2b08      	cmp	r3, #8
 8003716:	f200 80a1 	bhi.w	800385c <HAL_RCC_GetSysClockFreq+0x16c>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x34>
 800371e:	2b04      	cmp	r3, #4
 8003720:	d003      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x3a>
 8003722:	e09b      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_GetSysClockFreq+0x184>)
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003728:	e09b      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372a:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800372e:	e098      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800373a:	4b4d      	ldr	r3, [pc, #308]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d028      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	2200      	movs	r2, #0
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	627a      	str	r2, [r7, #36]	; 0x24
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003758:	2100      	movs	r1, #0
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800375c:	fb03 f201 	mul.w	r2, r3, r1
 8003760:	2300      	movs	r3, #0
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	4413      	add	r3, r2
 8003768:	4a43      	ldr	r2, [pc, #268]	; (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800376a:	fba0 1202 	umull	r1, r2, r0, r2
 800376e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003770:	460a      	mov	r2, r1
 8003772:	62ba      	str	r2, [r7, #40]	; 0x28
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	4413      	add	r3, r2
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	2200      	movs	r2, #0
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	61fa      	str	r2, [r7, #28]
 8003782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003786:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800378a:	f7fd fa8d 	bl	8000ca8 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4613      	mov	r3, r2
 8003794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003796:	e053      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	2200      	movs	r2, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	617a      	str	r2, [r7, #20]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037aa:	f04f 0b00 	mov.w	fp, #0
 80037ae:	4652      	mov	r2, sl
 80037b0:	465b      	mov	r3, fp
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	ebb2 080a 	subs.w	r8, r2, sl
 80037ca:	eb63 090b 	sbc.w	r9, r3, fp
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037e2:	ebb2 0408 	subs.w	r4, r2, r8
 80037e6:	eb63 0509 	sbc.w	r5, r3, r9
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	00eb      	lsls	r3, r5, #3
 80037f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f8:	00e2      	lsls	r2, r4, #3
 80037fa:	4614      	mov	r4, r2
 80037fc:	461d      	mov	r5, r3
 80037fe:	eb14 030a 	adds.w	r3, r4, sl
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	eb45 030b 	adc.w	r3, r5, fp
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003816:	4629      	mov	r1, r5
 8003818:	028b      	lsls	r3, r1, #10
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003820:	4621      	mov	r1, r4
 8003822:	028a      	lsls	r2, r1, #10
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	2200      	movs	r2, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003834:	f7fd fa38 	bl	8000ca8 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	3301      	adds	r3, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800385a:	e002      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetSysClockFreq+0x184>)
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003864:	4618      	mov	r0, r3
 8003866:	3740      	adds	r7, #64	; 0x40
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	00f42400 	.word	0x00f42400
 8003878:	017d7840 	.word	0x017d7840

0800387c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_GetHCLKFreq+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000000 	.word	0x20000000

08003894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003898:	f7ff fff0 	bl	800387c <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0a9b      	lsrs	r3, r3, #10
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	080086f8 	.word	0x080086f8

080038bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c0:	f7ff ffdc 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0b5b      	lsrs	r3, r3, #13
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	080086f8 	.word	0x080086f8

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390c:	4b69      	ldr	r3, [pc, #420]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a68      	ldr	r2, [pc, #416]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003916:	6093      	str	r3, [r2, #8]
 8003918:	4b66      	ldr	r3, [pc, #408]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	4964      	ldr	r1, [pc, #400]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393e:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003944:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	4959      	ldr	r1, [pc, #356]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395c:	d101      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800397a:	4b4e      	ldr	r3, [pc, #312]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	494a      	ldr	r1, [pc, #296]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d101      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 808b 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6413      	str	r3, [r2, #64]	; 0x40
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fe f9f6 	bl	8001ddc <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fe f9f2 	bl	8001ddc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e357      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d035      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d02e      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d114      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe f9ba 	bl	8001ddc <HAL_GetTick>
 8003a68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f9b6 	bl	8001ddc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e319      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aaa:	400b      	ands	r3, r1
 8003aac:	4901      	ldr	r1, [pc, #4]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	0ffffcff 	.word	0x0ffffcff
 8003ac0:	4baa      	ldr	r3, [pc, #680]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4aa9      	ldr	r2, [pc, #676]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aca:	6093      	str	r3, [r2, #8]
 8003acc:	4ba7      	ldr	r3, [pc, #668]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	49a4      	ldr	r1, [pc, #656]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d010      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aea:	4ba0      	ldr	r3, [pc, #640]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af0:	4a9e      	ldr	r2, [pc, #632]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003afa:	4b9c      	ldr	r3, [pc, #624]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	4999      	ldr	r1, [pc, #612]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b18:	4b94      	ldr	r3, [pc, #592]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b26:	4991      	ldr	r1, [pc, #580]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3a:	4b8c      	ldr	r3, [pc, #560]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b48:	4988      	ldr	r1, [pc, #544]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5c:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6a:	4980      	ldr	r1, [pc, #512]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7e:	4b7b      	ldr	r3, [pc, #492]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4977      	ldr	r1, [pc, #476]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba0:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	496f      	ldr	r1, [pc, #444]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f023 020c 	bic.w	r2, r3, #12
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	4966      	ldr	r1, [pc, #408]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	495e      	ldr	r1, [pc, #376]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c06:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	4955      	ldr	r1, [pc, #340]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4944      	ldr	r1, [pc, #272]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c6c:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	493c      	ldr	r1, [pc, #240]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	4933      	ldr	r1, [pc, #204]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	492b      	ldr	r1, [pc, #172]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d011      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce0:	4922      	ldr	r1, [pc, #136]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d02:	2301      	movs	r3, #1
 8003d04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	4912      	ldr	r1, [pc, #72]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d44:	4909      	ldr	r1, [pc, #36]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d006      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80d9 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d60:	4b02      	ldr	r3, [pc, #8]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a01      	ldr	r2, [pc, #4]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fe f833 	bl	8001ddc <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7a:	f7fe f82f 	bl	8001ddc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e194      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11d      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	019a      	lsls	r2, r3, #6
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	071b      	lsls	r3, r3, #28
 8003de0:	4957      	ldr	r1, [pc, #348]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02e      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d129      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e14:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e28:	0f1b      	lsrs	r3, r3, #28
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	019a      	lsls	r2, r3, #6
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	071b      	lsls	r3, r3, #28
 8003e48:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e56:	f023 021f 	bic.w	r2, r3, #31
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4937      	ldr	r1, [pc, #220]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	0e1b      	lsrs	r3, r3, #24
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	0f1b      	lsrs	r3, r3, #28
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	019a      	lsls	r2, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	071b      	lsls	r3, r3, #28
 8003ea8:	4925      	ldr	r1, [pc, #148]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d011      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	019a      	lsls	r2, r3, #6
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	071b      	lsls	r3, r3, #28
 8003ed8:	4919      	ldr	r1, [pc, #100]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fd ff76 	bl	8001ddc <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef4:	f7fd ff72 	bl	8001ddc <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0d7      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f040 80cd 	bne.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f26:	f7fd ff59 	bl	8001ddc <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f2e:	f7fd ff55 	bl	8001ddc <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0ba      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d0ed      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d12a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	0f1b      	lsrs	r3, r3, #28
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	019a      	lsls	r2, r3, #6
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	4944      	ldr	r1, [pc, #272]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb6:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	493d      	ldr	r1, [pc, #244]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe4:	d11d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	0e1b      	lsrs	r3, r3, #24
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff4:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	0f1b      	lsrs	r3, r3, #28
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	4929      	ldr	r1, [pc, #164]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d028      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	4917      	ldr	r1, [pc, #92]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4911      	ldr	r1, [pc, #68]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fea6 	bl	8001ddc <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004094:	f7fd fea2 	bl	8001ddc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e007      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b2:	d1ef      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e09d      	b.n	8004212 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e6:	d009      	beq.n	80040fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	61da      	str	r2, [r3, #28]
 80040ee:	e005      	b.n	80040fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fbd8 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004132:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800413c:	d902      	bls.n	8004144 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e002      	b.n	800414a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004148:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004152:	d007      	beq.n	8004164 <HAL_SPI_Init+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	ea42 0103 	orr.w	r1, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	f003 0204 	and.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041e0:	ea42 0103 	orr.w	r1, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e040      	b.n	80042ae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fd fbef 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2224      	movs	r2, #36	; 0x24
 8004246:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8af 	bl	80043bc <UART_SetConfig>
 800425e:	4603      	mov	r3, r0
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e022      	b.n	80042ae <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb07 	bl	8004884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004294:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fb8e 	bl	80049c8 <UART_CheckIdleState>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b08a      	sub	sp, #40	; 0x28
 80042ba:	af02      	add	r7, sp, #8
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d171      	bne.n	80043b2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_Transmit+0x24>
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06a      	b.n	80043b4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ec:	f7fd fd76 	bl	8001ddc <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d108      	bne.n	800431e <HAL_UART_Transmit+0x68>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e003      	b.n	8004326 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004326:	e02c      	b.n	8004382 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fb7f 	bl	8004a36 <UART_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e038      	b.n	80043b4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3302      	adds	r3, #2
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e007      	b.n	8004370 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1cc      	bne.n	8004328 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2140      	movs	r1, #64	; 0x40
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fb4c 	bl	8004a36 <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e005      	b.n	80043b4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4ba6      	ldr	r3, [pc, #664]	; (8004680 <UART_SetConfig+0x2c4>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a94      	ldr	r2, [pc, #592]	; (8004684 <UART_SetConfig+0x2c8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d120      	bne.n	800447a <UART_SetConfig+0xbe>
 8004438:	4b93      	ldr	r3, [pc, #588]	; (8004688 <UART_SetConfig+0x2cc>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b03      	cmp	r3, #3
 8004444:	d816      	bhi.n	8004474 <UART_SetConfig+0xb8>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x90>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800445d 	.word	0x0800445d
 8004450:	08004469 	.word	0x08004469
 8004454:	08004463 	.word	0x08004463
 8004458:	0800446f 	.word	0x0800446f
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e150      	b.n	8004704 <UART_SetConfig+0x348>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e14d      	b.n	8004704 <UART_SetConfig+0x348>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e14a      	b.n	8004704 <UART_SetConfig+0x348>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e147      	b.n	8004704 <UART_SetConfig+0x348>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e144      	b.n	8004704 <UART_SetConfig+0x348>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a83      	ldr	r2, [pc, #524]	; (800468c <UART_SetConfig+0x2d0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d132      	bne.n	80044ea <UART_SetConfig+0x12e>
 8004484:	4b80      	ldr	r3, [pc, #512]	; (8004688 <UART_SetConfig+0x2cc>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d828      	bhi.n	80044e4 <UART_SetConfig+0x128>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0xdc>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	080044e5 	.word	0x080044e5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044d9 	.word	0x080044d9
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044d3 	.word	0x080044d3
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044e5 	.word	0x080044e5
 80044c8:	080044df 	.word	0x080044df
 80044cc:	2300      	movs	r3, #0
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e118      	b.n	8004704 <UART_SetConfig+0x348>
 80044d2:	2302      	movs	r3, #2
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e115      	b.n	8004704 <UART_SetConfig+0x348>
 80044d8:	2304      	movs	r3, #4
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e112      	b.n	8004704 <UART_SetConfig+0x348>
 80044de:	2308      	movs	r3, #8
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e10f      	b.n	8004704 <UART_SetConfig+0x348>
 80044e4:	2310      	movs	r3, #16
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e10c      	b.n	8004704 <UART_SetConfig+0x348>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a68      	ldr	r2, [pc, #416]	; (8004690 <UART_SetConfig+0x2d4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d120      	bne.n	8004536 <UART_SetConfig+0x17a>
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <UART_SetConfig+0x2cc>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	d013      	beq.n	800452a <UART_SetConfig+0x16e>
 8004502:	2b30      	cmp	r3, #48	; 0x30
 8004504:	d814      	bhi.n	8004530 <UART_SetConfig+0x174>
 8004506:	2b20      	cmp	r3, #32
 8004508:	d009      	beq.n	800451e <UART_SetConfig+0x162>
 800450a:	2b20      	cmp	r3, #32
 800450c:	d810      	bhi.n	8004530 <UART_SetConfig+0x174>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <UART_SetConfig+0x15c>
 8004512:	2b10      	cmp	r3, #16
 8004514:	d006      	beq.n	8004524 <UART_SetConfig+0x168>
 8004516:	e00b      	b.n	8004530 <UART_SetConfig+0x174>
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e0f2      	b.n	8004704 <UART_SetConfig+0x348>
 800451e:	2302      	movs	r3, #2
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e0ef      	b.n	8004704 <UART_SetConfig+0x348>
 8004524:	2304      	movs	r3, #4
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e0ec      	b.n	8004704 <UART_SetConfig+0x348>
 800452a:	2308      	movs	r3, #8
 800452c:	77fb      	strb	r3, [r7, #31]
 800452e:	e0e9      	b.n	8004704 <UART_SetConfig+0x348>
 8004530:	2310      	movs	r3, #16
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e0e6      	b.n	8004704 <UART_SetConfig+0x348>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a56      	ldr	r2, [pc, #344]	; (8004694 <UART_SetConfig+0x2d8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d120      	bne.n	8004582 <UART_SetConfig+0x1c6>
 8004540:	4b51      	ldr	r3, [pc, #324]	; (8004688 <UART_SetConfig+0x2cc>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800454a:	2bc0      	cmp	r3, #192	; 0xc0
 800454c:	d013      	beq.n	8004576 <UART_SetConfig+0x1ba>
 800454e:	2bc0      	cmp	r3, #192	; 0xc0
 8004550:	d814      	bhi.n	800457c <UART_SetConfig+0x1c0>
 8004552:	2b80      	cmp	r3, #128	; 0x80
 8004554:	d009      	beq.n	800456a <UART_SetConfig+0x1ae>
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d810      	bhi.n	800457c <UART_SetConfig+0x1c0>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <UART_SetConfig+0x1a8>
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d006      	beq.n	8004570 <UART_SetConfig+0x1b4>
 8004562:	e00b      	b.n	800457c <UART_SetConfig+0x1c0>
 8004564:	2300      	movs	r3, #0
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e0cc      	b.n	8004704 <UART_SetConfig+0x348>
 800456a:	2302      	movs	r3, #2
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e0c9      	b.n	8004704 <UART_SetConfig+0x348>
 8004570:	2304      	movs	r3, #4
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e0c6      	b.n	8004704 <UART_SetConfig+0x348>
 8004576:	2308      	movs	r3, #8
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e0c3      	b.n	8004704 <UART_SetConfig+0x348>
 800457c:	2310      	movs	r3, #16
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e0c0      	b.n	8004704 <UART_SetConfig+0x348>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a44      	ldr	r2, [pc, #272]	; (8004698 <UART_SetConfig+0x2dc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d125      	bne.n	80045d8 <UART_SetConfig+0x21c>
 800458c:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <UART_SetConfig+0x2cc>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459a:	d017      	beq.n	80045cc <UART_SetConfig+0x210>
 800459c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a0:	d817      	bhi.n	80045d2 <UART_SetConfig+0x216>
 80045a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a6:	d00b      	beq.n	80045c0 <UART_SetConfig+0x204>
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ac:	d811      	bhi.n	80045d2 <UART_SetConfig+0x216>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <UART_SetConfig+0x1fe>
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d006      	beq.n	80045c6 <UART_SetConfig+0x20a>
 80045b8:	e00b      	b.n	80045d2 <UART_SetConfig+0x216>
 80045ba:	2300      	movs	r3, #0
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e0a1      	b.n	8004704 <UART_SetConfig+0x348>
 80045c0:	2302      	movs	r3, #2
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e09e      	b.n	8004704 <UART_SetConfig+0x348>
 80045c6:	2304      	movs	r3, #4
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e09b      	b.n	8004704 <UART_SetConfig+0x348>
 80045cc:	2308      	movs	r3, #8
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e098      	b.n	8004704 <UART_SetConfig+0x348>
 80045d2:	2310      	movs	r3, #16
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e095      	b.n	8004704 <UART_SetConfig+0x348>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <UART_SetConfig+0x2e0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d125      	bne.n	800462e <UART_SetConfig+0x272>
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <UART_SetConfig+0x2cc>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045f0:	d017      	beq.n	8004622 <UART_SetConfig+0x266>
 80045f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045f6:	d817      	bhi.n	8004628 <UART_SetConfig+0x26c>
 80045f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fc:	d00b      	beq.n	8004616 <UART_SetConfig+0x25a>
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004602:	d811      	bhi.n	8004628 <UART_SetConfig+0x26c>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <UART_SetConfig+0x254>
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d006      	beq.n	800461c <UART_SetConfig+0x260>
 800460e:	e00b      	b.n	8004628 <UART_SetConfig+0x26c>
 8004610:	2301      	movs	r3, #1
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e076      	b.n	8004704 <UART_SetConfig+0x348>
 8004616:	2302      	movs	r3, #2
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e073      	b.n	8004704 <UART_SetConfig+0x348>
 800461c:	2304      	movs	r3, #4
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e070      	b.n	8004704 <UART_SetConfig+0x348>
 8004622:	2308      	movs	r3, #8
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e06d      	b.n	8004704 <UART_SetConfig+0x348>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e06a      	b.n	8004704 <UART_SetConfig+0x348>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <UART_SetConfig+0x2e4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d138      	bne.n	80046aa <UART_SetConfig+0x2ee>
 8004638:	4b13      	ldr	r3, [pc, #76]	; (8004688 <UART_SetConfig+0x2cc>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004646:	d017      	beq.n	8004678 <UART_SetConfig+0x2bc>
 8004648:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800464c:	d82a      	bhi.n	80046a4 <UART_SetConfig+0x2e8>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	d00b      	beq.n	800466c <UART_SetConfig+0x2b0>
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004658:	d824      	bhi.n	80046a4 <UART_SetConfig+0x2e8>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <UART_SetConfig+0x2aa>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	d006      	beq.n	8004672 <UART_SetConfig+0x2b6>
 8004664:	e01e      	b.n	80046a4 <UART_SetConfig+0x2e8>
 8004666:	2300      	movs	r3, #0
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e04b      	b.n	8004704 <UART_SetConfig+0x348>
 800466c:	2302      	movs	r3, #2
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e048      	b.n	8004704 <UART_SetConfig+0x348>
 8004672:	2304      	movs	r3, #4
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e045      	b.n	8004704 <UART_SetConfig+0x348>
 8004678:	2308      	movs	r3, #8
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e042      	b.n	8004704 <UART_SetConfig+0x348>
 800467e:	bf00      	nop
 8004680:	efff69f3 	.word	0xefff69f3
 8004684:	40011000 	.word	0x40011000
 8004688:	40023800 	.word	0x40023800
 800468c:	40004400 	.word	0x40004400
 8004690:	40004800 	.word	0x40004800
 8004694:	40004c00 	.word	0x40004c00
 8004698:	40005000 	.word	0x40005000
 800469c:	40011400 	.word	0x40011400
 80046a0:	40007800 	.word	0x40007800
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e02c      	b.n	8004704 <UART_SetConfig+0x348>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a72      	ldr	r2, [pc, #456]	; (8004878 <UART_SetConfig+0x4bc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d125      	bne.n	8004700 <UART_SetConfig+0x344>
 80046b4:	4b71      	ldr	r3, [pc, #452]	; (800487c <UART_SetConfig+0x4c0>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046c2:	d017      	beq.n	80046f4 <UART_SetConfig+0x338>
 80046c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046c8:	d817      	bhi.n	80046fa <UART_SetConfig+0x33e>
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ce:	d00b      	beq.n	80046e8 <UART_SetConfig+0x32c>
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d4:	d811      	bhi.n	80046fa <UART_SetConfig+0x33e>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <UART_SetConfig+0x326>
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d006      	beq.n	80046ee <UART_SetConfig+0x332>
 80046e0:	e00b      	b.n	80046fa <UART_SetConfig+0x33e>
 80046e2:	2300      	movs	r3, #0
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e00d      	b.n	8004704 <UART_SetConfig+0x348>
 80046e8:	2302      	movs	r3, #2
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e00a      	b.n	8004704 <UART_SetConfig+0x348>
 80046ee:	2304      	movs	r3, #4
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e007      	b.n	8004704 <UART_SetConfig+0x348>
 80046f4:	2308      	movs	r3, #8
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e004      	b.n	8004704 <UART_SetConfig+0x348>
 80046fa:	2310      	movs	r3, #16
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e001      	b.n	8004704 <UART_SetConfig+0x348>
 8004700:	2310      	movs	r3, #16
 8004702:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470c:	d15b      	bne.n	80047c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d828      	bhi.n	8004766 <UART_SetConfig+0x3aa>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0x360>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004741 	.word	0x08004741
 8004720:	08004749 	.word	0x08004749
 8004724:	08004751 	.word	0x08004751
 8004728:	08004767 	.word	0x08004767
 800472c:	08004757 	.word	0x08004757
 8004730:	08004767 	.word	0x08004767
 8004734:	08004767 	.word	0x08004767
 8004738:	08004767 	.word	0x08004767
 800473c:	0800475f 	.word	0x0800475f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004740:	f7ff f8a8 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8004744:	61b8      	str	r0, [r7, #24]
        break;
 8004746:	e013      	b.n	8004770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004748:	f7ff f8b8 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 800474c:	61b8      	str	r0, [r7, #24]
        break;
 800474e:	e00f      	b.n	8004770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <UART_SetConfig+0x4c4>)
 8004752:	61bb      	str	r3, [r7, #24]
        break;
 8004754:	e00c      	b.n	8004770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004756:	f7fe ffcb 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 800475a:	61b8      	str	r0, [r7, #24]
        break;
 800475c:	e008      	b.n	8004770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004762:	61bb      	str	r3, [r7, #24]
        break;
 8004764:	e004      	b.n	8004770 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	77bb      	strb	r3, [r7, #30]
        break;
 800476e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d074      	beq.n	8004860 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	005a      	lsls	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	d916      	bls.n	80047c0 <UART_SetConfig+0x404>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004798:	d212      	bcs.n	80047c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f023 030f 	bic.w	r3, r3, #15
 80047a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	89fb      	ldrh	r3, [r7, #14]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	89fa      	ldrh	r2, [r7, #14]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e04f      	b.n	8004860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	77bb      	strb	r3, [r7, #30]
 80047c4:	e04c      	b.n	8004860 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c6:	7ffb      	ldrb	r3, [r7, #31]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d828      	bhi.n	800481e <UART_SetConfig+0x462>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x418>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004809 	.word	0x08004809
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	0800481f 	.word	0x0800481f
 80047f0:	0800481f 	.word	0x0800481f
 80047f4:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7ff f84c 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80047fc:	61b8      	str	r0, [r7, #24]
        break;
 80047fe:	e013      	b.n	8004828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7ff f85c 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8004804:	61b8      	str	r0, [r7, #24]
        break;
 8004806:	e00f      	b.n	8004828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <UART_SetConfig+0x4c4>)
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e00c      	b.n	8004828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7fe ff6f 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 8004812:	61b8      	str	r0, [r7, #24]
        break;
 8004814:	e008      	b.n	8004828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e004      	b.n	8004828 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	77bb      	strb	r3, [r7, #30]
        break;
 8004826:	bf00      	nop
    }

    if (pclk != 0U)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085a      	lsrs	r2, r3, #1
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	441a      	add	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d909      	bls.n	800485c <UART_SetConfig+0x4a0>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d205      	bcs.n	800485c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	e001      	b.n	8004860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800486c:	7fbb      	ldrb	r3, [r7, #30]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40007c00 	.word	0x40007c00
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400

08004884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01a      	beq.n	800499a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004982:	d10a      	bne.n	800499a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d8:	f7fd fa00 	bl	8001ddc <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d10e      	bne.n	8004a0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f81b 	bl	8004a36 <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e011      	b.n	8004a2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b09c      	sub	sp, #112	; 0x70
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a46:	e0a7      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	f000 80a3 	beq.w	8004b98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fd f9c3 	bl	8001ddc <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13f      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e6      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e5      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e068      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d050      	beq.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d148      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e6      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	613b      	str	r3, [r7, #16]
   return(result);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b62:	623a      	str	r2, [r7, #32]
 8004b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e5      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e010      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f43f af48 	beq.w	8004a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3770      	adds	r7, #112	; 0x70
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <arm_rfft_fast_init_f32>:
 8004bc4:	084b      	lsrs	r3, r1, #1
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	b430      	push	{r4, r5}
 8004bca:	8201      	strh	r1, [r0, #16]
 8004bcc:	8003      	strh	r3, [r0, #0]
 8004bce:	d06f      	beq.n	8004cb0 <arm_rfft_fast_init_f32+0xec>
 8004bd0:	d916      	bls.n	8004c00 <arm_rfft_fast_init_f32+0x3c>
 8004bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd6:	d05e      	beq.n	8004c96 <arm_rfft_fast_init_f32+0xd2>
 8004bd8:	d935      	bls.n	8004c46 <arm_rfft_fast_init_f32+0x82>
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d025      	beq.n	8004c2c <arm_rfft_fast_init_f32+0x68>
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	d112      	bne.n	8004c0c <arm_rfft_fast_init_f32+0x48>
 8004be6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8004bea:	4c37      	ldr	r4, [pc, #220]	; (8004cc8 <arm_rfft_fast_init_f32+0x104>)
 8004bec:	4937      	ldr	r1, [pc, #220]	; (8004ccc <arm_rfft_fast_init_f32+0x108>)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <arm_rfft_fast_init_f32+0x10c>)
 8004bf2:	8185      	strh	r5, [r0, #12]
 8004bf4:	6084      	str	r4, [r0, #8]
 8004bf6:	6041      	str	r1, [r0, #4]
 8004bf8:	6142      	str	r2, [r0, #20]
 8004bfa:	b258      	sxtb	r0, r3
 8004bfc:	bc30      	pop	{r4, r5}
 8004bfe:	4770      	bx	lr
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d030      	beq.n	8004c66 <arm_rfft_fast_init_f32+0xa2>
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d005      	beq.n	8004c14 <arm_rfft_fast_init_f32+0x50>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d038      	beq.n	8004c7e <arm_rfft_fast_init_f32+0xba>
 8004c0c:	23ff      	movs	r3, #255	; 0xff
 8004c0e:	bc30      	pop	{r4, r5}
 8004c10:	b258      	sxtb	r0, r3
 8004c12:	4770      	bx	lr
 8004c14:	2538      	movs	r5, #56	; 0x38
 8004c16:	4c2f      	ldr	r4, [pc, #188]	; (8004cd4 <arm_rfft_fast_init_f32+0x110>)
 8004c18:	492f      	ldr	r1, [pc, #188]	; (8004cd8 <arm_rfft_fast_init_f32+0x114>)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <arm_rfft_fast_init_f32+0x118>)
 8004c1e:	8185      	strh	r5, [r0, #12]
 8004c20:	6084      	str	r4, [r0, #8]
 8004c22:	6041      	str	r1, [r0, #4]
 8004c24:	6142      	str	r2, [r0, #20]
 8004c26:	b258      	sxtb	r0, r3
 8004c28:	bc30      	pop	{r4, r5}
 8004c2a:	4770      	bx	lr
 8004c2c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8004c30:	4c2b      	ldr	r4, [pc, #172]	; (8004ce0 <arm_rfft_fast_init_f32+0x11c>)
 8004c32:	492c      	ldr	r1, [pc, #176]	; (8004ce4 <arm_rfft_fast_init_f32+0x120>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <arm_rfft_fast_init_f32+0x124>)
 8004c38:	8185      	strh	r5, [r0, #12]
 8004c3a:	6084      	str	r4, [r0, #8]
 8004c3c:	6041      	str	r1, [r0, #4]
 8004c3e:	6142      	str	r2, [r0, #20]
 8004c40:	b258      	sxtb	r0, r3
 8004c42:	bc30      	pop	{r4, r5}
 8004c44:	4770      	bx	lr
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d1df      	bne.n	8004c0c <arm_rfft_fast_init_f32+0x48>
 8004c4c:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8004c50:	4c26      	ldr	r4, [pc, #152]	; (8004cec <arm_rfft_fast_init_f32+0x128>)
 8004c52:	4927      	ldr	r1, [pc, #156]	; (8004cf0 <arm_rfft_fast_init_f32+0x12c>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <arm_rfft_fast_init_f32+0x130>)
 8004c58:	8185      	strh	r5, [r0, #12]
 8004c5a:	6084      	str	r4, [r0, #8]
 8004c5c:	6041      	str	r1, [r0, #4]
 8004c5e:	6142      	str	r2, [r0, #20]
 8004c60:	b258      	sxtb	r0, r3
 8004c62:	bc30      	pop	{r4, r5}
 8004c64:	4770      	bx	lr
 8004c66:	2530      	movs	r5, #48	; 0x30
 8004c68:	4c23      	ldr	r4, [pc, #140]	; (8004cf8 <arm_rfft_fast_init_f32+0x134>)
 8004c6a:	4924      	ldr	r1, [pc, #144]	; (8004cfc <arm_rfft_fast_init_f32+0x138>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <arm_rfft_fast_init_f32+0x13c>)
 8004c70:	8185      	strh	r5, [r0, #12]
 8004c72:	6084      	str	r4, [r0, #8]
 8004c74:	6041      	str	r1, [r0, #4]
 8004c76:	6142      	str	r2, [r0, #20]
 8004c78:	b258      	sxtb	r0, r3
 8004c7a:	bc30      	pop	{r4, r5}
 8004c7c:	4770      	bx	lr
 8004c7e:	2514      	movs	r5, #20
 8004c80:	4c20      	ldr	r4, [pc, #128]	; (8004d04 <arm_rfft_fast_init_f32+0x140>)
 8004c82:	4921      	ldr	r1, [pc, #132]	; (8004d08 <arm_rfft_fast_init_f32+0x144>)
 8004c84:	2300      	movs	r3, #0
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <arm_rfft_fast_init_f32+0x148>)
 8004c88:	8185      	strh	r5, [r0, #12]
 8004c8a:	6084      	str	r4, [r0, #8]
 8004c8c:	6041      	str	r1, [r0, #4]
 8004c8e:	6142      	str	r2, [r0, #20]
 8004c90:	b258      	sxtb	r0, r3
 8004c92:	bc30      	pop	{r4, r5}
 8004c94:	4770      	bx	lr
 8004c96:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8004c9a:	4c1d      	ldr	r4, [pc, #116]	; (8004d10 <arm_rfft_fast_init_f32+0x14c>)
 8004c9c:	491d      	ldr	r1, [pc, #116]	; (8004d14 <arm_rfft_fast_init_f32+0x150>)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <arm_rfft_fast_init_f32+0x154>)
 8004ca2:	8185      	strh	r5, [r0, #12]
 8004ca4:	6084      	str	r4, [r0, #8]
 8004ca6:	6041      	str	r1, [r0, #4]
 8004ca8:	6142      	str	r2, [r0, #20]
 8004caa:	b258      	sxtb	r0, r3
 8004cac:	bc30      	pop	{r4, r5}
 8004cae:	4770      	bx	lr
 8004cb0:	25d0      	movs	r5, #208	; 0xd0
 8004cb2:	4c1a      	ldr	r4, [pc, #104]	; (8004d1c <arm_rfft_fast_init_f32+0x158>)
 8004cb4:	491a      	ldr	r1, [pc, #104]	; (8004d20 <arm_rfft_fast_init_f32+0x15c>)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <arm_rfft_fast_init_f32+0x160>)
 8004cba:	8185      	strh	r5, [r0, #12]
 8004cbc:	6084      	str	r4, [r0, #8]
 8004cbe:	6041      	str	r1, [r0, #4]
 8004cc0:	6142      	str	r2, [r0, #20]
 8004cc2:	b258      	sxtb	r0, r3
 8004cc4:	bc30      	pop	{r4, r5}
 8004cc6:	4770      	bx	lr
 8004cc8:	08017510 	.word	0x08017510
 8004ccc:	08008708 	.word	0x08008708
 8004cd0:	0800e878 	.word	0x0800e878
 8004cd4:	0800c808 	.word	0x0800c808
 8004cd8:	080192d0 	.word	0x080192d0
 8004cdc:	0801b7c0 	.word	0x0801b7c0
 8004ce0:	080151f8 	.word	0x080151f8
 8004ce4:	080130f8 	.word	0x080130f8
 8004ce8:	0800c878 	.word	0x0800c878
 8004cec:	0801b450 	.word	0x0801b450
 8004cf0:	08012878 	.word	0x08012878
 8004cf4:	080194d0 	.word	0x080194d0
 8004cf8:	080160b0 	.word	0x080160b0
 8004cfc:	080150f8 	.word	0x080150f8
 8004d00:	0800c708 	.word	0x0800c708
 8004d04:	08016008 	.word	0x08016008
 8004d08:	08013078 	.word	0x08013078
 8004d0c:	08016030 	.word	0x08016030
 8004d10:	08019cd0 	.word	0x08019cd0
 8004d14:	08016510 	.word	0x08016510
 8004d18:	0801a050 	.word	0x0801a050
 8004d1c:	0801b9c0 	.word	0x0801b9c0
 8004d20:	08016110 	.word	0x08016110
 8004d24:	0801b050 	.word	0x0801b050

08004d28 <arm_rfft_fast_f32>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	8a05      	ldrh	r5, [r0, #16]
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4690      	mov	r8, r2
 8004d32:	460c      	mov	r4, r1
 8004d34:	086d      	lsrs	r5, r5, #1
 8004d36:	8005      	strh	r5, [r0, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d15e      	bne.n	8004dfa <arm_rfft_fast_f32+0xd2>
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f000 fbe0 	bl	8005504 <arm_cfft_f32>
 8004d44:	edd4 7a00 	vldr	s15, [r4]
 8004d48:	ed94 7a01 	vldr	s14, [r4, #4]
 8004d4c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004d50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d54:	8837      	ldrh	r7, [r6, #0]
 8004d56:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004d5a:	6975      	ldr	r5, [r6, #20]
 8004d5c:	3f01      	subs	r7, #1
 8004d5e:	eef0 3a46 	vmov.f32	s7, s12
 8004d62:	3510      	adds	r5, #16
 8004d64:	f108 0610 	add.w	r6, r8, #16
 8004d68:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004d6c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8004d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d74:	f104 0310 	add.w	r3, r4, #16
 8004d78:	3808      	subs	r0, #8
 8004d7a:	ee26 7a86 	vmul.f32	s14, s13, s12
 8004d7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d82:	ed88 7a00 	vstr	s14, [r8]
 8004d86:	edc8 7a01 	vstr	s15, [r8, #4]
 8004d8a:	edd0 6a02 	vldr	s13, [r0, #8]
 8004d8e:	3f01      	subs	r7, #1
 8004d90:	ed13 5a02 	vldr	s10, [r3, #-8]
 8004d94:	f1a0 0008 	sub.w	r0, r0, #8
 8004d98:	ed13 7a01 	vldr	s14, [r3, #-4]
 8004d9c:	f105 0508 	add.w	r5, r5, #8
 8004da0:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8004da4:	ed15 6a04 	vldr	s12, [r5, #-16]
 8004da8:	edd0 5a05 	vldr	s11, [r0, #20]
 8004dac:	ee36 5a85 	vadd.f32	s10, s13, s10
 8004db0:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004db4:	f103 0308 	add.w	r3, r3, #8
 8004db8:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004dbc:	f106 0608 	add.w	r6, r6, #8
 8004dc0:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004dc4:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004dc8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004dcc:	ee34 5a85 	vadd.f32	s10, s9, s10
 8004dd0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004dd4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004dd8:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004ddc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004de0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004de4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004de8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004dec:	ed46 6a04 	vstr	s13, [r6, #-16]
 8004df0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8004df4:	d1c9      	bne.n	8004d8a <arm_rfft_fast_f32+0x62>
 8004df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfa:	edd1 7a00 	vldr	s15, [r1]
 8004dfe:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004e02:	edd1 6a01 	vldr	s13, [r1, #4]
 8004e06:	1e68      	subs	r0, r5, #1
 8004e08:	6975      	ldr	r5, [r6, #20]
 8004e0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004e0e:	00c1      	lsls	r1, r0, #3
 8004e10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e14:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e18:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e1c:	ed82 7a00 	vstr	s14, [r2]
 8004e20:	edc2 7a01 	vstr	s15, [r2, #4]
 8004e24:	b3e0      	cbz	r0, 8004ea0 <arm_rfft_fast_f32+0x178>
 8004e26:	3908      	subs	r1, #8
 8004e28:	f104 0210 	add.w	r2, r4, #16
 8004e2c:	3510      	adds	r5, #16
 8004e2e:	440c      	add	r4, r1
 8004e30:	f108 0110 	add.w	r1, r8, #16
 8004e34:	ed94 7a02 	vldr	s14, [r4, #8]
 8004e38:	3801      	subs	r0, #1
 8004e3a:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004e3e:	f1a4 0408 	sub.w	r4, r4, #8
 8004e42:	ed15 6a02 	vldr	s12, [r5, #-8]
 8004e46:	f102 0208 	add.w	r2, r2, #8
 8004e4a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004e4e:	ed94 4a05 	vldr	s8, [r4, #20]
 8004e52:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004e56:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004e5a:	ed55 5a01 	vldr	s11, [r5, #-4]
 8004e5e:	f101 0108 	add.w	r1, r1, #8
 8004e62:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004e66:	f105 0508 	add.w	r5, r5, #8
 8004e6a:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004e6e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004e72:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004e76:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004e7a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004e7e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004e82:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004e86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e8a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004e8e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e92:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e96:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004e9a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004e9e:	d1c9      	bne.n	8004e34 <arm_rfft_fast_f32+0x10c>
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	f000 bb2a 	b.w	8005504 <arm_cfft_f32>

08004eb0 <arm_cfft_radix8by2_f32>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	ed2d 8b06 	vpush	{d8-d10}
 8004eb8:	f8b0 e000 	ldrh.w	lr, [r0]
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	6842      	ldr	r2, [r0, #4]
 8004ec0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004ec4:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004ec8:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004ecc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004ed0:	f000 80af 	beq.w	8005032 <arm_cfft_radix8by2_f32+0x182>
 8004ed4:	3310      	adds	r3, #16
 8004ed6:	3210      	adds	r2, #16
 8004ed8:	f101 0610 	add.w	r6, r1, #16
 8004edc:	f108 0510 	add.w	r5, r8, #16
 8004ee0:	18cc      	adds	r4, r1, r3
 8004ee2:	4443      	add	r3, r8
 8004ee4:	ed55 6a04 	vldr	s13, [r5, #-16]
 8004ee8:	f1be 0e01 	subs.w	lr, lr, #1
 8004eec:	ed56 4a04 	vldr	s9, [r6, #-16]
 8004ef0:	f104 0410 	add.w	r4, r4, #16
 8004ef4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8004ef8:	f106 0610 	add.w	r6, r6, #16
 8004efc:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8004f00:	ed53 0a04 	vldr	s1, [r3, #-16]
 8004f04:	ed13 5a03 	vldr	s10, [r3, #-12]
 8004f08:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004f0c:	ed13 3a02 	vldr	s6, [r3, #-8]
 8004f10:	f102 0210 	add.w	r2, r2, #16
 8004f14:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004f18:	f103 0310 	add.w	r3, r3, #16
 8004f1c:	ed55 2a01 	vldr	s5, [r5, #-4]
 8004f20:	f105 0510 	add.w	r5, r5, #16
 8004f24:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8004f28:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8004f2c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8004f30:	ee33 8a83 	vadd.f32	s16, s7, s6
 8004f34:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8004f38:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8004f3c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8004f40:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8004f44:	ee76 aa87 	vadd.f32	s21, s13, s14
 8004f48:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8004f4c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004f50:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8004f54:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8004f58:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8004f5c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8004f60:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8004f64:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8004f68:	ee72 9a22 	vadd.f32	s19, s4, s5
 8004f6c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004f70:	ee35 5a41 	vsub.f32	s10, s10, s2
 8004f74:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8004f78:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8004f7c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8004f80:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8004f84:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8004f88:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8004f8c:	ee72 7a62 	vsub.f32	s15, s4, s5
 8004f90:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8004f94:	ee73 2a63 	vsub.f32	s5, s6, s7
 8004f98:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8004f9c:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8004fa0:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8004fa4:	ee24 3a84 	vmul.f32	s6, s9, s8
 8004fa8:	ee27 2a26 	vmul.f32	s4, s14, s13
 8004fac:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8004fb0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8004fb4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004fb8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004fbc:	ee65 6a26 	vmul.f32	s13, s10, s13
 8004fc0:	ee25 5a04 	vmul.f32	s10, s10, s8
 8004fc4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004fc8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004fcc:	ee33 4a02 	vadd.f32	s8, s6, s4
 8004fd0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004fd4:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8004fd8:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8004fdc:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8004fe0:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8004fe4:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8004fe8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8004fec:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8004ff0:	ee27 4a87 	vmul.f32	s8, s15, s14
 8004ff4:	ee61 5a87 	vmul.f32	s11, s3, s14
 8004ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ffc:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005000:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005004:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005008:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800500c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005010:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005014:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005018:	ee37 7a26 	vadd.f32	s14, s14, s13
 800501c:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8005020:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8005024:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005028:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800502c:	f47f af5a 	bne.w	8004ee4 <arm_cfft_radix8by2_f32+0x34>
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	fa1f f48c 	uxth.w	r4, ip
 8005036:	4608      	mov	r0, r1
 8005038:	2302      	movs	r3, #2
 800503a:	4621      	mov	r1, r4
 800503c:	f000 fada 	bl	80055f4 <arm_radix8_butterfly_f32>
 8005040:	4640      	mov	r0, r8
 8005042:	4621      	mov	r1, r4
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	2302      	movs	r3, #2
 8005048:	ecbd 8b06 	vpop	{d8-d10}
 800504c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005050:	f000 bad0 	b.w	80055f4 <arm_radix8_butterfly_f32>

08005054 <arm_cfft_radix8by4_f32>:
 8005054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	ed2d 8b06 	vpush	{d8-d10}
 800505c:	8804      	ldrh	r4, [r0, #0]
 800505e:	b08f      	sub	sp, #60	; 0x3c
 8005060:	ed91 6a00 	vldr	s12, [r1]
 8005064:	460a      	mov	r2, r1
 8005066:	0864      	lsrs	r4, r4, #1
 8005068:	ed91 7a01 	vldr	s14, [r1, #4]
 800506c:	9101      	str	r1, [sp, #4]
 800506e:	00a3      	lsls	r3, r4, #2
 8005070:	9104      	str	r1, [sp, #16]
 8005072:	0864      	lsrs	r4, r4, #1
 8005074:	6841      	ldr	r1, [r0, #4]
 8005076:	900c      	str	r0, [sp, #48]	; 0x30
 8005078:	4625      	mov	r5, r4
 800507a:	940b      	str	r4, [sp, #44]	; 0x2c
 800507c:	f101 0408 	add.w	r4, r1, #8
 8005080:	f101 0610 	add.w	r6, r1, #16
 8005084:	9406      	str	r4, [sp, #24]
 8005086:	18d4      	adds	r4, r2, r3
 8005088:	1eaa      	subs	r2, r5, #2
 800508a:	f101 0518 	add.w	r5, r1, #24
 800508e:	18e0      	adds	r0, r4, r3
 8005090:	ed94 4a00 	vldr	s8, [r4]
 8005094:	edd4 3a01 	vldr	s7, [r4, #4]
 8005098:	46a6      	mov	lr, r4
 800509a:	edd0 6a00 	vldr	s13, [r0]
 800509e:	18c7      	adds	r7, r0, r3
 80050a0:	edd0 7a01 	vldr	s15, [r0, #4]
 80050a4:	46a0      	mov	r8, r4
 80050a6:	ee76 5a26 	vadd.f32	s11, s12, s13
 80050aa:	edd7 4a00 	vldr	s9, [r7]
 80050ae:	9402      	str	r4, [sp, #8]
 80050b0:	4604      	mov	r4, r0
 80050b2:	9507      	str	r5, [sp, #28]
 80050b4:	4605      	mov	r5, r0
 80050b6:	ee75 2a84 	vadd.f32	s5, s11, s8
 80050ba:	900a      	str	r0, [sp, #40]	; 0x28
 80050bc:	9801      	ldr	r0, [sp, #4]
 80050be:	ee76 6a66 	vsub.f32	s13, s12, s13
 80050c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80050c6:	ed97 5a01 	vldr	s10, [r7, #4]
 80050ca:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80050ce:	46bc      	mov	ip, r7
 80050d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d4:	9605      	str	r6, [sp, #20]
 80050d6:	ee36 7a63 	vsub.f32	s14, s12, s7
 80050da:	9703      	str	r7, [sp, #12]
 80050dc:	ee12 9a90 	vmov	r9, s5
 80050e0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 80050e4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80050e8:	1f3e      	subs	r6, r7, #4
 80050ea:	f840 9b08 	str.w	r9, [r0], #8
 80050ee:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80050f2:	edde 2a01 	vldr	s5, [lr, #4]
 80050f6:	ee77 3ac4 	vsub.f32	s7, s15, s8
 80050fa:	ee77 7a84 	vadd.f32	s15, s15, s8
 80050fe:	ed9c 4a01 	vldr	s8, [ip, #4]
 8005102:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	ee37 7a45 	vsub.f32	s14, s14, s10
 800510c:	9804      	ldr	r0, [sp, #16]
 800510e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005112:	f1ae 0704 	sub.w	r7, lr, #4
 8005116:	ee36 6a04 	vadd.f32	s12, s12, s8
 800511a:	ee33 4a45 	vsub.f32	s8, s6, s10
 800511e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005122:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8005126:	ed80 6a01 	vstr	s12, [r0, #4]
 800512a:	ee14 9a10 	vmov	r9, s8
 800512e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005132:	f848 9b08 	str.w	r9, [r8], #8
 8005136:	ed8e 5a01 	vstr	s10, [lr, #4]
 800513a:	ee15 ea90 	vmov	lr, s11
 800513e:	f844 eb08 	str.w	lr, [r4], #8
 8005142:	ee16 ea90 	vmov	lr, s13
 8005146:	9408      	str	r4, [sp, #32]
 8005148:	462c      	mov	r4, r5
 800514a:	ed85 7a01 	vstr	s14, [r5, #4]
 800514e:	9d03      	ldr	r5, [sp, #12]
 8005150:	f84c eb08 	str.w	lr, [ip], #8
 8005154:	edc5 7a01 	vstr	s15, [r5, #4]
 8005158:	0855      	lsrs	r5, r2, #1
 800515a:	9509      	str	r5, [sp, #36]	; 0x24
 800515c:	f000 8130 	beq.w	80053c0 <arm_cfft_radix8by4_f32+0x36c>
 8005160:	9804      	ldr	r0, [sp, #16]
 8005162:	3b08      	subs	r3, #8
 8005164:	46ab      	mov	fp, r5
 8005166:	f1a4 020c 	sub.w	r2, r4, #12
 800516a:	f100 0510 	add.w	r5, r0, #16
 800516e:	f101 0920 	add.w	r9, r1, #32
 8005172:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005176:	f8dd a014 	ldr.w	sl, [sp, #20]
 800517a:	4433      	add	r3, r6
 800517c:	3410      	adds	r4, #16
 800517e:	4660      	mov	r0, ip
 8005180:	4641      	mov	r1, r8
 8005182:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8005186:	ed54 6a02 	vldr	s13, [r4, #-8]
 800518a:	f1bb 0b01 	subs.w	fp, fp, #1
 800518e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005192:	f10a 0a08 	add.w	sl, sl, #8
 8005196:	edd1 7a00 	vldr	s15, [r1]
 800519a:	f105 0508 	add.w	r5, r5, #8
 800519e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80051a2:	edd0 2a00 	vldr	s5, [r0]
 80051a6:	ed14 7a01 	vldr	s14, [r4, #-4]
 80051aa:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80051ae:	ed55 6a03 	vldr	s13, [r5, #-12]
 80051b2:	f1a2 0208 	sub.w	r2, r2, #8
 80051b6:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80051ba:	ed90 2a01 	vldr	s4, [r0, #4]
 80051be:	ee36 5a87 	vadd.f32	s10, s13, s14
 80051c2:	ed91 6a01 	vldr	s12, [r1, #4]
 80051c6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80051ca:	f109 0910 	add.w	r9, r9, #16
 80051ce:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80051d2:	f104 0408 	add.w	r4, r4, #8
 80051d6:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80051da:	f10e 0e18 	add.w	lr, lr, #24
 80051de:	ee37 3a67 	vsub.f32	s6, s14, s15
 80051e2:	f1a3 0308 	sub.w	r3, r3, #8
 80051e6:	ed45 6a04 	vstr	s13, [r5, #-16]
 80051ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80051f2:	ee76 1a25 	vadd.f32	s3, s12, s11
 80051f6:	edd0 4a01 	vldr	s9, [r0, #4]
 80051fa:	ee33 3a22 	vadd.f32	s6, s6, s5
 80051fe:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005202:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005206:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800520a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800520e:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005212:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005216:	ed45 6a03 	vstr	s13, [r5, #-12]
 800521a:	ee32 2a06 	vadd.f32	s4, s4, s12
 800521e:	edd6 7a00 	vldr	s15, [r6]
 8005222:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005226:	ed97 1a00 	vldr	s2, [r7]
 800522a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800522e:	ed92 8a04 	vldr	s16, [r2, #16]
 8005232:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005236:	ed93 aa04 	vldr	s20, [r3, #16]
 800523a:	ed16 7a01 	vldr	s14, [r6, #-4]
 800523e:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005242:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005246:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800524a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800524e:	edd3 9a03 	vldr	s19, [r3, #12]
 8005252:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005256:	ed92 9a03 	vldr	s18, [r2, #12]
 800525a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800525e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8005262:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005266:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800526a:	ee16 ca10 	vmov	ip, s12
 800526e:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005272:	ee71 4a07 	vadd.f32	s9, s2, s14
 8005276:	f847 c908 	str.w	ip, [r7], #-8
 800527a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800527e:	edd2 8a03 	vldr	s17, [r2, #12]
 8005282:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005286:	ed93 8a03 	vldr	s16, [r3, #12]
 800528a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800528e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005292:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005296:	ee36 6a69 	vsub.f32	s12, s12, s19
 800529a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800529e:	ee75 5aca 	vsub.f32	s11, s11, s20
 80052a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80052a6:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80052aa:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80052ae:	ee21 8a80 	vmul.f32	s16, s3, s0
 80052b2:	ee23 7a26 	vmul.f32	s14, s6, s13
 80052b6:	ee64 7a26 	vmul.f32	s15, s8, s13
 80052ba:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80052be:	ee24 4a00 	vmul.f32	s8, s8, s0
 80052c2:	ee23 3a00 	vmul.f32	s6, s6, s0
 80052c6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80052ca:	ee24 0a80 	vmul.f32	s0, s9, s0
 80052ce:	ee38 7a07 	vadd.f32	s14, s16, s14
 80052d2:	ee76 6a84 	vadd.f32	s13, s13, s8
 80052d6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80052da:	ee33 3a61 	vsub.f32	s6, s6, s3
 80052de:	ee17 ca10 	vmov	ip, s14
 80052e2:	f841 cb08 	str.w	ip, [r1], #8
 80052e6:	ed01 3a01 	vstr	s6, [r1, #-4]
 80052ea:	ed82 0a04 	vstr	s0, [r2, #16]
 80052ee:	edc2 6a03 	vstr	s13, [r2, #12]
 80052f2:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 80052f6:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 80052fa:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80052fe:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005302:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005306:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800530a:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800530e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005312:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005316:	ee66 6a26 	vmul.f32	s13, s12, s13
 800531a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800531e:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005322:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005326:	ee35 5a63 	vsub.f32	s10, s10, s7
 800532a:	ee17 ca90 	vmov	ip, s15
 800532e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005332:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005336:	f846 c908 	str.w	ip, [r6], #-8
 800533a:	edc6 6a01 	vstr	s13, [r6, #4]
 800533e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8005342:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8005346:	ee62 5a27 	vmul.f32	s11, s4, s15
 800534a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800534e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005352:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005356:	ee61 6a07 	vmul.f32	s13, s2, s14
 800535a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800535e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005362:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005366:	ee35 6a86 	vadd.f32	s12, s11, s12
 800536a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800536e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005376:	ee16 ca10 	vmov	ip, s12
 800537a:	f840 cb08 	str.w	ip, [r0], #8
 800537e:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005382:	edc3 0a04 	vstr	s1, [r3, #16]
 8005386:	edc3 7a03 	vstr	s15, [r3, #12]
 800538a:	f47f aefc 	bne.w	8005186 <arm_cfft_radix8by4_f32+0x132>
 800538e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005390:	9805      	ldr	r0, [sp, #20]
 8005392:	00cb      	lsls	r3, r1, #3
 8005394:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8005398:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800539c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80053a0:	4498      	add	r8, r3
 80053a2:	449c      	add	ip, r3
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	9901      	ldr	r1, [sp, #4]
 80053a8:	4419      	add	r1, r3
 80053aa:	9101      	str	r1, [sp, #4]
 80053ac:	9906      	ldr	r1, [sp, #24]
 80053ae:	4419      	add	r1, r3
 80053b0:	9106      	str	r1, [sp, #24]
 80053b2:	9908      	ldr	r1, [sp, #32]
 80053b4:	4419      	add	r1, r3
 80053b6:	9b07      	ldr	r3, [sp, #28]
 80053b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053bc:	9108      	str	r1, [sp, #32]
 80053be:	9307      	str	r3, [sp, #28]
 80053c0:	9a01      	ldr	r2, [sp, #4]
 80053c2:	2304      	movs	r3, #4
 80053c4:	9e08      	ldr	r6, [sp, #32]
 80053c6:	edd2 6a00 	vldr	s13, [r2]
 80053ca:	ed96 4a00 	vldr	s8, [r6]
 80053ce:	edd8 7a00 	vldr	s15, [r8]
 80053d2:	ee36 6a84 	vadd.f32	s12, s13, s8
 80053d6:	eddc 2a00 	vldr	s5, [ip]
 80053da:	ed96 7a01 	vldr	s14, [r6, #4]
 80053de:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80053e2:	edd2 6a01 	vldr	s13, [r2, #4]
 80053e6:	ee76 4a27 	vadd.f32	s9, s12, s15
 80053ea:	ed98 2a01 	vldr	s4, [r8, #4]
 80053ee:	ee76 5a87 	vadd.f32	s11, s13, s14
 80053f2:	ed9c 5a01 	vldr	s10, [ip, #4]
 80053f6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80053fa:	9d05      	ldr	r5, [sp, #20]
 80053fc:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005400:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005404:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005408:	9804      	ldr	r0, [sp, #16]
 800540a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800540e:	4621      	mov	r1, r4
 8005410:	edc2 6a00 	vstr	s13, [r2]
 8005414:	ee76 6a67 	vsub.f32	s13, s12, s15
 8005418:	ed98 3a01 	vldr	s6, [r8, #4]
 800541c:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8005420:	eddc 1a01 	vldr	s3, [ip, #4]
 8005424:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8005428:	ee35 3a83 	vadd.f32	s6, s11, s6
 800542c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005430:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005434:	ee73 5a21 	vadd.f32	s11, s6, s3
 8005438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800543c:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005440:	edc2 5a01 	vstr	s11, [r2, #4]
 8005444:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005448:	9a06      	ldr	r2, [sp, #24]
 800544a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800544e:	edd2 7a00 	vldr	s15, [r2]
 8005452:	edd2 5a01 	vldr	s11, [r2, #4]
 8005456:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800545a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800545e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8005462:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8005466:	ee77 7a62 	vsub.f32	s15, s14, s5
 800546a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800546e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8005472:	edc8 5a00 	vstr	s11, [r8]
 8005476:	edc8 4a01 	vstr	s9, [r8, #4]
 800547a:	edd5 4a01 	vldr	s9, [r5, #4]
 800547e:	ed95 7a00 	vldr	s14, [r5]
 8005482:	9d07      	ldr	r5, [sp, #28]
 8005484:	ee66 5a87 	vmul.f32	s11, s13, s14
 8005488:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800548c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005490:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005494:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005498:	ee35 6a86 	vadd.f32	s12, s11, s12
 800549c:	edc6 6a01 	vstr	s13, [r6, #4]
 80054a0:	ed86 6a00 	vstr	s12, [r6]
 80054a4:	ed95 6a01 	vldr	s12, [r5, #4]
 80054a8:	ed95 7a00 	vldr	s14, [r5]
 80054ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054ae:	ee65 6a07 	vmul.f32	s13, s10, s14
 80054b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054b6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80054ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80054be:	ee37 5a45 	vsub.f32	s10, s14, s10
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80054ca:	edcc 7a00 	vstr	s15, [ip]
 80054ce:	6872      	ldr	r2, [r6, #4]
 80054d0:	f000 f890 	bl	80055f4 <arm_radix8_butterfly_f32>
 80054d4:	9802      	ldr	r0, [sp, #8]
 80054d6:	4621      	mov	r1, r4
 80054d8:	6872      	ldr	r2, [r6, #4]
 80054da:	2304      	movs	r3, #4
 80054dc:	f000 f88a 	bl	80055f4 <arm_radix8_butterfly_f32>
 80054e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054e2:	4621      	mov	r1, r4
 80054e4:	6872      	ldr	r2, [r6, #4]
 80054e6:	2304      	movs	r3, #4
 80054e8:	f000 f884 	bl	80055f4 <arm_radix8_butterfly_f32>
 80054ec:	9803      	ldr	r0, [sp, #12]
 80054ee:	4621      	mov	r1, r4
 80054f0:	6872      	ldr	r2, [r6, #4]
 80054f2:	2304      	movs	r3, #4
 80054f4:	b00f      	add	sp, #60	; 0x3c
 80054f6:	ecbd 8b06 	vpop	{d8-d10}
 80054fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fe:	f000 b879 	b.w	80055f4 <arm_radix8_butterfly_f32>
 8005502:	bf00      	nop

08005504 <arm_cfft_f32>:
 8005504:	2a01      	cmp	r2, #1
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	4606      	mov	r6, r0
 800550c:	4617      	mov	r7, r2
 800550e:	460c      	mov	r4, r1
 8005510:	4698      	mov	r8, r3
 8005512:	8805      	ldrh	r5, [r0, #0]
 8005514:	d053      	beq.n	80055be <arm_cfft_f32+0xba>
 8005516:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800551a:	d04b      	beq.n	80055b4 <arm_cfft_f32+0xb0>
 800551c:	d916      	bls.n	800554c <arm_cfft_f32+0x48>
 800551e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005522:	d01a      	beq.n	800555a <arm_cfft_f32+0x56>
 8005524:	d95a      	bls.n	80055dc <arm_cfft_f32+0xd8>
 8005526:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800552a:	d043      	beq.n	80055b4 <arm_cfft_f32+0xb0>
 800552c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005530:	d105      	bne.n	800553e <arm_cfft_f32+0x3a>
 8005532:	4620      	mov	r0, r4
 8005534:	4629      	mov	r1, r5
 8005536:	6872      	ldr	r2, [r6, #4]
 8005538:	2301      	movs	r3, #1
 800553a:	f000 f85b 	bl	80055f4 <arm_radix8_butterfly_f32>
 800553e:	f1b8 0f00 	cmp.w	r8, #0
 8005542:	d111      	bne.n	8005568 <arm_cfft_f32+0x64>
 8005544:	2f01      	cmp	r7, #1
 8005546:	d016      	beq.n	8005576 <arm_cfft_f32+0x72>
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	2d20      	cmp	r5, #32
 800554e:	d031      	beq.n	80055b4 <arm_cfft_f32+0xb0>
 8005550:	d948      	bls.n	80055e4 <arm_cfft_f32+0xe0>
 8005552:	2d40      	cmp	r5, #64	; 0x40
 8005554:	d0ed      	beq.n	8005532 <arm_cfft_f32+0x2e>
 8005556:	2d80      	cmp	r5, #128	; 0x80
 8005558:	d1f1      	bne.n	800553e <arm_cfft_f32+0x3a>
 800555a:	4630      	mov	r0, r6
 800555c:	4621      	mov	r1, r4
 800555e:	f7ff fca7 	bl	8004eb0 <arm_cfft_radix8by2_f32>
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	d0ed      	beq.n	8005544 <arm_cfft_f32+0x40>
 8005568:	4620      	mov	r0, r4
 800556a:	89b1      	ldrh	r1, [r6, #12]
 800556c:	68b2      	ldr	r2, [r6, #8]
 800556e:	f7fa fe4f 	bl	8000210 <arm_bitreversal_32>
 8005572:	2f01      	cmp	r7, #1
 8005574:	d1e8      	bne.n	8005548 <arm_cfft_f32+0x44>
 8005576:	ee07 5a90 	vmov	s15, r5
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005582:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005586:	2d00      	cmp	r5, #0
 8005588:	d0de      	beq.n	8005548 <arm_cfft_f32+0x44>
 800558a:	f104 0108 	add.w	r1, r4, #8
 800558e:	2300      	movs	r3, #0
 8005590:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005594:	3301      	adds	r3, #1
 8005596:	ed51 7a01 	vldr	s15, [r1, #-4]
 800559a:	3108      	adds	r1, #8
 800559c:	429d      	cmp	r5, r3
 800559e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055a2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80055a6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80055aa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80055ae:	d1ef      	bne.n	8005590 <arm_cfft_f32+0x8c>
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	4630      	mov	r0, r6
 80055b6:	4621      	mov	r1, r4
 80055b8:	f7ff fd4c 	bl	8005054 <arm_cfft_radix8by4_f32>
 80055bc:	e7bf      	b.n	800553e <arm_cfft_f32+0x3a>
 80055be:	b1a5      	cbz	r5, 80055ea <arm_cfft_f32+0xe6>
 80055c0:	f101 030c 	add.w	r3, r1, #12
 80055c4:	2200      	movs	r2, #0
 80055c6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80055ca:	3201      	adds	r2, #1
 80055cc:	3308      	adds	r3, #8
 80055ce:	eef1 7a67 	vneg.f32	s15, s15
 80055d2:	4295      	cmp	r5, r2
 80055d4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80055d8:	d1f5      	bne.n	80055c6 <arm_cfft_f32+0xc2>
 80055da:	e79c      	b.n	8005516 <arm_cfft_f32+0x12>
 80055dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80055e0:	d0a7      	beq.n	8005532 <arm_cfft_f32+0x2e>
 80055e2:	e7ac      	b.n	800553e <arm_cfft_f32+0x3a>
 80055e4:	2d10      	cmp	r5, #16
 80055e6:	d0b8      	beq.n	800555a <arm_cfft_f32+0x56>
 80055e8:	e7a9      	b.n	800553e <arm_cfft_f32+0x3a>
 80055ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80055ee:	d896      	bhi.n	800551e <arm_cfft_f32+0x1a>
 80055f0:	e7ac      	b.n	800554c <arm_cfft_f32+0x48>
 80055f2:	bf00      	nop

080055f4 <arm_radix8_butterfly_f32>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	469e      	mov	lr, r3
 80055fa:	1d03      	adds	r3, r0, #4
 80055fc:	4683      	mov	fp, r0
 80055fe:	468a      	mov	sl, r1
 8005600:	4688      	mov	r8, r1
 8005602:	469c      	mov	ip, r3
 8005604:	ed2d 8b10 	vpush	{d8-d15}
 8005608:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 800591c <arm_radix8_butterfly_f32+0x328>
 800560c:	b09f      	sub	sp, #124	; 0x7c
 800560e:	921c      	str	r2, [sp, #112]	; 0x70
 8005610:	931d      	str	r3, [sp, #116]	; 0x74
 8005612:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8005616:	f04f 0900 	mov.w	r9, #0
 800561a:	461a      	mov	r2, r3
 800561c:	930e      	str	r3, [sp, #56]	; 0x38
 800561e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005622:	0051      	lsls	r1, r2, #1
 8005624:	4608      	mov	r0, r1
 8005626:	9103      	str	r1, [sp, #12]
 8005628:	00d1      	lsls	r1, r2, #3
 800562a:	1885      	adds	r5, r0, r2
 800562c:	0110      	lsls	r0, r2, #4
 800562e:	eb0b 0601 	add.w	r6, fp, r1
 8005632:	9101      	str	r1, [sp, #4]
 8005634:	18ac      	adds	r4, r5, r2
 8005636:	9002      	str	r0, [sp, #8]
 8005638:	1877      	adds	r7, r6, r1
 800563a:	4611      	mov	r1, r2
 800563c:	4422      	add	r2, r4
 800563e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8005642:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8005646:	1850      	adds	r0, r2, r1
 8005648:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800564c:	4401      	add	r1, r0
 800564e:	3204      	adds	r2, #4
 8005650:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8005654:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8005658:	3104      	adds	r1, #4
 800565a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800565e:	44c1      	add	r9, r8
 8005660:	edd4 6a00 	vldr	s13, [r4]
 8005664:	ed97 6a00 	vldr	s12, [r7]
 8005668:	45ca      	cmp	sl, r9
 800566a:	edd0 7a00 	vldr	s15, [r0]
 800566e:	ee37 5a66 	vsub.f32	s10, s14, s13
 8005672:	edd6 5a00 	vldr	s11, [r6]
 8005676:	ee37 2a26 	vadd.f32	s4, s14, s13
 800567a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800567e:	edd5 6a00 	vldr	s13, [r5]
 8005682:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005686:	ee76 4a27 	vadd.f32	s9, s12, s15
 800568a:	ed11 6a01 	vldr	s12, [r1, #-4]
 800568e:	ee75 1a87 	vadd.f32	s3, s11, s14
 8005692:	ee36 4a86 	vadd.f32	s8, s13, s12
 8005696:	ee72 7a24 	vadd.f32	s15, s4, s9
 800569a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800569e:	ee76 5ac6 	vsub.f32	s11, s13, s12
 80056a2:	ee31 6a84 	vadd.f32	s12, s3, s8
 80056a6:	ee32 2a64 	vsub.f32	s4, s4, s9
 80056aa:	ee77 6a65 	vsub.f32	s13, s14, s11
 80056ae:	ee77 4a86 	vadd.f32	s9, s15, s12
 80056b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80056b6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80056ba:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80056be:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80056c2:	edc4 7a00 	vstr	s15, [r4]
 80056c6:	ee66 6a89 	vmul.f32	s13, s13, s18
 80056ca:	edd6 5a01 	vldr	s11, [r6, #4]
 80056ce:	ee27 6a09 	vmul.f32	s12, s14, s18
 80056d2:	edd5 3a01 	vldr	s7, [r5, #4]
 80056d6:	ed92 4a00 	vldr	s8, [r2]
 80056da:	ee35 1a26 	vadd.f32	s2, s10, s13
 80056de:	edd1 4a00 	vldr	s9, [r1]
 80056e2:	ee75 6a66 	vsub.f32	s13, s10, s13
 80056e6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80056ea:	ed94 0a01 	vldr	s0, [r4, #4]
 80056ee:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80056f2:	ed9c 7a00 	vldr	s14, [ip]
 80056f6:	edd0 0a01 	vldr	s1, [r0, #4]
 80056fa:	ee35 4a84 	vadd.f32	s8, s11, s8
 80056fe:	ed97 5a01 	vldr	s10, [r7, #4]
 8005702:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8005706:	ee73 5a27 	vadd.f32	s11, s6, s15
 800570a:	ee77 3a00 	vadd.f32	s7, s14, s0
 800570e:	ee33 3a67 	vsub.f32	s6, s6, s15
 8005712:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005716:	ee35 0a20 	vadd.f32	s0, s10, s1
 800571a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800571e:	ee35 5a60 	vsub.f32	s10, s10, s1
 8005722:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005726:	ee74 0a24 	vadd.f32	s1, s8, s9
 800572a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800572e:	ee74 4a64 	vsub.f32	s9, s8, s9
 8005732:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8005736:	ee75 3a25 	vadd.f32	s7, s10, s11
 800573a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800573e:	ee37 5a27 	vadd.f32	s10, s14, s15
 8005742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005746:	ee32 7a86 	vadd.f32	s14, s5, s12
 800574a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800574e:	ee73 2a20 	vadd.f32	s5, s6, s1
 8005752:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005756:	ee72 0a24 	vadd.f32	s1, s4, s9
 800575a:	edcc 2a00 	vstr	s5, [ip]
 800575e:	ee72 4a64 	vsub.f32	s9, s4, s9
 8005762:	ed84 3a01 	vstr	s6, [r4, #4]
 8005766:	ee74 2a61 	vsub.f32	s5, s8, s3
 800576a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800576e:	edc7 0a00 	vstr	s1, [r7]
 8005772:	ee31 1a63 	vsub.f32	s2, s2, s7
 8005776:	edc0 4a00 	vstr	s9, [r0]
 800577a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800577e:	edc7 2a01 	vstr	s5, [r7, #4]
 8005782:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8005786:	441c      	add	r4, r3
 8005788:	ee75 5a47 	vsub.f32	s11, s10, s14
 800578c:	449c      	add	ip, r3
 800578e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8005792:	441f      	add	r7, r3
 8005794:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8005798:	ee34 4a21 	vadd.f32	s8, s8, s3
 800579c:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057a0:	ed80 4a01 	vstr	s8, [r0, #4]
 80057a4:	4418      	add	r0, r3
 80057a6:	ed86 3a00 	vstr	s6, [r6]
 80057aa:	ed01 1a01 	vstr	s2, [r1, #-4]
 80057ae:	ed42 3a01 	vstr	s7, [r2, #-4]
 80057b2:	edc5 6a00 	vstr	s13, [r5]
 80057b6:	edc6 5a01 	vstr	s11, [r6, #4]
 80057ba:	441e      	add	r6, r3
 80057bc:	ed81 5a00 	vstr	s10, [r1]
 80057c0:	4419      	add	r1, r3
 80057c2:	ed82 7a00 	vstr	s14, [r2]
 80057c6:	441a      	add	r2, r3
 80057c8:	edc5 7a01 	vstr	s15, [r5, #4]
 80057cc:	441d      	add	r5, r3
 80057ce:	f63f af44 	bhi.w	800565a <arm_radix8_butterfly_f32+0x66>
 80057d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057d4:	2f07      	cmp	r7, #7
 80057d6:	f240 81e8 	bls.w	8005baa <arm_radix8_butterfly_f32+0x5b6>
 80057da:	9903      	ldr	r1, [sp, #12]
 80057dc:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80057e0:	9e01      	ldr	r6, [sp, #4]
 80057e2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80057e6:	19ca      	adds	r2, r1, r7
 80057e8:	1c4c      	adds	r4, r1, #1
 80057ea:	eb05 010e 	add.w	r1, r5, lr
 80057ee:	00ed      	lsls	r5, r5, #3
 80057f0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80057f4:	3608      	adds	r6, #8
 80057f6:	950f      	str	r5, [sp, #60]	; 0x3c
 80057f8:	eb01 050e 	add.w	r5, r1, lr
 80057fc:	00c9      	lsls	r1, r1, #3
 80057fe:	443c      	add	r4, r7
 8005800:	9618      	str	r6, [sp, #96]	; 0x60
 8005802:	00ee      	lsls	r6, r5, #3
 8005804:	460f      	mov	r7, r1
 8005806:	9114      	str	r1, [sp, #80]	; 0x50
 8005808:	9902      	ldr	r1, [sp, #8]
 800580a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800580e:	9611      	str	r6, [sp, #68]	; 0x44
 8005810:	00c0      	lsls	r0, r0, #3
 8005812:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8005814:	3108      	adds	r1, #8
 8005816:	3404      	adds	r4, #4
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	9119      	str	r1, [sp, #100]	; 0x64
 800581e:	eb05 010e 	add.w	r1, r5, lr
 8005822:	4635      	mov	r5, r6
 8005824:	940b      	str	r4, [sp, #44]	; 0x2c
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	443d      	add	r5, r7
 800582a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800582c:	9507      	str	r5, [sp, #28]
 800582e:	eb01 050e 	add.w	r5, r1, lr
 8005832:	00c9      	lsls	r1, r1, #3
 8005834:	19f7      	adds	r7, r6, r7
 8005836:	00ed      	lsls	r5, r5, #3
 8005838:	9110      	str	r1, [sp, #64]	; 0x40
 800583a:	00d1      	lsls	r1, r2, #3
 800583c:	970a      	str	r7, [sp, #40]	; 0x28
 800583e:	462f      	mov	r7, r5
 8005840:	9515      	str	r5, [sp, #84]	; 0x54
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005846:	19f4      	adds	r4, r6, r7
 8005848:	320c      	adds	r2, #12
 800584a:	3108      	adds	r1, #8
 800584c:	1975      	adds	r5, r6, r5
 800584e:	9408      	str	r4, [sp, #32]
 8005850:	9217      	str	r2, [sp, #92]	; 0x5c
 8005852:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8005856:	9509      	str	r5, [sp, #36]	; 0x24
 8005858:	f100 020c 	add.w	r2, r0, #12
 800585c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800585e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005860:	1975      	adds	r5, r6, r5
 8005862:	9216      	str	r2, [sp, #88]	; 0x58
 8005864:	1932      	adds	r2, r6, r4
 8005866:	911b      	str	r1, [sp, #108]	; 0x6c
 8005868:	9505      	str	r5, [sp, #20]
 800586a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800586e:	0179      	lsls	r1, r7, #5
 8005870:	9204      	str	r2, [sp, #16]
 8005872:	1972      	adds	r2, r6, r5
 8005874:	9412      	str	r4, [sp, #72]	; 0x48
 8005876:	9513      	str	r5, [sp, #76]	; 0x4c
 8005878:	9206      	str	r2, [sp, #24]
 800587a:	f101 0208 	add.w	r2, r1, #8
 800587e:	921a      	str	r2, [sp, #104]	; 0x68
 8005880:	2200      	movs	r2, #0
 8005882:	f102 0108 	add.w	r1, r2, #8
 8005886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005888:	46cc      	mov	ip, r9
 800588a:	460f      	mov	r7, r1
 800588c:	910c      	str	r1, [sp, #48]	; 0x30
 800588e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005890:	eb0b 0e07 	add.w	lr, fp, r7
 8005894:	9f04      	ldr	r7, [sp, #16]
 8005896:	188e      	adds	r6, r1, r2
 8005898:	9918      	ldr	r1, [sp, #96]	; 0x60
 800589a:	edd7 fa00 	vldr	s31, [r7]
 800589e:	9f06      	ldr	r7, [sp, #24]
 80058a0:	188d      	adds	r5, r1, r2
 80058a2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80058a4:	445e      	add	r6, fp
 80058a6:	ed97 fa00 	vldr	s30, [r7]
 80058aa:	445d      	add	r5, fp
 80058ac:	9f05      	ldr	r7, [sp, #20]
 80058ae:	188c      	adds	r4, r1, r2
 80058b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80058b2:	edd7 ea00 	vldr	s29, [r7]
 80058b6:	445c      	add	r4, fp
 80058b8:	9f07      	ldr	r7, [sp, #28]
 80058ba:	1888      	adds	r0, r1, r2
 80058bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80058be:	ed97 ea00 	vldr	s28, [r7]
 80058c2:	4458      	add	r0, fp
 80058c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80058c6:	4411      	add	r1, r2
 80058c8:	441a      	add	r2, r3
 80058ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058cc:	edd7 da00 	vldr	s27, [r7]
 80058d0:	4459      	add	r1, fp
 80058d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80058d4:	445a      	add	r2, fp
 80058d6:	930d      	str	r3, [sp, #52]	; 0x34
 80058d8:	ed97 da00 	vldr	s26, [r7]
 80058dc:	9f08      	ldr	r7, [sp, #32]
 80058de:	edd7 ca00 	vldr	s25, [r7]
 80058e2:	9f04      	ldr	r7, [sp, #16]
 80058e4:	ed97 ca01 	vldr	s24, [r7, #4]
 80058e8:	9f06      	ldr	r7, [sp, #24]
 80058ea:	edd7 ba01 	vldr	s23, [r7, #4]
 80058ee:	9f05      	ldr	r7, [sp, #20]
 80058f0:	ed97 ba01 	vldr	s22, [r7, #4]
 80058f4:	9f07      	ldr	r7, [sp, #28]
 80058f6:	edd7 aa01 	vldr	s21, [r7, #4]
 80058fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80058fc:	ed97 aa01 	vldr	s20, [r7, #4]
 8005900:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	edd7 7a01 	vldr	s15, [r7, #4]
 8005908:	9f08      	ldr	r7, [sp, #32]
 800590a:	edcd 7a02 	vstr	s15, [sp, #8]
 800590e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005912:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005914:	edcd 7a03 	vstr	s15, [sp, #12]
 8005918:	e002      	b.n	8005920 <arm_radix8_butterfly_f32+0x32c>
 800591a:	bf00      	nop
 800591c:	3f3504f3 	.word	0x3f3504f3
 8005920:	ed90 2a00 	vldr	s4, [r0]
 8005924:	44c4      	add	ip, r8
 8005926:	ed96 7a00 	vldr	s14, [r6]
 800592a:	ed94 8a00 	vldr	s16, [r4]
 800592e:	45e2      	cmp	sl, ip
 8005930:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005934:	ed95 5a00 	vldr	s10, [r5]
 8005938:	ed51 5a01 	vldr	s11, [r1, #-4]
 800593c:	ee38 6a27 	vadd.f32	s12, s16, s15
 8005940:	ed9e 1a00 	vldr	s2, [lr]
 8005944:	ee78 2a67 	vsub.f32	s5, s16, s15
 8005948:	ed17 4a01 	vldr	s8, [r7, #-4]
 800594c:	ee75 3a25 	vadd.f32	s7, s10, s11
 8005950:	ee31 3a07 	vadd.f32	s6, s2, s14
 8005954:	edde 4a01 	vldr	s9, [lr, #4]
 8005958:	ee72 6a04 	vadd.f32	s13, s4, s8
 800595c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005960:	ee73 1a06 	vadd.f32	s3, s6, s12
 8005964:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8005968:	ee32 4a44 	vsub.f32	s8, s4, s8
 800596c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8005970:	ee31 7a85 	vadd.f32	s14, s3, s10
 8005974:	ee75 7a84 	vadd.f32	s15, s11, s8
 8005978:	ee33 3a46 	vsub.f32	s6, s6, s12
 800597c:	ed8e 7a00 	vstr	s14, [lr]
 8005980:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8005984:	ee67 7a89 	vmul.f32	s15, s15, s18
 8005988:	ed90 2a01 	vldr	s4, [r0, #4]
 800598c:	ed95 7a01 	vldr	s14, [r5, #4]
 8005990:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8005994:	ed91 6a00 	vldr	s12, [r1]
 8005998:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800599c:	edd7 8a00 	vldr	s17, [r7]
 80059a0:	ee32 8ae7 	vsub.f32	s16, s5, s15
 80059a4:	ee72 5aa7 	vadd.f32	s11, s5, s15
 80059a8:	edd2 0a00 	vldr	s1, [r2]
 80059ac:	ee72 6a68 	vsub.f32	s13, s4, s17
 80059b0:	edd6 7a01 	vldr	s15, [r6, #4]
 80059b4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80059b8:	ee37 0a06 	vadd.f32	s0, s14, s12
 80059bc:	ed94 7a01 	vldr	s14, [r4, #4]
 80059c0:	ee32 6a28 	vadd.f32	s12, s4, s17
 80059c4:	ee72 9ae6 	vsub.f32	s19, s5, s13
 80059c8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80059cc:	ee72 2aa6 	vadd.f32	s5, s5, s13
 80059d0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80059d4:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80059d8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80059dc:	ee24 4a09 	vmul.f32	s8, s8, s18
 80059e0:	ee70 0a06 	vadd.f32	s1, s0, s12
 80059e4:	ee69 7a89 	vmul.f32	s15, s19, s18
 80059e8:	ee62 2a89 	vmul.f32	s5, s5, s18
 80059ec:	ee30 6a46 	vsub.f32	s12, s0, s12
 80059f0:	ee32 0a26 	vadd.f32	s0, s4, s13
 80059f4:	ee72 6a66 	vsub.f32	s13, s4, s13
 80059f8:	ee77 8a62 	vsub.f32	s17, s14, s5
 80059fc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8005a00:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8005a04:	ee77 4a22 	vadd.f32	s9, s14, s5
 8005a08:	ee71 2a04 	vadd.f32	s5, s2, s8
 8005a0c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8005a10:	ee30 1a60 	vsub.f32	s2, s0, s1
 8005a14:	ee73 1a06 	vadd.f32	s3, s6, s12
 8005a18:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005a1c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8005a20:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8005a24:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8005a28:	ee77 7a88 	vadd.f32	s15, s15, s16
 8005a2c:	ee72 3a65 	vsub.f32	s7, s4, s11
 8005a30:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8005a34:	ee72 5a25 	vadd.f32	s11, s4, s11
 8005a38:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8005a3c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8005a40:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8005a44:	ee77 2a28 	vadd.f32	s5, s14, s17
 8005a48:	ee37 7a68 	vsub.f32	s14, s14, s17
 8005a4c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8005a50:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8005a54:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8005a58:	ee70 0a20 	vadd.f32	s1, s0, s1
 8005a5c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8005a60:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8005a64:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8005a68:	edce 0a01 	vstr	s1, [lr, #4]
 8005a6c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8005a70:	449e      	add	lr, r3
 8005a72:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8005a76:	ee31 5a45 	vsub.f32	s10, s2, s10
 8005a7a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8005a7e:	ed86 8a00 	vstr	s16, [r6]
 8005a82:	ee39 0a80 	vadd.f32	s0, s19, s0
 8005a86:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005a8a:	ed86 5a01 	vstr	s10, [r6, #4]
 8005a8e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8005a92:	edcd 3a01 	vstr	s7, [sp, #4]
 8005a96:	ed9d 5a03 	vldr	s10, [sp, #12]
 8005a9a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8005a9e:	eddd 3a02 	vldr	s7, [sp, #8]
 8005aa2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8005aa6:	ed84 0a00 	vstr	s0, [r4]
 8005aaa:	ee65 4a24 	vmul.f32	s9, s10, s9
 8005aae:	ed84 3a01 	vstr	s6, [r4, #4]
 8005ab2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8005ab6:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005aba:	eddd 3a01 	vldr	s7, [sp, #4]
 8005abe:	ee25 5a25 	vmul.f32	s10, s10, s11
 8005ac2:	441e      	add	r6, r3
 8005ac4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8005ac8:	441c      	add	r4, r3
 8005aca:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8005ace:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8005ad2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8005ad6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8005ada:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8005ade:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8005ae2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8005ae6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8005aea:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8005aee:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8005af2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8005af6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005afa:	ee38 8a01 	vadd.f32	s16, s16, s2
 8005afe:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005b02:	ee39 5a85 	vadd.f32	s10, s19, s10
 8005b06:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8005b0a:	ed02 8a01 	vstr	s16, [r2, #-4]
 8005b0e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8005b12:	ed82 6a00 	vstr	s12, [r2]
 8005b16:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005b1a:	edc5 0a00 	vstr	s1, [r5]
 8005b1e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8005b22:	edc5 3a01 	vstr	s7, [r5, #4]
 8005b26:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005b2a:	ed07 5a01 	vstr	s10, [r7, #-4]
 8005b2e:	edc7 4a00 	vstr	s9, [r7]
 8005b32:	441d      	add	r5, r3
 8005b34:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005b38:	441a      	add	r2, r3
 8005b3a:	edc1 2a00 	vstr	s5, [r1]
 8005b3e:	441f      	add	r7, r3
 8005b40:	ed80 3a00 	vstr	s6, [r0]
 8005b44:	4419      	add	r1, r3
 8005b46:	ed80 7a01 	vstr	s14, [r0, #4]
 8005b4a:	4418      	add	r0, r3
 8005b4c:	f63f aee8 	bhi.w	8005920 <arm_radix8_butterfly_f32+0x32c>
 8005b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b52:	f109 0901 	add.w	r9, r9, #1
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	9b04      	ldr	r3, [sp, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	9b06      	ldr	r3, [sp, #24]
 8005b62:	4413      	add	r3, r2
 8005b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b66:	9306      	str	r3, [sp, #24]
 8005b68:	9b05      	ldr	r3, [sp, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	9b07      	ldr	r3, [sp, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b76:	9307      	str	r3, [sp, #28]
 8005b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7a:	4413      	add	r3, r2
 8005b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b82:	4413      	add	r3, r2
 8005b84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b86:	9309      	str	r3, [sp, #36]	; 0x24
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b8e:	9308      	str	r3, [sp, #32]
 8005b90:	3208      	adds	r2, #8
 8005b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b94:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b96:	4599      	cmp	r9, r3
 8005b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b9a:	f47f ae72 	bne.w	8005882 <arm_radix8_butterfly_f32+0x28e>
 8005b9e:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8005ba2:	46c8      	mov	r8, r9
 8005ba4:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8005ba8:	e533      	b.n	8005612 <arm_radix8_butterfly_f32+0x1e>
 8005baa:	b01f      	add	sp, #124	; 0x7c
 8005bac:	ecbd 8b10 	vpop	{d8-d15}
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bb4 <__errno>:
 8005bb4:	4b01      	ldr	r3, [pc, #4]	; (8005bbc <__errno+0x8>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	2000000c 	.word	0x2000000c

08005bc0 <__libc_init_array>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	4d0d      	ldr	r5, [pc, #52]	; (8005bf8 <__libc_init_array+0x38>)
 8005bc4:	4c0d      	ldr	r4, [pc, #52]	; (8005bfc <__libc_init_array+0x3c>)
 8005bc6:	1b64      	subs	r4, r4, r5
 8005bc8:	10a4      	asrs	r4, r4, #2
 8005bca:	2600      	movs	r6, #0
 8005bcc:	42a6      	cmp	r6, r4
 8005bce:	d109      	bne.n	8005be4 <__libc_init_array+0x24>
 8005bd0:	4d0b      	ldr	r5, [pc, #44]	; (8005c00 <__libc_init_array+0x40>)
 8005bd2:	4c0c      	ldr	r4, [pc, #48]	; (8005c04 <__libc_init_array+0x44>)
 8005bd4:	f002 fd72 	bl	80086bc <_init>
 8005bd8:	1b64      	subs	r4, r4, r5
 8005bda:	10a4      	asrs	r4, r4, #2
 8005bdc:	2600      	movs	r6, #0
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	d105      	bne.n	8005bee <__libc_init_array+0x2e>
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be8:	4798      	blx	r3
 8005bea:	3601      	adds	r6, #1
 8005bec:	e7ee      	b.n	8005bcc <__libc_init_array+0xc>
 8005bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf2:	4798      	blx	r3
 8005bf4:	3601      	adds	r6, #1
 8005bf6:	e7f2      	b.n	8005bde <__libc_init_array+0x1e>
 8005bf8:	0801bf44 	.word	0x0801bf44
 8005bfc:	0801bf44 	.word	0x0801bf44
 8005c00:	0801bf44 	.word	0x0801bf44
 8005c04:	0801bf48 	.word	0x0801bf48

08005c08 <memset>:
 8005c08:	4402      	add	r2, r0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <memset+0xa>
 8005c10:	4770      	bx	lr
 8005c12:	f803 1b01 	strb.w	r1, [r3], #1
 8005c16:	e7f9      	b.n	8005c0c <memset+0x4>

08005c18 <__cvt>:
 8005c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	ec55 4b10 	vmov	r4, r5, d0
 8005c20:	2d00      	cmp	r5, #0
 8005c22:	460e      	mov	r6, r1
 8005c24:	4619      	mov	r1, r3
 8005c26:	462b      	mov	r3, r5
 8005c28:	bfbb      	ittet	lt
 8005c2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c2e:	461d      	movlt	r5, r3
 8005c30:	2300      	movge	r3, #0
 8005c32:	232d      	movlt	r3, #45	; 0x2d
 8005c34:	700b      	strb	r3, [r1, #0]
 8005c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c3c:	4691      	mov	r9, r2
 8005c3e:	f023 0820 	bic.w	r8, r3, #32
 8005c42:	bfbc      	itt	lt
 8005c44:	4622      	movlt	r2, r4
 8005c46:	4614      	movlt	r4, r2
 8005c48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c4c:	d005      	beq.n	8005c5a <__cvt+0x42>
 8005c4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c52:	d100      	bne.n	8005c56 <__cvt+0x3e>
 8005c54:	3601      	adds	r6, #1
 8005c56:	2102      	movs	r1, #2
 8005c58:	e000      	b.n	8005c5c <__cvt+0x44>
 8005c5a:	2103      	movs	r1, #3
 8005c5c:	ab03      	add	r3, sp, #12
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	ab02      	add	r3, sp, #8
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	ec45 4b10 	vmov	d0, r4, r5
 8005c68:	4653      	mov	r3, sl
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	f000 fce4 	bl	8006638 <_dtoa_r>
 8005c70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c74:	4607      	mov	r7, r0
 8005c76:	d102      	bne.n	8005c7e <__cvt+0x66>
 8005c78:	f019 0f01 	tst.w	r9, #1
 8005c7c:	d022      	beq.n	8005cc4 <__cvt+0xac>
 8005c7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c82:	eb07 0906 	add.w	r9, r7, r6
 8005c86:	d110      	bne.n	8005caa <__cvt+0x92>
 8005c88:	783b      	ldrb	r3, [r7, #0]
 8005c8a:	2b30      	cmp	r3, #48	; 0x30
 8005c8c:	d10a      	bne.n	8005ca4 <__cvt+0x8c>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa ff97 	bl	8000bc8 <__aeabi_dcmpeq>
 8005c9a:	b918      	cbnz	r0, 8005ca4 <__cvt+0x8c>
 8005c9c:	f1c6 0601 	rsb	r6, r6, #1
 8005ca0:	f8ca 6000 	str.w	r6, [sl]
 8005ca4:	f8da 3000 	ldr.w	r3, [sl]
 8005ca8:	4499      	add	r9, r3
 8005caa:	2200      	movs	r2, #0
 8005cac:	2300      	movs	r3, #0
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fa ff89 	bl	8000bc8 <__aeabi_dcmpeq>
 8005cb6:	b108      	cbz	r0, 8005cbc <__cvt+0xa4>
 8005cb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cbc:	2230      	movs	r2, #48	; 0x30
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	454b      	cmp	r3, r9
 8005cc2:	d307      	bcc.n	8005cd4 <__cvt+0xbc>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cc8:	1bdb      	subs	r3, r3, r7
 8005cca:	4638      	mov	r0, r7
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	b004      	add	sp, #16
 8005cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	9103      	str	r1, [sp, #12]
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e7f0      	b.n	8005cbe <__cvt+0xa6>

08005cdc <__exponent>:
 8005cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	bfb8      	it	lt
 8005ce4:	4249      	neglt	r1, r1
 8005ce6:	f803 2b02 	strb.w	r2, [r3], #2
 8005cea:	bfb4      	ite	lt
 8005cec:	222d      	movlt	r2, #45	; 0x2d
 8005cee:	222b      	movge	r2, #43	; 0x2b
 8005cf0:	2909      	cmp	r1, #9
 8005cf2:	7042      	strb	r2, [r0, #1]
 8005cf4:	dd2a      	ble.n	8005d4c <__exponent+0x70>
 8005cf6:	f10d 0407 	add.w	r4, sp, #7
 8005cfa:	46a4      	mov	ip, r4
 8005cfc:	270a      	movs	r7, #10
 8005cfe:	46a6      	mov	lr, r4
 8005d00:	460a      	mov	r2, r1
 8005d02:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d06:	fb07 1516 	mls	r5, r7, r6, r1
 8005d0a:	3530      	adds	r5, #48	; 0x30
 8005d0c:	2a63      	cmp	r2, #99	; 0x63
 8005d0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d16:	4631      	mov	r1, r6
 8005d18:	dcf1      	bgt.n	8005cfe <__exponent+0x22>
 8005d1a:	3130      	adds	r1, #48	; 0x30
 8005d1c:	f1ae 0502 	sub.w	r5, lr, #2
 8005d20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d24:	1c44      	adds	r4, r0, #1
 8005d26:	4629      	mov	r1, r5
 8005d28:	4561      	cmp	r1, ip
 8005d2a:	d30a      	bcc.n	8005d42 <__exponent+0x66>
 8005d2c:	f10d 0209 	add.w	r2, sp, #9
 8005d30:	eba2 020e 	sub.w	r2, r2, lr
 8005d34:	4565      	cmp	r5, ip
 8005d36:	bf88      	it	hi
 8005d38:	2200      	movhi	r2, #0
 8005d3a:	4413      	add	r3, r2
 8005d3c:	1a18      	subs	r0, r3, r0
 8005d3e:	b003      	add	sp, #12
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d4a:	e7ed      	b.n	8005d28 <__exponent+0x4c>
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	3130      	adds	r1, #48	; 0x30
 8005d50:	7083      	strb	r3, [r0, #2]
 8005d52:	70c1      	strb	r1, [r0, #3]
 8005d54:	1d03      	adds	r3, r0, #4
 8005d56:	e7f1      	b.n	8005d3c <__exponent+0x60>

08005d58 <_printf_float>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ed2d 8b02 	vpush	{d8}
 8005d60:	b08d      	sub	sp, #52	; 0x34
 8005d62:	460c      	mov	r4, r1
 8005d64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d68:	4616      	mov	r6, r2
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	f001 fb47 	bl	8007400 <_localeconv_r>
 8005d72:	f8d0 a000 	ldr.w	sl, [r0]
 8005d76:	4650      	mov	r0, sl
 8005d78:	f7fa faaa 	bl	80002d0 <strlen>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	9305      	str	r3, [sp, #20]
 8005d84:	f8d8 3000 	ldr.w	r3, [r8]
 8005d88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	f103 0208 	add.w	r2, r3, #8
 8005d96:	f8c8 2000 	str.w	r2, [r8]
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005da2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005da6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	f8cd 8018 	str.w	r8, [sp, #24]
 8005db0:	ee08 0a10 	vmov	s16, r0
 8005db4:	4b9f      	ldr	r3, [pc, #636]	; (8006034 <_printf_float+0x2dc>)
 8005db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	f7fa ff35 	bl	8000c2c <__aeabi_dcmpun>
 8005dc2:	bb88      	cbnz	r0, 8005e28 <_printf_float+0xd0>
 8005dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc8:	4b9a      	ldr	r3, [pc, #616]	; (8006034 <_printf_float+0x2dc>)
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	f7fa ff0f 	bl	8000bf0 <__aeabi_dcmple>
 8005dd2:	bb48      	cbnz	r0, 8005e28 <_printf_float+0xd0>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fefe 	bl	8000bdc <__aeabi_dcmplt>
 8005de0:	b110      	cbz	r0, 8005de8 <_printf_float+0x90>
 8005de2:	232d      	movs	r3, #45	; 0x2d
 8005de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de8:	4b93      	ldr	r3, [pc, #588]	; (8006038 <_printf_float+0x2e0>)
 8005dea:	4894      	ldr	r0, [pc, #592]	; (800603c <_printf_float+0x2e4>)
 8005dec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005df0:	bf94      	ite	ls
 8005df2:	4698      	movls	r8, r3
 8005df4:	4680      	movhi	r8, r0
 8005df6:	2303      	movs	r3, #3
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	f023 0204 	bic.w	r2, r3, #4
 8005e00:	6022      	str	r2, [r4, #0]
 8005e02:	f04f 0900 	mov.w	r9, #0
 8005e06:	9700      	str	r7, [sp, #0]
 8005e08:	4633      	mov	r3, r6
 8005e0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f9d8 	bl	80061c4 <_printf_common>
 8005e14:	3001      	adds	r0, #1
 8005e16:	f040 8090 	bne.w	8005f3a <_printf_float+0x1e2>
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	b00d      	add	sp, #52	; 0x34
 8005e20:	ecbd 8b02 	vpop	{d8}
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	4642      	mov	r2, r8
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	f7fa fefc 	bl	8000c2c <__aeabi_dcmpun>
 8005e34:	b140      	cbz	r0, 8005e48 <_printf_float+0xf0>
 8005e36:	464b      	mov	r3, r9
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bfbc      	itt	lt
 8005e3c:	232d      	movlt	r3, #45	; 0x2d
 8005e3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e42:	487f      	ldr	r0, [pc, #508]	; (8006040 <_printf_float+0x2e8>)
 8005e44:	4b7f      	ldr	r3, [pc, #508]	; (8006044 <_printf_float+0x2ec>)
 8005e46:	e7d1      	b.n	8005dec <_printf_float+0x94>
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e4e:	9206      	str	r2, [sp, #24]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	d13f      	bne.n	8005ed4 <_printf_float+0x17c>
 8005e54:	2306      	movs	r3, #6
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	6861      	ldr	r1, [r4, #4]
 8005e5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e60:	2300      	movs	r3, #0
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	ab0a      	add	r3, sp, #40	; 0x28
 8005e66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e6a:	ab09      	add	r3, sp, #36	; 0x24
 8005e6c:	ec49 8b10 	vmov	d0, r8, r9
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fecd 	bl	8005c18 <__cvt>
 8005e7e:	9b06      	ldr	r3, [sp, #24]
 8005e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e82:	2b47      	cmp	r3, #71	; 0x47
 8005e84:	4680      	mov	r8, r0
 8005e86:	d108      	bne.n	8005e9a <_printf_float+0x142>
 8005e88:	1cc8      	adds	r0, r1, #3
 8005e8a:	db02      	blt.n	8005e92 <_printf_float+0x13a>
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	dd41      	ble.n	8005f16 <_printf_float+0x1be>
 8005e92:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e96:	fa5f fb8b 	uxtb.w	fp, fp
 8005e9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e9e:	d820      	bhi.n	8005ee2 <_printf_float+0x18a>
 8005ea0:	3901      	subs	r1, #1
 8005ea2:	465a      	mov	r2, fp
 8005ea4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ea8:	9109      	str	r1, [sp, #36]	; 0x24
 8005eaa:	f7ff ff17 	bl	8005cdc <__exponent>
 8005eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb0:	1813      	adds	r3, r2, r0
 8005eb2:	2a01      	cmp	r2, #1
 8005eb4:	4681      	mov	r9, r0
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	dc02      	bgt.n	8005ec0 <_printf_float+0x168>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	07d2      	lsls	r2, r2, #31
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_float+0x16c>
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d09c      	beq.n	8005e06 <_printf_float+0xae>
 8005ecc:	232d      	movs	r3, #45	; 0x2d
 8005ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed2:	e798      	b.n	8005e06 <_printf_float+0xae>
 8005ed4:	9a06      	ldr	r2, [sp, #24]
 8005ed6:	2a47      	cmp	r2, #71	; 0x47
 8005ed8:	d1be      	bne.n	8005e58 <_printf_float+0x100>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1bc      	bne.n	8005e58 <_printf_float+0x100>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e7b9      	b.n	8005e56 <_printf_float+0xfe>
 8005ee2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ee6:	d118      	bne.n	8005f1a <_printf_float+0x1c2>
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	dd0b      	ble.n	8005f06 <_printf_float+0x1ae>
 8005eee:	6121      	str	r1, [r4, #16]
 8005ef0:	b913      	cbnz	r3, 8005ef8 <_printf_float+0x1a0>
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	07d0      	lsls	r0, r2, #31
 8005ef6:	d502      	bpl.n	8005efe <_printf_float+0x1a6>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	440b      	add	r3, r1
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f00:	f04f 0900 	mov.w	r9, #0
 8005f04:	e7de      	b.n	8005ec4 <_printf_float+0x16c>
 8005f06:	b913      	cbnz	r3, 8005f0e <_printf_float+0x1b6>
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	07d2      	lsls	r2, r2, #31
 8005f0c:	d501      	bpl.n	8005f12 <_printf_float+0x1ba>
 8005f0e:	3302      	adds	r3, #2
 8005f10:	e7f4      	b.n	8005efc <_printf_float+0x1a4>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e7f2      	b.n	8005efc <_printf_float+0x1a4>
 8005f16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	db05      	blt.n	8005f2c <_printf_float+0x1d4>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	6121      	str	r1, [r4, #16]
 8005f24:	07d8      	lsls	r0, r3, #31
 8005f26:	d5ea      	bpl.n	8005efe <_printf_float+0x1a6>
 8005f28:	1c4b      	adds	r3, r1, #1
 8005f2a:	e7e7      	b.n	8005efc <_printf_float+0x1a4>
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	bfd4      	ite	le
 8005f30:	f1c1 0202 	rsble	r2, r1, #2
 8005f34:	2201      	movgt	r2, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	e7e0      	b.n	8005efc <_printf_float+0x1a4>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	055a      	lsls	r2, r3, #21
 8005f3e:	d407      	bmi.n	8005f50 <_printf_float+0x1f8>
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	4642      	mov	r2, r8
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d12c      	bne.n	8005fa8 <_printf_float+0x250>
 8005f4e:	e764      	b.n	8005e1a <_printf_float+0xc2>
 8005f50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f54:	f240 80e0 	bls.w	8006118 <_printf_float+0x3c0>
 8005f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f7fa fe32 	bl	8000bc8 <__aeabi_dcmpeq>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d034      	beq.n	8005fd2 <_printf_float+0x27a>
 8005f68:	4a37      	ldr	r2, [pc, #220]	; (8006048 <_printf_float+0x2f0>)
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f af51 	beq.w	8005e1a <_printf_float+0xc2>
 8005f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	db02      	blt.n	8005f86 <_printf_float+0x22e>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07d8      	lsls	r0, r3, #31
 8005f84:	d510      	bpl.n	8005fa8 <_printf_float+0x250>
 8005f86:	ee18 3a10 	vmov	r3, s16
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af41 	beq.w	8005e1a <_printf_float+0xc2>
 8005f98:	f04f 0800 	mov.w	r8, #0
 8005f9c:	f104 091a 	add.w	r9, r4, #26
 8005fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	dc09      	bgt.n	8005fbc <_printf_float+0x264>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	f100 8105 	bmi.w	80061ba <_printf_float+0x462>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e730      	b.n	8005e1e <_printf_float+0xc6>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	464a      	mov	r2, r9
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af27 	beq.w	8005e1a <_printf_float+0xc2>
 8005fcc:	f108 0801 	add.w	r8, r8, #1
 8005fd0:	e7e6      	b.n	8005fa0 <_printf_float+0x248>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc39      	bgt.n	800604c <_printf_float+0x2f4>
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <_printf_float+0x2f0>)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af19 	beq.w	8005e1a <_printf_float+0xc2>
 8005fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d102      	bne.n	8005ff6 <_printf_float+0x29e>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07d9      	lsls	r1, r3, #31
 8005ff4:	d5d8      	bpl.n	8005fa8 <_printf_float+0x250>
 8005ff6:	ee18 3a10 	vmov	r3, s16
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af09 	beq.w	8005e1a <_printf_float+0xc2>
 8006008:	f04f 0900 	mov.w	r9, #0
 800600c:	f104 0a1a 	add.w	sl, r4, #26
 8006010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006012:	425b      	negs	r3, r3
 8006014:	454b      	cmp	r3, r9
 8006016:	dc01      	bgt.n	800601c <_printf_float+0x2c4>
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	e792      	b.n	8005f42 <_printf_float+0x1ea>
 800601c:	2301      	movs	r3, #1
 800601e:	4652      	mov	r2, sl
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f aef7 	beq.w	8005e1a <_printf_float+0xc2>
 800602c:	f109 0901 	add.w	r9, r9, #1
 8006030:	e7ee      	b.n	8006010 <_printf_float+0x2b8>
 8006032:	bf00      	nop
 8006034:	7fefffff 	.word	0x7fefffff
 8006038:	0801bb64 	.word	0x0801bb64
 800603c:	0801bb68 	.word	0x0801bb68
 8006040:	0801bb70 	.word	0x0801bb70
 8006044:	0801bb6c 	.word	0x0801bb6c
 8006048:	0801bb74 	.word	0x0801bb74
 800604c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006050:	429a      	cmp	r2, r3
 8006052:	bfa8      	it	ge
 8006054:	461a      	movge	r2, r3
 8006056:	2a00      	cmp	r2, #0
 8006058:	4691      	mov	r9, r2
 800605a:	dc37      	bgt.n	80060cc <_printf_float+0x374>
 800605c:	f04f 0b00 	mov.w	fp, #0
 8006060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006064:	f104 021a 	add.w	r2, r4, #26
 8006068:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	eba3 0309 	sub.w	r3, r3, r9
 8006070:	455b      	cmp	r3, fp
 8006072:	dc33      	bgt.n	80060dc <_printf_float+0x384>
 8006074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006078:	429a      	cmp	r2, r3
 800607a:	db3b      	blt.n	80060f4 <_printf_float+0x39c>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	07da      	lsls	r2, r3, #31
 8006080:	d438      	bmi.n	80060f4 <_printf_float+0x39c>
 8006082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006084:	9a05      	ldr	r2, [sp, #20]
 8006086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006088:	1a9a      	subs	r2, r3, r2
 800608a:	eba3 0901 	sub.w	r9, r3, r1
 800608e:	4591      	cmp	r9, r2
 8006090:	bfa8      	it	ge
 8006092:	4691      	movge	r9, r2
 8006094:	f1b9 0f00 	cmp.w	r9, #0
 8006098:	dc35      	bgt.n	8006106 <_printf_float+0x3ae>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060a2:	f104 0a1a 	add.w	sl, r4, #26
 80060a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	eba3 0309 	sub.w	r3, r3, r9
 80060b0:	4543      	cmp	r3, r8
 80060b2:	f77f af79 	ble.w	8005fa8 <_printf_float+0x250>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f aeaa 	beq.w	8005e1a <_printf_float+0xc2>
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	e7ec      	b.n	80060a6 <_printf_float+0x34e>
 80060cc:	4613      	mov	r3, r2
 80060ce:	4631      	mov	r1, r6
 80060d0:	4642      	mov	r2, r8
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	d1c0      	bne.n	800605c <_printf_float+0x304>
 80060da:	e69e      	b.n	8005e1a <_printf_float+0xc2>
 80060dc:	2301      	movs	r3, #1
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	9205      	str	r2, [sp, #20]
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f ae97 	beq.w	8005e1a <_printf_float+0xc2>
 80060ec:	9a05      	ldr	r2, [sp, #20]
 80060ee:	f10b 0b01 	add.w	fp, fp, #1
 80060f2:	e7b9      	b.n	8006068 <_printf_float+0x310>
 80060f4:	ee18 3a10 	vmov	r3, s16
 80060f8:	4652      	mov	r2, sl
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	d1be      	bne.n	8006082 <_printf_float+0x32a>
 8006104:	e689      	b.n	8005e1a <_printf_float+0xc2>
 8006106:	9a05      	ldr	r2, [sp, #20]
 8006108:	464b      	mov	r3, r9
 800610a:	4442      	add	r2, r8
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	d1c1      	bne.n	800609a <_printf_float+0x342>
 8006116:	e680      	b.n	8005e1a <_printf_float+0xc2>
 8006118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800611a:	2a01      	cmp	r2, #1
 800611c:	dc01      	bgt.n	8006122 <_printf_float+0x3ca>
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d538      	bpl.n	8006194 <_printf_float+0x43c>
 8006122:	2301      	movs	r3, #1
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae74 	beq.w	8005e1a <_printf_float+0xc2>
 8006132:	ee18 3a10 	vmov	r3, s16
 8006136:	4652      	mov	r2, sl
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f ae6b 	beq.w	8005e1a <_printf_float+0xc2>
 8006144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006148:	2200      	movs	r2, #0
 800614a:	2300      	movs	r3, #0
 800614c:	f7fa fd3c 	bl	8000bc8 <__aeabi_dcmpeq>
 8006150:	b9d8      	cbnz	r0, 800618a <_printf_float+0x432>
 8006152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006154:	f108 0201 	add.w	r2, r8, #1
 8006158:	3b01      	subs	r3, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	d10e      	bne.n	8006182 <_printf_float+0x42a>
 8006164:	e659      	b.n	8005e1a <_printf_float+0xc2>
 8006166:	2301      	movs	r3, #1
 8006168:	4652      	mov	r2, sl
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f ae52 	beq.w	8005e1a <_printf_float+0xc2>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	4543      	cmp	r3, r8
 8006180:	dcf1      	bgt.n	8006166 <_printf_float+0x40e>
 8006182:	464b      	mov	r3, r9
 8006184:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006188:	e6dc      	b.n	8005f44 <_printf_float+0x1ec>
 800618a:	f04f 0800 	mov.w	r8, #0
 800618e:	f104 0a1a 	add.w	sl, r4, #26
 8006192:	e7f2      	b.n	800617a <_printf_float+0x422>
 8006194:	2301      	movs	r3, #1
 8006196:	4642      	mov	r2, r8
 8006198:	e7df      	b.n	800615a <_printf_float+0x402>
 800619a:	2301      	movs	r3, #1
 800619c:	464a      	mov	r2, r9
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	47b8      	blx	r7
 80061a4:	3001      	adds	r0, #1
 80061a6:	f43f ae38 	beq.w	8005e1a <_printf_float+0xc2>
 80061aa:	f108 0801 	add.w	r8, r8, #1
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061b2:	1a5b      	subs	r3, r3, r1
 80061b4:	4543      	cmp	r3, r8
 80061b6:	dcf0      	bgt.n	800619a <_printf_float+0x442>
 80061b8:	e6fa      	b.n	8005fb0 <_printf_float+0x258>
 80061ba:	f04f 0800 	mov.w	r8, #0
 80061be:	f104 0919 	add.w	r9, r4, #25
 80061c2:	e7f4      	b.n	80061ae <_printf_float+0x456>

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4616      	mov	r6, r2
 80061ca:	4699      	mov	r9, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b10a      	cbz	r2, 80061ea <_printf_common+0x26>
 80061e6:	3301      	adds	r3, #1
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	0699      	lsls	r1, r3, #26
 80061ee:	bf42      	ittt	mi
 80061f0:	6833      	ldrmi	r3, [r6, #0]
 80061f2:	3302      	addmi	r3, #2
 80061f4:	6033      	strmi	r3, [r6, #0]
 80061f6:	6825      	ldr	r5, [r4, #0]
 80061f8:	f015 0506 	ands.w	r5, r5, #6
 80061fc:	d106      	bne.n	800620c <_printf_common+0x48>
 80061fe:	f104 0a19 	add.w	sl, r4, #25
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	6832      	ldr	r2, [r6, #0]
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc26      	bgt.n	800625a <_printf_common+0x96>
 800620c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006210:	1e13      	subs	r3, r2, #0
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	bf18      	it	ne
 8006216:	2301      	movne	r3, #1
 8006218:	0692      	lsls	r2, r2, #26
 800621a:	d42b      	bmi.n	8006274 <_printf_common+0xb0>
 800621c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d01e      	beq.n	8006268 <_printf_common+0xa4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	68e5      	ldr	r5, [r4, #12]
 800622e:	6832      	ldr	r2, [r6, #0]
 8006230:	f003 0306 	and.w	r3, r3, #6
 8006234:	2b04      	cmp	r3, #4
 8006236:	bf08      	it	eq
 8006238:	1aad      	subeq	r5, r5, r2
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	bf0c      	ite	eq
 8006240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006244:	2500      	movne	r5, #0
 8006246:	4293      	cmp	r3, r2
 8006248:	bfc4      	itt	gt
 800624a:	1a9b      	subgt	r3, r3, r2
 800624c:	18ed      	addgt	r5, r5, r3
 800624e:	2600      	movs	r6, #0
 8006250:	341a      	adds	r4, #26
 8006252:	42b5      	cmp	r5, r6
 8006254:	d11a      	bne.n	800628c <_printf_common+0xc8>
 8006256:	2000      	movs	r0, #0
 8006258:	e008      	b.n	800626c <_printf_common+0xa8>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4649      	mov	r1, r9
 8006260:	4638      	mov	r0, r7
 8006262:	47c0      	blx	r8
 8006264:	3001      	adds	r0, #1
 8006266:	d103      	bne.n	8006270 <_printf_common+0xac>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	3501      	adds	r5, #1
 8006272:	e7c6      	b.n	8006202 <_printf_common+0x3e>
 8006274:	18e1      	adds	r1, r4, r3
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	2030      	movs	r0, #48	; 0x30
 800627a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627e:	4422      	add	r2, r4
 8006280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006288:	3302      	adds	r3, #2
 800628a:	e7c7      	b.n	800621c <_printf_common+0x58>
 800628c:	2301      	movs	r3, #1
 800628e:	4622      	mov	r2, r4
 8006290:	4649      	mov	r1, r9
 8006292:	4638      	mov	r0, r7
 8006294:	47c0      	blx	r8
 8006296:	3001      	adds	r0, #1
 8006298:	d0e6      	beq.n	8006268 <_printf_common+0xa4>
 800629a:	3601      	adds	r6, #1
 800629c:	e7d9      	b.n	8006252 <_printf_common+0x8e>
	...

080062a0 <_printf_i>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	7e0f      	ldrb	r7, [r1, #24]
 80062a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a8:	2f78      	cmp	r7, #120	; 0x78
 80062aa:	4691      	mov	r9, r2
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	469a      	mov	sl, r3
 80062b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062b6:	d807      	bhi.n	80062c8 <_printf_i+0x28>
 80062b8:	2f62      	cmp	r7, #98	; 0x62
 80062ba:	d80a      	bhi.n	80062d2 <_printf_i+0x32>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f000 80d8 	beq.w	8006472 <_printf_i+0x1d2>
 80062c2:	2f58      	cmp	r7, #88	; 0x58
 80062c4:	f000 80a3 	beq.w	800640e <_printf_i+0x16e>
 80062c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d0:	e03a      	b.n	8006348 <_printf_i+0xa8>
 80062d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d6:	2b15      	cmp	r3, #21
 80062d8:	d8f6      	bhi.n	80062c8 <_printf_i+0x28>
 80062da:	a101      	add	r1, pc, #4	; (adr r1, 80062e0 <_printf_i+0x40>)
 80062dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e0:	08006339 	.word	0x08006339
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	080062c9 	.word	0x080062c9
 80062ec:	080062c9 	.word	0x080062c9
 80062f0:	080062c9 	.word	0x080062c9
 80062f4:	080062c9 	.word	0x080062c9
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	080062c9 	.word	0x080062c9
 8006300:	080062c9 	.word	0x080062c9
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	08006459 	.word	0x08006459
 8006310:	0800637d 	.word	0x0800637d
 8006314:	0800643b 	.word	0x0800643b
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	0800647b 	.word	0x0800647b
 8006324:	080062c9 	.word	0x080062c9
 8006328:	0800637d 	.word	0x0800637d
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	08006443 	.word	0x08006443
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	602a      	str	r2, [r5, #0]
 8006340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006348:	2301      	movs	r3, #1
 800634a:	e0a3      	b.n	8006494 <_printf_i+0x1f4>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	6829      	ldr	r1, [r5, #0]
 8006350:	0606      	lsls	r6, r0, #24
 8006352:	f101 0304 	add.w	r3, r1, #4
 8006356:	d50a      	bpl.n	800636e <_printf_i+0xce>
 8006358:	680e      	ldr	r6, [r1, #0]
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	2e00      	cmp	r6, #0
 800635e:	da03      	bge.n	8006368 <_printf_i+0xc8>
 8006360:	232d      	movs	r3, #45	; 0x2d
 8006362:	4276      	negs	r6, r6
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	485e      	ldr	r0, [pc, #376]	; (80064e4 <_printf_i+0x244>)
 800636a:	230a      	movs	r3, #10
 800636c:	e019      	b.n	80063a2 <_printf_i+0x102>
 800636e:	680e      	ldr	r6, [r1, #0]
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006376:	bf18      	it	ne
 8006378:	b236      	sxthne	r6, r6
 800637a:	e7ef      	b.n	800635c <_printf_i+0xbc>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	1d19      	adds	r1, r3, #4
 8006382:	6029      	str	r1, [r5, #0]
 8006384:	0601      	lsls	r1, r0, #24
 8006386:	d501      	bpl.n	800638c <_printf_i+0xec>
 8006388:	681e      	ldr	r6, [r3, #0]
 800638a:	e002      	b.n	8006392 <_printf_i+0xf2>
 800638c:	0646      	lsls	r6, r0, #25
 800638e:	d5fb      	bpl.n	8006388 <_printf_i+0xe8>
 8006390:	881e      	ldrh	r6, [r3, #0]
 8006392:	4854      	ldr	r0, [pc, #336]	; (80064e4 <_printf_i+0x244>)
 8006394:	2f6f      	cmp	r7, #111	; 0x6f
 8006396:	bf0c      	ite	eq
 8006398:	2308      	moveq	r3, #8
 800639a:	230a      	movne	r3, #10
 800639c:	2100      	movs	r1, #0
 800639e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a2:	6865      	ldr	r5, [r4, #4]
 80063a4:	60a5      	str	r5, [r4, #8]
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	bfa2      	ittt	ge
 80063aa:	6821      	ldrge	r1, [r4, #0]
 80063ac:	f021 0104 	bicge.w	r1, r1, #4
 80063b0:	6021      	strge	r1, [r4, #0]
 80063b2:	b90e      	cbnz	r6, 80063b8 <_printf_i+0x118>
 80063b4:	2d00      	cmp	r5, #0
 80063b6:	d04d      	beq.n	8006454 <_printf_i+0x1b4>
 80063b8:	4615      	mov	r5, r2
 80063ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80063be:	fb03 6711 	mls	r7, r3, r1, r6
 80063c2:	5dc7      	ldrb	r7, [r0, r7]
 80063c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c8:	4637      	mov	r7, r6
 80063ca:	42bb      	cmp	r3, r7
 80063cc:	460e      	mov	r6, r1
 80063ce:	d9f4      	bls.n	80063ba <_printf_i+0x11a>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d10b      	bne.n	80063ec <_printf_i+0x14c>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	07de      	lsls	r6, r3, #31
 80063d8:	d508      	bpl.n	80063ec <_printf_i+0x14c>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6861      	ldr	r1, [r4, #4]
 80063de:	4299      	cmp	r1, r3
 80063e0:	bfde      	ittt	le
 80063e2:	2330      	movle	r3, #48	; 0x30
 80063e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063ec:	1b52      	subs	r2, r2, r5
 80063ee:	6122      	str	r2, [r4, #16]
 80063f0:	f8cd a000 	str.w	sl, [sp]
 80063f4:	464b      	mov	r3, r9
 80063f6:	aa03      	add	r2, sp, #12
 80063f8:	4621      	mov	r1, r4
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7ff fee2 	bl	80061c4 <_printf_common>
 8006400:	3001      	adds	r0, #1
 8006402:	d14c      	bne.n	800649e <_printf_i+0x1fe>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	b004      	add	sp, #16
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640e:	4835      	ldr	r0, [pc, #212]	; (80064e4 <_printf_i+0x244>)
 8006410:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006414:	6829      	ldr	r1, [r5, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f851 6b04 	ldr.w	r6, [r1], #4
 800641c:	6029      	str	r1, [r5, #0]
 800641e:	061d      	lsls	r5, r3, #24
 8006420:	d514      	bpl.n	800644c <_printf_i+0x1ac>
 8006422:	07df      	lsls	r7, r3, #31
 8006424:	bf44      	itt	mi
 8006426:	f043 0320 	orrmi.w	r3, r3, #32
 800642a:	6023      	strmi	r3, [r4, #0]
 800642c:	b91e      	cbnz	r6, 8006436 <_printf_i+0x196>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f023 0320 	bic.w	r3, r3, #32
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	2310      	movs	r3, #16
 8006438:	e7b0      	b.n	800639c <_printf_i+0xfc>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f043 0320 	orr.w	r3, r3, #32
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	2378      	movs	r3, #120	; 0x78
 8006444:	4828      	ldr	r0, [pc, #160]	; (80064e8 <_printf_i+0x248>)
 8006446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800644a:	e7e3      	b.n	8006414 <_printf_i+0x174>
 800644c:	0659      	lsls	r1, r3, #25
 800644e:	bf48      	it	mi
 8006450:	b2b6      	uxthmi	r6, r6
 8006452:	e7e6      	b.n	8006422 <_printf_i+0x182>
 8006454:	4615      	mov	r5, r2
 8006456:	e7bb      	b.n	80063d0 <_printf_i+0x130>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	6826      	ldr	r6, [r4, #0]
 800645c:	6961      	ldr	r1, [r4, #20]
 800645e:	1d18      	adds	r0, r3, #4
 8006460:	6028      	str	r0, [r5, #0]
 8006462:	0635      	lsls	r5, r6, #24
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	d501      	bpl.n	800646c <_printf_i+0x1cc>
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	e002      	b.n	8006472 <_printf_i+0x1d2>
 800646c:	0670      	lsls	r0, r6, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0x1c8>
 8006470:	8019      	strh	r1, [r3, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	4615      	mov	r5, r2
 8006478:	e7ba      	b.n	80063f0 <_printf_i+0x150>
 800647a:	682b      	ldr	r3, [r5, #0]
 800647c:	1d1a      	adds	r2, r3, #4
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	681d      	ldr	r5, [r3, #0]
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	2100      	movs	r1, #0
 8006486:	4628      	mov	r0, r5
 8006488:	f7f9 ff2a 	bl	80002e0 <memchr>
 800648c:	b108      	cbz	r0, 8006492 <_printf_i+0x1f2>
 800648e:	1b40      	subs	r0, r0, r5
 8006490:	6060      	str	r0, [r4, #4]
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	2300      	movs	r3, #0
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	e7a8      	b.n	80063f0 <_printf_i+0x150>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	462a      	mov	r2, r5
 80064a2:	4649      	mov	r1, r9
 80064a4:	4640      	mov	r0, r8
 80064a6:	47d0      	blx	sl
 80064a8:	3001      	adds	r0, #1
 80064aa:	d0ab      	beq.n	8006404 <_printf_i+0x164>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	079b      	lsls	r3, r3, #30
 80064b0:	d413      	bmi.n	80064da <_printf_i+0x23a>
 80064b2:	68e0      	ldr	r0, [r4, #12]
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	4298      	cmp	r0, r3
 80064b8:	bfb8      	it	lt
 80064ba:	4618      	movlt	r0, r3
 80064bc:	e7a4      	b.n	8006408 <_printf_i+0x168>
 80064be:	2301      	movs	r3, #1
 80064c0:	4632      	mov	r2, r6
 80064c2:	4649      	mov	r1, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	47d0      	blx	sl
 80064c8:	3001      	adds	r0, #1
 80064ca:	d09b      	beq.n	8006404 <_printf_i+0x164>
 80064cc:	3501      	adds	r5, #1
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	9903      	ldr	r1, [sp, #12]
 80064d2:	1a5b      	subs	r3, r3, r1
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dcf2      	bgt.n	80064be <_printf_i+0x21e>
 80064d8:	e7eb      	b.n	80064b2 <_printf_i+0x212>
 80064da:	2500      	movs	r5, #0
 80064dc:	f104 0619 	add.w	r6, r4, #25
 80064e0:	e7f5      	b.n	80064ce <_printf_i+0x22e>
 80064e2:	bf00      	nop
 80064e4:	0801bb76 	.word	0x0801bb76
 80064e8:	0801bb87 	.word	0x0801bb87

080064ec <iprintf>:
 80064ec:	b40f      	push	{r0, r1, r2, r3}
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <iprintf+0x2c>)
 80064f0:	b513      	push	{r0, r1, r4, lr}
 80064f2:	681c      	ldr	r4, [r3, #0]
 80064f4:	b124      	cbz	r4, 8006500 <iprintf+0x14>
 80064f6:	69a3      	ldr	r3, [r4, #24]
 80064f8:	b913      	cbnz	r3, 8006500 <iprintf+0x14>
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 fee2 	bl	80072c4 <__sinit>
 8006500:	ab05      	add	r3, sp, #20
 8006502:	9a04      	ldr	r2, [sp, #16]
 8006504:	68a1      	ldr	r1, [r4, #8]
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	4620      	mov	r0, r4
 800650a:	f001 fc3b 	bl	8007d84 <_vfiprintf_r>
 800650e:	b002      	add	sp, #8
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	b004      	add	sp, #16
 8006516:	4770      	bx	lr
 8006518:	2000000c 	.word	0x2000000c

0800651c <quorem>:
 800651c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	6903      	ldr	r3, [r0, #16]
 8006522:	690c      	ldr	r4, [r1, #16]
 8006524:	42a3      	cmp	r3, r4
 8006526:	4607      	mov	r7, r0
 8006528:	f2c0 8081 	blt.w	800662e <quorem+0x112>
 800652c:	3c01      	subs	r4, #1
 800652e:	f101 0814 	add.w	r8, r1, #20
 8006532:	f100 0514 	add.w	r5, r0, #20
 8006536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006544:	3301      	adds	r3, #1
 8006546:	429a      	cmp	r2, r3
 8006548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800654c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006550:	fbb2 f6f3 	udiv	r6, r2, r3
 8006554:	d331      	bcc.n	80065ba <quorem+0x9e>
 8006556:	f04f 0e00 	mov.w	lr, #0
 800655a:	4640      	mov	r0, r8
 800655c:	46ac      	mov	ip, r5
 800655e:	46f2      	mov	sl, lr
 8006560:	f850 2b04 	ldr.w	r2, [r0], #4
 8006564:	b293      	uxth	r3, r2
 8006566:	fb06 e303 	mla	r3, r6, r3, lr
 800656a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800656e:	b29b      	uxth	r3, r3
 8006570:	ebaa 0303 	sub.w	r3, sl, r3
 8006574:	f8dc a000 	ldr.w	sl, [ip]
 8006578:	0c12      	lsrs	r2, r2, #16
 800657a:	fa13 f38a 	uxtah	r3, r3, sl
 800657e:	fb06 e202 	mla	r2, r6, r2, lr
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800658a:	b292      	uxth	r2, r2
 800658c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006594:	f8bd 3000 	ldrh.w	r3, [sp]
 8006598:	4581      	cmp	r9, r0
 800659a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659e:	f84c 3b04 	str.w	r3, [ip], #4
 80065a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065a6:	d2db      	bcs.n	8006560 <quorem+0x44>
 80065a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80065ac:	b92b      	cbnz	r3, 80065ba <quorem+0x9e>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	429d      	cmp	r5, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	d32e      	bcc.n	8006616 <quorem+0xfa>
 80065b8:	613c      	str	r4, [r7, #16]
 80065ba:	4638      	mov	r0, r7
 80065bc:	f001 f9c0 	bl	8007940 <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	db24      	blt.n	800660e <quorem+0xf2>
 80065c4:	3601      	adds	r6, #1
 80065c6:	4628      	mov	r0, r5
 80065c8:	f04f 0c00 	mov.w	ip, #0
 80065cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80065d0:	f8d0 e000 	ldr.w	lr, [r0]
 80065d4:	b293      	uxth	r3, r2
 80065d6:	ebac 0303 	sub.w	r3, ip, r3
 80065da:	0c12      	lsrs	r2, r2, #16
 80065dc:	fa13 f38e 	uxtah	r3, r3, lr
 80065e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ee:	45c1      	cmp	r9, r8
 80065f0:	f840 3b04 	str.w	r3, [r0], #4
 80065f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065f8:	d2e8      	bcs.n	80065cc <quorem+0xb0>
 80065fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006602:	b922      	cbnz	r2, 800660e <quorem+0xf2>
 8006604:	3b04      	subs	r3, #4
 8006606:	429d      	cmp	r5, r3
 8006608:	461a      	mov	r2, r3
 800660a:	d30a      	bcc.n	8006622 <quorem+0x106>
 800660c:	613c      	str	r4, [r7, #16]
 800660e:	4630      	mov	r0, r6
 8006610:	b003      	add	sp, #12
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	3b04      	subs	r3, #4
 800661a:	2a00      	cmp	r2, #0
 800661c:	d1cc      	bne.n	80065b8 <quorem+0x9c>
 800661e:	3c01      	subs	r4, #1
 8006620:	e7c7      	b.n	80065b2 <quorem+0x96>
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	3b04      	subs	r3, #4
 8006626:	2a00      	cmp	r2, #0
 8006628:	d1f0      	bne.n	800660c <quorem+0xf0>
 800662a:	3c01      	subs	r4, #1
 800662c:	e7eb      	b.n	8006606 <quorem+0xea>
 800662e:	2000      	movs	r0, #0
 8006630:	e7ee      	b.n	8006610 <quorem+0xf4>
 8006632:	0000      	movs	r0, r0
 8006634:	0000      	movs	r0, r0
	...

08006638 <_dtoa_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ed2d 8b04 	vpush	{d8-d9}
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	b093      	sub	sp, #76	; 0x4c
 8006646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006648:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800664c:	9106      	str	r1, [sp, #24]
 800664e:	ee10 aa10 	vmov	sl, s0
 8006652:	4604      	mov	r4, r0
 8006654:	9209      	str	r2, [sp, #36]	; 0x24
 8006656:	930c      	str	r3, [sp, #48]	; 0x30
 8006658:	46bb      	mov	fp, r7
 800665a:	b975      	cbnz	r5, 800667a <_dtoa_r+0x42>
 800665c:	2010      	movs	r0, #16
 800665e:	f000 fed7 	bl	8007410 <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	6260      	str	r0, [r4, #36]	; 0x24
 8006666:	b920      	cbnz	r0, 8006672 <_dtoa_r+0x3a>
 8006668:	4ba7      	ldr	r3, [pc, #668]	; (8006908 <_dtoa_r+0x2d0>)
 800666a:	21ea      	movs	r1, #234	; 0xea
 800666c:	48a7      	ldr	r0, [pc, #668]	; (800690c <_dtoa_r+0x2d4>)
 800666e:	f001 fddf 	bl	8008230 <__assert_func>
 8006672:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006676:	6005      	str	r5, [r0, #0]
 8006678:	60c5      	str	r5, [r0, #12]
 800667a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800667c:	6819      	ldr	r1, [r3, #0]
 800667e:	b151      	cbz	r1, 8006696 <_dtoa_r+0x5e>
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	604a      	str	r2, [r1, #4]
 8006684:	2301      	movs	r3, #1
 8006686:	4093      	lsls	r3, r2
 8006688:	608b      	str	r3, [r1, #8]
 800668a:	4620      	mov	r0, r4
 800668c:	f000 ff16 	bl	80074bc <_Bfree>
 8006690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	1e3b      	subs	r3, r7, #0
 8006698:	bfaa      	itet	ge
 800669a:	2300      	movge	r3, #0
 800669c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066a0:	f8c8 3000 	strge.w	r3, [r8]
 80066a4:	4b9a      	ldr	r3, [pc, #616]	; (8006910 <_dtoa_r+0x2d8>)
 80066a6:	bfbc      	itt	lt
 80066a8:	2201      	movlt	r2, #1
 80066aa:	f8c8 2000 	strlt.w	r2, [r8]
 80066ae:	ea33 030b 	bics.w	r3, r3, fp
 80066b2:	d11b      	bne.n	80066ec <_dtoa_r+0xb4>
 80066b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066c0:	4333      	orrs	r3, r6
 80066c2:	f000 8592 	beq.w	80071ea <_dtoa_r+0xbb2>
 80066c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c8:	b963      	cbnz	r3, 80066e4 <_dtoa_r+0xac>
 80066ca:	4b92      	ldr	r3, [pc, #584]	; (8006914 <_dtoa_r+0x2dc>)
 80066cc:	e022      	b.n	8006714 <_dtoa_r+0xdc>
 80066ce:	4b92      	ldr	r3, [pc, #584]	; (8006918 <_dtoa_r+0x2e0>)
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	3308      	adds	r3, #8
 80066d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	9801      	ldr	r0, [sp, #4]
 80066da:	b013      	add	sp, #76	; 0x4c
 80066dc:	ecbd 8b04 	vpop	{d8-d9}
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	4b8b      	ldr	r3, [pc, #556]	; (8006914 <_dtoa_r+0x2dc>)
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	3303      	adds	r3, #3
 80066ea:	e7f3      	b.n	80066d4 <_dtoa_r+0x9c>
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4650      	mov	r0, sl
 80066f2:	4659      	mov	r1, fp
 80066f4:	f7fa fa68 	bl	8000bc8 <__aeabi_dcmpeq>
 80066f8:	ec4b ab19 	vmov	d9, sl, fp
 80066fc:	4680      	mov	r8, r0
 80066fe:	b158      	cbz	r0, 8006718 <_dtoa_r+0xe0>
 8006700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006702:	2301      	movs	r3, #1
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 856b 	beq.w	80071e4 <_dtoa_r+0xbac>
 800670e:	4883      	ldr	r0, [pc, #524]	; (800691c <_dtoa_r+0x2e4>)
 8006710:	6018      	str	r0, [r3, #0]
 8006712:	1e43      	subs	r3, r0, #1
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	e7df      	b.n	80066d8 <_dtoa_r+0xa0>
 8006718:	ec4b ab10 	vmov	d0, sl, fp
 800671c:	aa10      	add	r2, sp, #64	; 0x40
 800671e:	a911      	add	r1, sp, #68	; 0x44
 8006720:	4620      	mov	r0, r4
 8006722:	f001 f9b3 	bl	8007a8c <__d2b>
 8006726:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800672a:	ee08 0a10 	vmov	s16, r0
 800672e:	2d00      	cmp	r5, #0
 8006730:	f000 8084 	beq.w	800683c <_dtoa_r+0x204>
 8006734:	ee19 3a90 	vmov	r3, s19
 8006738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800673c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006740:	4656      	mov	r6, sl
 8006742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800674a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800674e:	4b74      	ldr	r3, [pc, #464]	; (8006920 <_dtoa_r+0x2e8>)
 8006750:	2200      	movs	r2, #0
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7f9 fe17 	bl	8000388 <__aeabi_dsub>
 800675a:	a365      	add	r3, pc, #404	; (adr r3, 80068f0 <_dtoa_r+0x2b8>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 ffca 	bl	80006f8 <__aeabi_dmul>
 8006764:	a364      	add	r3, pc, #400	; (adr r3, 80068f8 <_dtoa_r+0x2c0>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 fe0f 	bl	800038c <__adddf3>
 800676e:	4606      	mov	r6, r0
 8006770:	4628      	mov	r0, r5
 8006772:	460f      	mov	r7, r1
 8006774:	f7f9 ff56 	bl	8000624 <__aeabi_i2d>
 8006778:	a361      	add	r3, pc, #388	; (adr r3, 8006900 <_dtoa_r+0x2c8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 ffbb 	bl	80006f8 <__aeabi_dmul>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fdff 	bl	800038c <__adddf3>
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	f7fa fa61 	bl	8000c58 <__aeabi_d2iz>
 8006796:	2200      	movs	r2, #0
 8006798:	9000      	str	r0, [sp, #0]
 800679a:	2300      	movs	r3, #0
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7fa fa1c 	bl	8000bdc <__aeabi_dcmplt>
 80067a4:	b150      	cbz	r0, 80067bc <_dtoa_r+0x184>
 80067a6:	9800      	ldr	r0, [sp, #0]
 80067a8:	f7f9 ff3c 	bl	8000624 <__aeabi_i2d>
 80067ac:	4632      	mov	r2, r6
 80067ae:	463b      	mov	r3, r7
 80067b0:	f7fa fa0a 	bl	8000bc8 <__aeabi_dcmpeq>
 80067b4:	b910      	cbnz	r0, 80067bc <_dtoa_r+0x184>
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	9b00      	ldr	r3, [sp, #0]
 80067be:	2b16      	cmp	r3, #22
 80067c0:	d85a      	bhi.n	8006878 <_dtoa_r+0x240>
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	4b57      	ldr	r3, [pc, #348]	; (8006924 <_dtoa_r+0x2ec>)
 80067c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	ec51 0b19 	vmov	r0, r1, d9
 80067d2:	f7fa fa03 	bl	8000bdc <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d050      	beq.n	800687c <_dtoa_r+0x244>
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067e6:	1b5d      	subs	r5, r3, r5
 80067e8:	1e6b      	subs	r3, r5, #1
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	bf45      	ittet	mi
 80067ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80067f2:	9304      	strmi	r3, [sp, #16]
 80067f4:	2300      	movpl	r3, #0
 80067f6:	2300      	movmi	r3, #0
 80067f8:	bf4c      	ite	mi
 80067fa:	9305      	strmi	r3, [sp, #20]
 80067fc:	9304      	strpl	r3, [sp, #16]
 80067fe:	9b00      	ldr	r3, [sp, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db3d      	blt.n	8006880 <_dtoa_r+0x248>
 8006804:	9b05      	ldr	r3, [sp, #20]
 8006806:	9a00      	ldr	r2, [sp, #0]
 8006808:	920a      	str	r2, [sp, #40]	; 0x28
 800680a:	4413      	add	r3, r2
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	2300      	movs	r3, #0
 8006810:	9307      	str	r3, [sp, #28]
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	2b09      	cmp	r3, #9
 8006816:	f200 8089 	bhi.w	800692c <_dtoa_r+0x2f4>
 800681a:	2b05      	cmp	r3, #5
 800681c:	bfc4      	itt	gt
 800681e:	3b04      	subgt	r3, #4
 8006820:	9306      	strgt	r3, [sp, #24]
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	f1a3 0302 	sub.w	r3, r3, #2
 8006828:	bfcc      	ite	gt
 800682a:	2500      	movgt	r5, #0
 800682c:	2501      	movle	r5, #1
 800682e:	2b03      	cmp	r3, #3
 8006830:	f200 8087 	bhi.w	8006942 <_dtoa_r+0x30a>
 8006834:	e8df f003 	tbb	[pc, r3]
 8006838:	59383a2d 	.word	0x59383a2d
 800683c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006840:	441d      	add	r5, r3
 8006842:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006846:	2b20      	cmp	r3, #32
 8006848:	bfc1      	itttt	gt
 800684a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800684e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006852:	fa0b f303 	lslgt.w	r3, fp, r3
 8006856:	fa26 f000 	lsrgt.w	r0, r6, r0
 800685a:	bfda      	itte	le
 800685c:	f1c3 0320 	rsble	r3, r3, #32
 8006860:	fa06 f003 	lslle.w	r0, r6, r3
 8006864:	4318      	orrgt	r0, r3
 8006866:	f7f9 fecd 	bl	8000604 <__aeabi_ui2d>
 800686a:	2301      	movs	r3, #1
 800686c:	4606      	mov	r6, r0
 800686e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006872:	3d01      	subs	r5, #1
 8006874:	930e      	str	r3, [sp, #56]	; 0x38
 8006876:	e76a      	b.n	800674e <_dtoa_r+0x116>
 8006878:	2301      	movs	r3, #1
 800687a:	e7b2      	b.n	80067e2 <_dtoa_r+0x1aa>
 800687c:	900b      	str	r0, [sp, #44]	; 0x2c
 800687e:	e7b1      	b.n	80067e4 <_dtoa_r+0x1ac>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	9a00      	ldr	r2, [sp, #0]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	4253      	negs	r3, r2
 800688a:	9307      	str	r3, [sp, #28]
 800688c:	2300      	movs	r3, #0
 800688e:	930a      	str	r3, [sp, #40]	; 0x28
 8006890:	e7bf      	b.n	8006812 <_dtoa_r+0x1da>
 8006892:	2300      	movs	r3, #0
 8006894:	9308      	str	r3, [sp, #32]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc55      	bgt.n	8006948 <_dtoa_r+0x310>
 800689c:	2301      	movs	r3, #1
 800689e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068a2:	461a      	mov	r2, r3
 80068a4:	9209      	str	r2, [sp, #36]	; 0x24
 80068a6:	e00c      	b.n	80068c2 <_dtoa_r+0x28a>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7f3      	b.n	8006894 <_dtoa_r+0x25c>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	9308      	str	r3, [sp, #32]
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	3301      	adds	r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	9303      	str	r3, [sp, #12]
 80068be:	bfb8      	it	lt
 80068c0:	2301      	movlt	r3, #1
 80068c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068c4:	2200      	movs	r2, #0
 80068c6:	6042      	str	r2, [r0, #4]
 80068c8:	2204      	movs	r2, #4
 80068ca:	f102 0614 	add.w	r6, r2, #20
 80068ce:	429e      	cmp	r6, r3
 80068d0:	6841      	ldr	r1, [r0, #4]
 80068d2:	d93d      	bls.n	8006950 <_dtoa_r+0x318>
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fdb1 	bl	800743c <_Balloc>
 80068da:	9001      	str	r0, [sp, #4]
 80068dc:	2800      	cmp	r0, #0
 80068de:	d13b      	bne.n	8006958 <_dtoa_r+0x320>
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <_dtoa_r+0x2f0>)
 80068e2:	4602      	mov	r2, r0
 80068e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068e8:	e6c0      	b.n	800666c <_dtoa_r+0x34>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e7df      	b.n	80068ae <_dtoa_r+0x276>
 80068ee:	bf00      	nop
 80068f0:	636f4361 	.word	0x636f4361
 80068f4:	3fd287a7 	.word	0x3fd287a7
 80068f8:	8b60c8b3 	.word	0x8b60c8b3
 80068fc:	3fc68a28 	.word	0x3fc68a28
 8006900:	509f79fb 	.word	0x509f79fb
 8006904:	3fd34413 	.word	0x3fd34413
 8006908:	0801bba5 	.word	0x0801bba5
 800690c:	0801bbbc 	.word	0x0801bbbc
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	0801bba1 	.word	0x0801bba1
 8006918:	0801bb98 	.word	0x0801bb98
 800691c:	0801bb75 	.word	0x0801bb75
 8006920:	3ff80000 	.word	0x3ff80000
 8006924:	0801bd10 	.word	0x0801bd10
 8006928:	0801bc17 	.word	0x0801bc17
 800692c:	2501      	movs	r5, #1
 800692e:	2300      	movs	r3, #0
 8006930:	9306      	str	r3, [sp, #24]
 8006932:	9508      	str	r5, [sp, #32]
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800693c:	2200      	movs	r2, #0
 800693e:	2312      	movs	r3, #18
 8006940:	e7b0      	b.n	80068a4 <_dtoa_r+0x26c>
 8006942:	2301      	movs	r3, #1
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	e7f5      	b.n	8006934 <_dtoa_r+0x2fc>
 8006948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800694e:	e7b8      	b.n	80068c2 <_dtoa_r+0x28a>
 8006950:	3101      	adds	r1, #1
 8006952:	6041      	str	r1, [r0, #4]
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	e7b8      	b.n	80068ca <_dtoa_r+0x292>
 8006958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695a:	9a01      	ldr	r2, [sp, #4]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	2b0e      	cmp	r3, #14
 8006962:	f200 809d 	bhi.w	8006aa0 <_dtoa_r+0x468>
 8006966:	2d00      	cmp	r5, #0
 8006968:	f000 809a 	beq.w	8006aa0 <_dtoa_r+0x468>
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dd32      	ble.n	80069d8 <_dtoa_r+0x3a0>
 8006972:	4ab7      	ldr	r2, [pc, #732]	; (8006c50 <_dtoa_r+0x618>)
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800697c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006980:	9b00      	ldr	r3, [sp, #0]
 8006982:	05d8      	lsls	r0, r3, #23
 8006984:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006988:	d516      	bpl.n	80069b8 <_dtoa_r+0x380>
 800698a:	4bb2      	ldr	r3, [pc, #712]	; (8006c54 <_dtoa_r+0x61c>)
 800698c:	ec51 0b19 	vmov	r0, r1, d9
 8006990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006994:	f7f9 ffda 	bl	800094c <__aeabi_ddiv>
 8006998:	f007 070f 	and.w	r7, r7, #15
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	2503      	movs	r5, #3
 80069a2:	4eac      	ldr	r6, [pc, #688]	; (8006c54 <_dtoa_r+0x61c>)
 80069a4:	b957      	cbnz	r7, 80069bc <_dtoa_r+0x384>
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	4650      	mov	r0, sl
 80069ac:	4659      	mov	r1, fp
 80069ae:	f7f9 ffcd 	bl	800094c <__aeabi_ddiv>
 80069b2:	4682      	mov	sl, r0
 80069b4:	468b      	mov	fp, r1
 80069b6:	e028      	b.n	8006a0a <_dtoa_r+0x3d2>
 80069b8:	2502      	movs	r5, #2
 80069ba:	e7f2      	b.n	80069a2 <_dtoa_r+0x36a>
 80069bc:	07f9      	lsls	r1, r7, #31
 80069be:	d508      	bpl.n	80069d2 <_dtoa_r+0x39a>
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069c8:	f7f9 fe96 	bl	80006f8 <__aeabi_dmul>
 80069cc:	3501      	adds	r5, #1
 80069ce:	4680      	mov	r8, r0
 80069d0:	4689      	mov	r9, r1
 80069d2:	107f      	asrs	r7, r7, #1
 80069d4:	3608      	adds	r6, #8
 80069d6:	e7e5      	b.n	80069a4 <_dtoa_r+0x36c>
 80069d8:	f000 809b 	beq.w	8006b12 <_dtoa_r+0x4da>
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	4f9d      	ldr	r7, [pc, #628]	; (8006c54 <_dtoa_r+0x61c>)
 80069e0:	425e      	negs	r6, r3
 80069e2:	4b9b      	ldr	r3, [pc, #620]	; (8006c50 <_dtoa_r+0x618>)
 80069e4:	f006 020f 	and.w	r2, r6, #15
 80069e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	ec51 0b19 	vmov	r0, r1, d9
 80069f4:	f7f9 fe80 	bl	80006f8 <__aeabi_dmul>
 80069f8:	1136      	asrs	r6, r6, #4
 80069fa:	4682      	mov	sl, r0
 80069fc:	468b      	mov	fp, r1
 80069fe:	2300      	movs	r3, #0
 8006a00:	2502      	movs	r5, #2
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	d17a      	bne.n	8006afc <_dtoa_r+0x4c4>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1d3      	bne.n	80069b2 <_dtoa_r+0x37a>
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8082 	beq.w	8006b16 <_dtoa_r+0x4de>
 8006a12:	4b91      	ldr	r3, [pc, #580]	; (8006c58 <_dtoa_r+0x620>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	4650      	mov	r0, sl
 8006a18:	4659      	mov	r1, fp
 8006a1a:	f7fa f8df 	bl	8000bdc <__aeabi_dcmplt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d079      	beq.n	8006b16 <_dtoa_r+0x4de>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d076      	beq.n	8006b16 <_dtoa_r+0x4de>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd36      	ble.n	8006a9c <_dtoa_r+0x464>
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	1e5f      	subs	r7, r3, #1
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b88      	ldr	r3, [pc, #544]	; (8006c5c <_dtoa_r+0x624>)
 8006a3a:	f7f9 fe5d 	bl	80006f8 <__aeabi_dmul>
 8006a3e:	9e02      	ldr	r6, [sp, #8]
 8006a40:	4682      	mov	sl, r0
 8006a42:	468b      	mov	fp, r1
 8006a44:	3501      	adds	r5, #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7f9 fdec 	bl	8000624 <__aeabi_i2d>
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	465b      	mov	r3, fp
 8006a50:	f7f9 fe52 	bl	80006f8 <__aeabi_dmul>
 8006a54:	4b82      	ldr	r3, [pc, #520]	; (8006c60 <_dtoa_r+0x628>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7f9 fc98 	bl	800038c <__adddf3>
 8006a5c:	46d0      	mov	r8, sl
 8006a5e:	46d9      	mov	r9, fp
 8006a60:	4682      	mov	sl, r0
 8006a62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d158      	bne.n	8006b1c <_dtoa_r+0x4e4>
 8006a6a:	4b7e      	ldr	r3, [pc, #504]	; (8006c64 <_dtoa_r+0x62c>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7f9 fc89 	bl	8000388 <__aeabi_dsub>
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	f7fa f8cb 	bl	8000c18 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 8295 	bne.w	8006fb2 <_dtoa_r+0x97a>
 8006a88:	4652      	mov	r2, sl
 8006a8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7fa f8a3 	bl	8000bdc <__aeabi_dcmplt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 8289 	bne.w	8006fae <_dtoa_r+0x976>
 8006a9c:	ec5b ab19 	vmov	sl, fp, d9
 8006aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f2c0 8148 	blt.w	8006d38 <_dtoa_r+0x700>
 8006aa8:	9a00      	ldr	r2, [sp, #0]
 8006aaa:	2a0e      	cmp	r2, #14
 8006aac:	f300 8144 	bgt.w	8006d38 <_dtoa_r+0x700>
 8006ab0:	4b67      	ldr	r3, [pc, #412]	; (8006c50 <_dtoa_r+0x618>)
 8006ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f280 80d5 	bge.w	8006c6c <_dtoa_r+0x634>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f300 80d1 	bgt.w	8006c6c <_dtoa_r+0x634>
 8006aca:	f040 826f 	bne.w	8006fac <_dtoa_r+0x974>
 8006ace:	4b65      	ldr	r3, [pc, #404]	; (8006c64 <_dtoa_r+0x62c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fe0f 	bl	80006f8 <__aeabi_dmul>
 8006ada:	4652      	mov	r2, sl
 8006adc:	465b      	mov	r3, fp
 8006ade:	f7fa f891 	bl	8000c04 <__aeabi_dcmpge>
 8006ae2:	9e03      	ldr	r6, [sp, #12]
 8006ae4:	4637      	mov	r7, r6
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8245 	bne.w	8006f76 <_dtoa_r+0x93e>
 8006aec:	9d01      	ldr	r5, [sp, #4]
 8006aee:	2331      	movs	r3, #49	; 0x31
 8006af0:	f805 3b01 	strb.w	r3, [r5], #1
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	e240      	b.n	8006f7e <_dtoa_r+0x946>
 8006afc:	07f2      	lsls	r2, r6, #31
 8006afe:	d505      	bpl.n	8006b0c <_dtoa_r+0x4d4>
 8006b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b04:	f7f9 fdf8 	bl	80006f8 <__aeabi_dmul>
 8006b08:	3501      	adds	r5, #1
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	1076      	asrs	r6, r6, #1
 8006b0e:	3708      	adds	r7, #8
 8006b10:	e777      	b.n	8006a02 <_dtoa_r+0x3ca>
 8006b12:	2502      	movs	r5, #2
 8006b14:	e779      	b.n	8006a0a <_dtoa_r+0x3d2>
 8006b16:	9f00      	ldr	r7, [sp, #0]
 8006b18:	9e03      	ldr	r6, [sp, #12]
 8006b1a:	e794      	b.n	8006a46 <_dtoa_r+0x40e>
 8006b1c:	9901      	ldr	r1, [sp, #4]
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <_dtoa_r+0x618>)
 8006b20:	4431      	add	r1, r6
 8006b22:	910d      	str	r1, [sp, #52]	; 0x34
 8006b24:	9908      	ldr	r1, [sp, #32]
 8006b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d043      	beq.n	8006bba <_dtoa_r+0x582>
 8006b32:	494d      	ldr	r1, [pc, #308]	; (8006c68 <_dtoa_r+0x630>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7f9 ff09 	bl	800094c <__aeabi_ddiv>
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	465b      	mov	r3, fp
 8006b3e:	f7f9 fc23 	bl	8000388 <__aeabi_dsub>
 8006b42:	9d01      	ldr	r5, [sp, #4]
 8006b44:	4682      	mov	sl, r0
 8006b46:	468b      	mov	fp, r1
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7fa f884 	bl	8000c58 <__aeabi_d2iz>
 8006b50:	4606      	mov	r6, r0
 8006b52:	f7f9 fd67 	bl	8000624 <__aeabi_i2d>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fc13 	bl	8000388 <__aeabi_dsub>
 8006b62:	3630      	adds	r6, #48	; 0x30
 8006b64:	f805 6b01 	strb.w	r6, [r5], #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	465b      	mov	r3, fp
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	f7fa f834 	bl	8000bdc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d163      	bne.n	8006c40 <_dtoa_r+0x608>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4936      	ldr	r1, [pc, #216]	; (8006c58 <_dtoa_r+0x620>)
 8006b7e:	2000      	movs	r0, #0
 8006b80:	f7f9 fc02 	bl	8000388 <__aeabi_dsub>
 8006b84:	4652      	mov	r2, sl
 8006b86:	465b      	mov	r3, fp
 8006b88:	f7fa f828 	bl	8000bdc <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 80b5 	bne.w	8006cfc <_dtoa_r+0x6c4>
 8006b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b94:	429d      	cmp	r5, r3
 8006b96:	d081      	beq.n	8006a9c <_dtoa_r+0x464>
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <_dtoa_r+0x624>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	4659      	mov	r1, fp
 8006ba0:	f7f9 fdaa 	bl	80006f8 <__aeabi_dmul>
 8006ba4:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <_dtoa_r+0x624>)
 8006ba6:	4682      	mov	sl, r0
 8006ba8:	468b      	mov	fp, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f7f9 fda2 	bl	80006f8 <__aeabi_dmul>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	e7c6      	b.n	8006b48 <_dtoa_r+0x510>
 8006bba:	4650      	mov	r0, sl
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	f7f9 fd9b 	bl	80006f8 <__aeabi_dmul>
 8006bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc4:	9d01      	ldr	r5, [sp, #4]
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	4682      	mov	sl, r0
 8006bca:	468b      	mov	fp, r1
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4640      	mov	r0, r8
 8006bd0:	f7fa f842 	bl	8000c58 <__aeabi_d2iz>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	f7f9 fd25 	bl	8000624 <__aeabi_i2d>
 8006bda:	3630      	adds	r6, #48	; 0x30
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4640      	mov	r0, r8
 8006be2:	4649      	mov	r1, r9
 8006be4:	f7f9 fbd0 	bl	8000388 <__aeabi_dsub>
 8006be8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	d124      	bne.n	8006c44 <_dtoa_r+0x60c>
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <_dtoa_r+0x630>)
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	4659      	mov	r1, fp
 8006c00:	f7f9 fbc4 	bl	800038c <__adddf3>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7fa f804 	bl	8000c18 <__aeabi_dcmpgt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d173      	bne.n	8006cfc <_dtoa_r+0x6c4>
 8006c14:	4652      	mov	r2, sl
 8006c16:	465b      	mov	r3, fp
 8006c18:	4913      	ldr	r1, [pc, #76]	; (8006c68 <_dtoa_r+0x630>)
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f7f9 fbb4 	bl	8000388 <__aeabi_dsub>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 ffd8 	bl	8000bdc <__aeabi_dcmplt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f43f af35 	beq.w	8006a9c <_dtoa_r+0x464>
 8006c32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c34:	1e6b      	subs	r3, r5, #1
 8006c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3c:	2b30      	cmp	r3, #48	; 0x30
 8006c3e:	d0f8      	beq.n	8006c32 <_dtoa_r+0x5fa>
 8006c40:	9700      	str	r7, [sp, #0]
 8006c42:	e049      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006c44:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <_dtoa_r+0x624>)
 8006c46:	f7f9 fd57 	bl	80006f8 <__aeabi_dmul>
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	e7bd      	b.n	8006bcc <_dtoa_r+0x594>
 8006c50:	0801bd10 	.word	0x0801bd10
 8006c54:	0801bce8 	.word	0x0801bce8
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	40240000 	.word	0x40240000
 8006c60:	401c0000 	.word	0x401c0000
 8006c64:	40140000 	.word	0x40140000
 8006c68:	3fe00000 	.word	0x3fe00000
 8006c6c:	9d01      	ldr	r5, [sp, #4]
 8006c6e:	4656      	mov	r6, sl
 8006c70:	465f      	mov	r7, fp
 8006c72:	4642      	mov	r2, r8
 8006c74:	464b      	mov	r3, r9
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fe67 	bl	800094c <__aeabi_ddiv>
 8006c7e:	f7f9 ffeb 	bl	8000c58 <__aeabi_d2iz>
 8006c82:	4682      	mov	sl, r0
 8006c84:	f7f9 fcce 	bl	8000624 <__aeabi_i2d>
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	f7f9 fd34 	bl	80006f8 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c9c:	f7f9 fb74 	bl	8000388 <__aeabi_dsub>
 8006ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ca4:	9e01      	ldr	r6, [sp, #4]
 8006ca6:	9f03      	ldr	r7, [sp, #12]
 8006ca8:	1bae      	subs	r6, r5, r6
 8006caa:	42b7      	cmp	r7, r6
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	d135      	bne.n	8006d1e <_dtoa_r+0x6e6>
 8006cb2:	f7f9 fb6b 	bl	800038c <__adddf3>
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	f7f9 ffab 	bl	8000c18 <__aeabi_dcmpgt>
 8006cc2:	b9d0      	cbnz	r0, 8006cfa <_dtoa_r+0x6c2>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 ff7c 	bl	8000bc8 <__aeabi_dcmpeq>
 8006cd0:	b110      	cbz	r0, 8006cd8 <_dtoa_r+0x6a0>
 8006cd2:	f01a 0f01 	tst.w	sl, #1
 8006cd6:	d110      	bne.n	8006cfa <_dtoa_r+0x6c2>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	f000 fbed 	bl	80074bc <_Bfree>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9800      	ldr	r0, [sp, #0]
 8006ce6:	702b      	strb	r3, [r5, #0]
 8006ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cea:	3001      	adds	r0, #1
 8006cec:	6018      	str	r0, [r3, #0]
 8006cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f43f acf1 	beq.w	80066d8 <_dtoa_r+0xa0>
 8006cf6:	601d      	str	r5, [r3, #0]
 8006cf8:	e4ee      	b.n	80066d8 <_dtoa_r+0xa0>
 8006cfa:	9f00      	ldr	r7, [sp, #0]
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	461d      	mov	r5, r3
 8006d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d04:	2a39      	cmp	r2, #57	; 0x39
 8006d06:	d106      	bne.n	8006d16 <_dtoa_r+0x6de>
 8006d08:	9a01      	ldr	r2, [sp, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d1f7      	bne.n	8006cfe <_dtoa_r+0x6c6>
 8006d0e:	9901      	ldr	r1, [sp, #4]
 8006d10:	2230      	movs	r2, #48	; 0x30
 8006d12:	3701      	adds	r7, #1
 8006d14:	700a      	strb	r2, [r1, #0]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	3201      	adds	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e790      	b.n	8006c40 <_dtoa_r+0x608>
 8006d1e:	4ba6      	ldr	r3, [pc, #664]	; (8006fb8 <_dtoa_r+0x980>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	f7f9 fce9 	bl	80006f8 <__aeabi_dmul>
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460f      	mov	r7, r1
 8006d2e:	f7f9 ff4b 	bl	8000bc8 <__aeabi_dcmpeq>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d09d      	beq.n	8006c72 <_dtoa_r+0x63a>
 8006d36:	e7cf      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006d38:	9a08      	ldr	r2, [sp, #32]
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	f000 80d7 	beq.w	8006eee <_dtoa_r+0x8b6>
 8006d40:	9a06      	ldr	r2, [sp, #24]
 8006d42:	2a01      	cmp	r2, #1
 8006d44:	f300 80ba 	bgt.w	8006ebc <_dtoa_r+0x884>
 8006d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f000 80b2 	beq.w	8006eb4 <_dtoa_r+0x87c>
 8006d50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d54:	9e07      	ldr	r6, [sp, #28]
 8006d56:	9d04      	ldr	r5, [sp, #16]
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	9204      	str	r2, [sp, #16]
 8006d5e:	9a05      	ldr	r2, [sp, #20]
 8006d60:	2101      	movs	r1, #1
 8006d62:	441a      	add	r2, r3
 8006d64:	4620      	mov	r0, r4
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	f000 fc60 	bl	800762c <__i2b>
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	dd0c      	ble.n	8006d8c <_dtoa_r+0x754>
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd09      	ble.n	8006d8c <_dtoa_r+0x754>
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	9a04      	ldr	r2, [sp, #16]
 8006d7c:	bfa8      	it	ge
 8006d7e:	462b      	movge	r3, r5
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	9204      	str	r2, [sp, #16]
 8006d84:	9a05      	ldr	r2, [sp, #20]
 8006d86:	1aed      	subs	r5, r5, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	b31b      	cbz	r3, 8006dd8 <_dtoa_r+0x7a0>
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80af 	beq.w	8006ef6 <_dtoa_r+0x8be>
 8006d98:	2e00      	cmp	r6, #0
 8006d9a:	dd13      	ble.n	8006dc4 <_dtoa_r+0x78c>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fd03 	bl	80077ac <__pow5mult>
 8006da6:	ee18 2a10 	vmov	r2, s16
 8006daa:	4601      	mov	r1, r0
 8006dac:	4607      	mov	r7, r0
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 fc52 	bl	8007658 <__multiply>
 8006db4:	ee18 1a10 	vmov	r1, s16
 8006db8:	4680      	mov	r8, r0
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fb7e 	bl	80074bc <_Bfree>
 8006dc0:	ee08 8a10 	vmov	s16, r8
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	1b9a      	subs	r2, r3, r6
 8006dc8:	d006      	beq.n	8006dd8 <_dtoa_r+0x7a0>
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fcec 	bl	80077ac <__pow5mult>
 8006dd4:	ee08 0a10 	vmov	s16, r0
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fc26 	bl	800762c <__i2b>
 8006de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	4606      	mov	r6, r0
 8006de6:	f340 8088 	ble.w	8006efa <_dtoa_r+0x8c2>
 8006dea:	461a      	mov	r2, r3
 8006dec:	4601      	mov	r1, r0
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fcdc 	bl	80077ac <__pow5mult>
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	4606      	mov	r6, r0
 8006dfa:	f340 8081 	ble.w	8006f00 <_dtoa_r+0x8c8>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	6933      	ldr	r3, [r6, #16]
 8006e04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e08:	6918      	ldr	r0, [r3, #16]
 8006e0a:	f000 fbbf 	bl	800758c <__hi0bits>
 8006e0e:	f1c0 0020 	rsb	r0, r0, #32
 8006e12:	9b05      	ldr	r3, [sp, #20]
 8006e14:	4418      	add	r0, r3
 8006e16:	f010 001f 	ands.w	r0, r0, #31
 8006e1a:	f000 8092 	beq.w	8006f42 <_dtoa_r+0x90a>
 8006e1e:	f1c0 0320 	rsb	r3, r0, #32
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	f340 808a 	ble.w	8006f3c <_dtoa_r+0x904>
 8006e28:	f1c0 001c 	rsb	r0, r0, #28
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	4403      	add	r3, r0
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	4403      	add	r3, r0
 8006e36:	4405      	add	r5, r0
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd07      	ble.n	8006e50 <_dtoa_r+0x818>
 8006e40:	ee18 1a10 	vmov	r1, s16
 8006e44:	461a      	mov	r2, r3
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 fd0a 	bl	8007860 <__lshift>
 8006e4c:	ee08 0a10 	vmov	s16, r0
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x82a>
 8006e56:	4631      	mov	r1, r6
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fd00 	bl	8007860 <__lshift>
 8006e60:	4606      	mov	r6, r0
 8006e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d06e      	beq.n	8006f46 <_dtoa_r+0x90e>
 8006e68:	ee18 0a10 	vmov	r0, s16
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	f000 fd67 	bl	8007940 <__mcmp>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	da67      	bge.n	8006f46 <_dtoa_r+0x90e>
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	ee18 1a10 	vmov	r1, s16
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	220a      	movs	r2, #10
 8006e82:	2300      	movs	r3, #0
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fb3b 	bl	8007500 <__multadd>
 8006e8a:	9b08      	ldr	r3, [sp, #32]
 8006e8c:	ee08 0a10 	vmov	s16, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 81b1 	beq.w	80071f8 <_dtoa_r+0xbc0>
 8006e96:	2300      	movs	r3, #0
 8006e98:	4639      	mov	r1, r7
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fb2f 	bl	8007500 <__multadd>
 8006ea2:	9b02      	ldr	r3, [sp, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f300 808e 	bgt.w	8006fc8 <_dtoa_r+0x990>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc51      	bgt.n	8006f56 <_dtoa_r+0x91e>
 8006eb2:	e089      	b.n	8006fc8 <_dtoa_r+0x990>
 8006eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eba:	e74b      	b.n	8006d54 <_dtoa_r+0x71c>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1e5e      	subs	r6, r3, #1
 8006ec0:	9b07      	ldr	r3, [sp, #28]
 8006ec2:	42b3      	cmp	r3, r6
 8006ec4:	bfbf      	itttt	lt
 8006ec6:	9b07      	ldrlt	r3, [sp, #28]
 8006ec8:	9607      	strlt	r6, [sp, #28]
 8006eca:	1af2      	sublt	r2, r6, r3
 8006ecc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ece:	bfb6      	itet	lt
 8006ed0:	189b      	addlt	r3, r3, r2
 8006ed2:	1b9e      	subge	r6, r3, r6
 8006ed4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	bfb8      	it	lt
 8006eda:	2600      	movlt	r6, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb7      	itett	lt
 8006ee0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ee4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ee8:	1a9d      	sublt	r5, r3, r2
 8006eea:	2300      	movlt	r3, #0
 8006eec:	e734      	b.n	8006d58 <_dtoa_r+0x720>
 8006eee:	9e07      	ldr	r6, [sp, #28]
 8006ef0:	9d04      	ldr	r5, [sp, #16]
 8006ef2:	9f08      	ldr	r7, [sp, #32]
 8006ef4:	e73b      	b.n	8006d6e <_dtoa_r+0x736>
 8006ef6:	9a07      	ldr	r2, [sp, #28]
 8006ef8:	e767      	b.n	8006dca <_dtoa_r+0x792>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dc18      	bgt.n	8006f32 <_dtoa_r+0x8fa>
 8006f00:	f1ba 0f00 	cmp.w	sl, #0
 8006f04:	d115      	bne.n	8006f32 <_dtoa_r+0x8fa>
 8006f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f0a:	b993      	cbnz	r3, 8006f32 <_dtoa_r+0x8fa>
 8006f0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f10:	0d1b      	lsrs	r3, r3, #20
 8006f12:	051b      	lsls	r3, r3, #20
 8006f14:	b183      	cbz	r3, 8006f38 <_dtoa_r+0x900>
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	9b05      	ldr	r3, [sp, #20]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	f04f 0801 	mov.w	r8, #1
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f af6a 	bne.w	8006e02 <_dtoa_r+0x7ca>
 8006f2e:	2001      	movs	r0, #1
 8006f30:	e76f      	b.n	8006e12 <_dtoa_r+0x7da>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	e7f6      	b.n	8006f26 <_dtoa_r+0x8ee>
 8006f38:	4698      	mov	r8, r3
 8006f3a:	e7f4      	b.n	8006f26 <_dtoa_r+0x8ee>
 8006f3c:	f43f af7d 	beq.w	8006e3a <_dtoa_r+0x802>
 8006f40:	4618      	mov	r0, r3
 8006f42:	301c      	adds	r0, #28
 8006f44:	e772      	b.n	8006e2c <_dtoa_r+0x7f4>
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc37      	bgt.n	8006fbc <_dtoa_r+0x984>
 8006f4c:	9b06      	ldr	r3, [sp, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	dd34      	ble.n	8006fbc <_dtoa_r+0x984>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	b96b      	cbnz	r3, 8006f76 <_dtoa_r+0x93e>
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 face 	bl	8007500 <__multadd>
 8006f64:	4601      	mov	r1, r0
 8006f66:	4606      	mov	r6, r0
 8006f68:	ee18 0a10 	vmov	r0, s16
 8006f6c:	f000 fce8 	bl	8007940 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f73f adbb 	bgt.w	8006aec <_dtoa_r+0x4b4>
 8006f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f78:	9d01      	ldr	r5, [sp, #4]
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	4631      	mov	r1, r6
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fa99 	bl	80074bc <_Bfree>
 8006f8a:	2f00      	cmp	r7, #0
 8006f8c:	f43f aea4 	beq.w	8006cd8 <_dtoa_r+0x6a0>
 8006f90:	f1b8 0f00 	cmp.w	r8, #0
 8006f94:	d005      	beq.n	8006fa2 <_dtoa_r+0x96a>
 8006f96:	45b8      	cmp	r8, r7
 8006f98:	d003      	beq.n	8006fa2 <_dtoa_r+0x96a>
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fa8d 	bl	80074bc <_Bfree>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fa89 	bl	80074bc <_Bfree>
 8006faa:	e695      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006fac:	2600      	movs	r6, #0
 8006fae:	4637      	mov	r7, r6
 8006fb0:	e7e1      	b.n	8006f76 <_dtoa_r+0x93e>
 8006fb2:	9700      	str	r7, [sp, #0]
 8006fb4:	4637      	mov	r7, r6
 8006fb6:	e599      	b.n	8006aec <_dtoa_r+0x4b4>
 8006fb8:	40240000 	.word	0x40240000
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80ca 	beq.w	8007158 <_dtoa_r+0xb20>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	9302      	str	r3, [sp, #8]
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	dd05      	ble.n	8006fd8 <_dtoa_r+0x9a0>
 8006fcc:	4639      	mov	r1, r7
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fc45 	bl	8007860 <__lshift>
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	d05b      	beq.n	8007096 <_dtoa_r+0xa5e>
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fa2b 	bl	800743c <_Balloc>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <_dtoa_r+0x9be>
 8006fea:	4b87      	ldr	r3, [pc, #540]	; (8007208 <_dtoa_r+0xbd0>)
 8006fec:	4602      	mov	r2, r0
 8006fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ff2:	f7ff bb3b 	b.w	800666c <_dtoa_r+0x34>
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	3202      	adds	r2, #2
 8006ffa:	0092      	lsls	r2, r2, #2
 8006ffc:	f107 010c 	add.w	r1, r7, #12
 8007000:	300c      	adds	r0, #12
 8007002:	f000 fa0d 	bl	8007420 <memcpy>
 8007006:	2201      	movs	r2, #1
 8007008:	4629      	mov	r1, r5
 800700a:	4620      	mov	r0, r4
 800700c:	f000 fc28 	bl	8007860 <__lshift>
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	f103 0901 	add.w	r9, r3, #1
 8007016:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800701a:	4413      	add	r3, r2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	f00a 0301 	and.w	r3, sl, #1
 8007022:	46b8      	mov	r8, r7
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	4607      	mov	r7, r0
 8007028:	4631      	mov	r1, r6
 800702a:	ee18 0a10 	vmov	r0, s16
 800702e:	f7ff fa75 	bl	800651c <quorem>
 8007032:	4641      	mov	r1, r8
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800703a:	ee18 0a10 	vmov	r0, s16
 800703e:	f000 fc7f 	bl	8007940 <__mcmp>
 8007042:	463a      	mov	r2, r7
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	4631      	mov	r1, r6
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fc95 	bl	8007978 <__mdiff>
 800704e:	68c2      	ldr	r2, [r0, #12]
 8007050:	f109 3bff 	add.w	fp, r9, #4294967295
 8007054:	4605      	mov	r5, r0
 8007056:	bb02      	cbnz	r2, 800709a <_dtoa_r+0xa62>
 8007058:	4601      	mov	r1, r0
 800705a:	ee18 0a10 	vmov	r0, s16
 800705e:	f000 fc6f 	bl	8007940 <__mcmp>
 8007062:	4602      	mov	r2, r0
 8007064:	4629      	mov	r1, r5
 8007066:	4620      	mov	r0, r4
 8007068:	9207      	str	r2, [sp, #28]
 800706a:	f000 fa27 	bl	80074bc <_Bfree>
 800706e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007072:	ea43 0102 	orr.w	r1, r3, r2
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	430b      	orrs	r3, r1
 800707a:	464d      	mov	r5, r9
 800707c:	d10f      	bne.n	800709e <_dtoa_r+0xa66>
 800707e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007082:	d02a      	beq.n	80070da <_dtoa_r+0xaa2>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	dd02      	ble.n	8007090 <_dtoa_r+0xa58>
 800708a:	9b02      	ldr	r3, [sp, #8]
 800708c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007090:	f88b a000 	strb.w	sl, [fp]
 8007094:	e775      	b.n	8006f82 <_dtoa_r+0x94a>
 8007096:	4638      	mov	r0, r7
 8007098:	e7ba      	b.n	8007010 <_dtoa_r+0x9d8>
 800709a:	2201      	movs	r2, #1
 800709c:	e7e2      	b.n	8007064 <_dtoa_r+0xa2c>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	db04      	blt.n	80070ae <_dtoa_r+0xa76>
 80070a4:	9906      	ldr	r1, [sp, #24]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	9904      	ldr	r1, [sp, #16]
 80070aa:	430b      	orrs	r3, r1
 80070ac:	d122      	bne.n	80070f4 <_dtoa_r+0xabc>
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	ddee      	ble.n	8007090 <_dtoa_r+0xa58>
 80070b2:	ee18 1a10 	vmov	r1, s16
 80070b6:	2201      	movs	r2, #1
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fbd1 	bl	8007860 <__lshift>
 80070be:	4631      	mov	r1, r6
 80070c0:	ee08 0a10 	vmov	s16, r0
 80070c4:	f000 fc3c 	bl	8007940 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dc03      	bgt.n	80070d4 <_dtoa_r+0xa9c>
 80070cc:	d1e0      	bne.n	8007090 <_dtoa_r+0xa58>
 80070ce:	f01a 0f01 	tst.w	sl, #1
 80070d2:	d0dd      	beq.n	8007090 <_dtoa_r+0xa58>
 80070d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070d8:	d1d7      	bne.n	800708a <_dtoa_r+0xa52>
 80070da:	2339      	movs	r3, #57	; 0x39
 80070dc:	f88b 3000 	strb.w	r3, [fp]
 80070e0:	462b      	mov	r3, r5
 80070e2:	461d      	mov	r5, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ea:	2a39      	cmp	r2, #57	; 0x39
 80070ec:	d071      	beq.n	80071d2 <_dtoa_r+0xb9a>
 80070ee:	3201      	adds	r2, #1
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e746      	b.n	8006f82 <_dtoa_r+0x94a>
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	dd07      	ble.n	8007108 <_dtoa_r+0xad0>
 80070f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070fc:	d0ed      	beq.n	80070da <_dtoa_r+0xaa2>
 80070fe:	f10a 0301 	add.w	r3, sl, #1
 8007102:	f88b 3000 	strb.w	r3, [fp]
 8007106:	e73c      	b.n	8006f82 <_dtoa_r+0x94a>
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800710e:	4599      	cmp	r9, r3
 8007110:	d047      	beq.n	80071a2 <_dtoa_r+0xb6a>
 8007112:	ee18 1a10 	vmov	r1, s16
 8007116:	2300      	movs	r3, #0
 8007118:	220a      	movs	r2, #10
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f9f0 	bl	8007500 <__multadd>
 8007120:	45b8      	cmp	r8, r7
 8007122:	ee08 0a10 	vmov	s16, r0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	f04f 020a 	mov.w	r2, #10
 800712e:	4641      	mov	r1, r8
 8007130:	4620      	mov	r0, r4
 8007132:	d106      	bne.n	8007142 <_dtoa_r+0xb0a>
 8007134:	f000 f9e4 	bl	8007500 <__multadd>
 8007138:	4680      	mov	r8, r0
 800713a:	4607      	mov	r7, r0
 800713c:	f109 0901 	add.w	r9, r9, #1
 8007140:	e772      	b.n	8007028 <_dtoa_r+0x9f0>
 8007142:	f000 f9dd 	bl	8007500 <__multadd>
 8007146:	4639      	mov	r1, r7
 8007148:	4680      	mov	r8, r0
 800714a:	2300      	movs	r3, #0
 800714c:	220a      	movs	r2, #10
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f9d6 	bl	8007500 <__multadd>
 8007154:	4607      	mov	r7, r0
 8007156:	e7f1      	b.n	800713c <_dtoa_r+0xb04>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	9d01      	ldr	r5, [sp, #4]
 800715e:	ee18 0a10 	vmov	r0, s16
 8007162:	4631      	mov	r1, r6
 8007164:	f7ff f9da 	bl	800651c <quorem>
 8007168:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	f805 ab01 	strb.w	sl, [r5], #1
 8007172:	1aea      	subs	r2, r5, r3
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	4293      	cmp	r3, r2
 8007178:	dd09      	ble.n	800718e <_dtoa_r+0xb56>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	2300      	movs	r3, #0
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f9bc 	bl	8007500 <__multadd>
 8007188:	ee08 0a10 	vmov	s16, r0
 800718c:	e7e7      	b.n	800715e <_dtoa_r+0xb26>
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfc8      	it	gt
 8007194:	461d      	movgt	r5, r3
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	bfd8      	it	le
 800719a:	2501      	movle	r5, #1
 800719c:	441d      	add	r5, r3
 800719e:	f04f 0800 	mov.w	r8, #0
 80071a2:	ee18 1a10 	vmov	r1, s16
 80071a6:	2201      	movs	r2, #1
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fb59 	bl	8007860 <__lshift>
 80071ae:	4631      	mov	r1, r6
 80071b0:	ee08 0a10 	vmov	s16, r0
 80071b4:	f000 fbc4 	bl	8007940 <__mcmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dc91      	bgt.n	80070e0 <_dtoa_r+0xaa8>
 80071bc:	d102      	bne.n	80071c4 <_dtoa_r+0xb8c>
 80071be:	f01a 0f01 	tst.w	sl, #1
 80071c2:	d18d      	bne.n	80070e0 <_dtoa_r+0xaa8>
 80071c4:	462b      	mov	r3, r5
 80071c6:	461d      	mov	r5, r3
 80071c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071cc:	2a30      	cmp	r2, #48	; 0x30
 80071ce:	d0fa      	beq.n	80071c6 <_dtoa_r+0xb8e>
 80071d0:	e6d7      	b.n	8006f82 <_dtoa_r+0x94a>
 80071d2:	9a01      	ldr	r2, [sp, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d184      	bne.n	80070e2 <_dtoa_r+0xaaa>
 80071d8:	9b00      	ldr	r3, [sp, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	7013      	strb	r3, [r2, #0]
 80071e2:	e6ce      	b.n	8006f82 <_dtoa_r+0x94a>
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <_dtoa_r+0xbd4>)
 80071e6:	f7ff ba95 	b.w	8006714 <_dtoa_r+0xdc>
 80071ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f47f aa6e 	bne.w	80066ce <_dtoa_r+0x96>
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <_dtoa_r+0xbd8>)
 80071f4:	f7ff ba8e 	b.w	8006714 <_dtoa_r+0xdc>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dcae      	bgt.n	800715c <_dtoa_r+0xb24>
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f73f aea8 	bgt.w	8006f56 <_dtoa_r+0x91e>
 8007206:	e7a9      	b.n	800715c <_dtoa_r+0xb24>
 8007208:	0801bc17 	.word	0x0801bc17
 800720c:	0801bb74 	.word	0x0801bb74
 8007210:	0801bb98 	.word	0x0801bb98

08007214 <std>:
 8007214:	2300      	movs	r3, #0
 8007216:	b510      	push	{r4, lr}
 8007218:	4604      	mov	r4, r0
 800721a:	e9c0 3300 	strd	r3, r3, [r0]
 800721e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007222:	6083      	str	r3, [r0, #8]
 8007224:	8181      	strh	r1, [r0, #12]
 8007226:	6643      	str	r3, [r0, #100]	; 0x64
 8007228:	81c2      	strh	r2, [r0, #14]
 800722a:	6183      	str	r3, [r0, #24]
 800722c:	4619      	mov	r1, r3
 800722e:	2208      	movs	r2, #8
 8007230:	305c      	adds	r0, #92	; 0x5c
 8007232:	f7fe fce9 	bl	8005c08 <memset>
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <std+0x38>)
 8007238:	6263      	str	r3, [r4, #36]	; 0x24
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <std+0x3c>)
 800723c:	62a3      	str	r3, [r4, #40]	; 0x28
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <std+0x40>)
 8007240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <std+0x44>)
 8007244:	6224      	str	r4, [r4, #32]
 8007246:	6323      	str	r3, [r4, #48]	; 0x30
 8007248:	bd10      	pop	{r4, pc}
 800724a:	bf00      	nop
 800724c:	08008005 	.word	0x08008005
 8007250:	08008027 	.word	0x08008027
 8007254:	0800805f 	.word	0x0800805f
 8007258:	08008083 	.word	0x08008083

0800725c <_cleanup_r>:
 800725c:	4901      	ldr	r1, [pc, #4]	; (8007264 <_cleanup_r+0x8>)
 800725e:	f000 b8af 	b.w	80073c0 <_fwalk_reent>
 8007262:	bf00      	nop
 8007264:	08008399 	.word	0x08008399

08007268 <__sfmoreglue>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2268      	movs	r2, #104	; 0x68
 800726c:	1e4d      	subs	r5, r1, #1
 800726e:	4355      	muls	r5, r2
 8007270:	460e      	mov	r6, r1
 8007272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007276:	f000 fce7 	bl	8007c48 <_malloc_r>
 800727a:	4604      	mov	r4, r0
 800727c:	b140      	cbz	r0, 8007290 <__sfmoreglue+0x28>
 800727e:	2100      	movs	r1, #0
 8007280:	e9c0 1600 	strd	r1, r6, [r0]
 8007284:	300c      	adds	r0, #12
 8007286:	60a0      	str	r0, [r4, #8]
 8007288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800728c:	f7fe fcbc 	bl	8005c08 <memset>
 8007290:	4620      	mov	r0, r4
 8007292:	bd70      	pop	{r4, r5, r6, pc}

08007294 <__sfp_lock_acquire>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__sfp_lock_acquire+0x8>)
 8007296:	f000 b8b8 	b.w	800740a <__retarget_lock_acquire_recursive>
 800729a:	bf00      	nop
 800729c:	20006469 	.word	0x20006469

080072a0 <__sfp_lock_release>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__sfp_lock_release+0x8>)
 80072a2:	f000 b8b3 	b.w	800740c <__retarget_lock_release_recursive>
 80072a6:	bf00      	nop
 80072a8:	20006469 	.word	0x20006469

080072ac <__sinit_lock_acquire>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__sinit_lock_acquire+0x8>)
 80072ae:	f000 b8ac 	b.w	800740a <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	2000646a 	.word	0x2000646a

080072b8 <__sinit_lock_release>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__sinit_lock_release+0x8>)
 80072ba:	f000 b8a7 	b.w	800740c <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	2000646a 	.word	0x2000646a

080072c4 <__sinit>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	f7ff fff0 	bl	80072ac <__sinit_lock_acquire>
 80072cc:	69a3      	ldr	r3, [r4, #24]
 80072ce:	b11b      	cbz	r3, 80072d8 <__sinit+0x14>
 80072d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d4:	f7ff bff0 	b.w	80072b8 <__sinit_lock_release>
 80072d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072dc:	6523      	str	r3, [r4, #80]	; 0x50
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <__sinit+0x68>)
 80072e0:	4a13      	ldr	r2, [pc, #76]	; (8007330 <__sinit+0x6c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	bf04      	itt	eq
 80072ea:	2301      	moveq	r3, #1
 80072ec:	61a3      	streq	r3, [r4, #24]
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 f820 	bl	8007334 <__sfp>
 80072f4:	6060      	str	r0, [r4, #4]
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 f81c 	bl	8007334 <__sfp>
 80072fc:	60a0      	str	r0, [r4, #8]
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f818 	bl	8007334 <__sfp>
 8007304:	2200      	movs	r2, #0
 8007306:	60e0      	str	r0, [r4, #12]
 8007308:	2104      	movs	r1, #4
 800730a:	6860      	ldr	r0, [r4, #4]
 800730c:	f7ff ff82 	bl	8007214 <std>
 8007310:	68a0      	ldr	r0, [r4, #8]
 8007312:	2201      	movs	r2, #1
 8007314:	2109      	movs	r1, #9
 8007316:	f7ff ff7d 	bl	8007214 <std>
 800731a:	68e0      	ldr	r0, [r4, #12]
 800731c:	2202      	movs	r2, #2
 800731e:	2112      	movs	r1, #18
 8007320:	f7ff ff78 	bl	8007214 <std>
 8007324:	2301      	movs	r3, #1
 8007326:	61a3      	str	r3, [r4, #24]
 8007328:	e7d2      	b.n	80072d0 <__sinit+0xc>
 800732a:	bf00      	nop
 800732c:	0801bb60 	.word	0x0801bb60
 8007330:	0800725d 	.word	0x0800725d

08007334 <__sfp>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	4607      	mov	r7, r0
 8007338:	f7ff ffac 	bl	8007294 <__sfp_lock_acquire>
 800733c:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <__sfp+0x84>)
 800733e:	681e      	ldr	r6, [r3, #0]
 8007340:	69b3      	ldr	r3, [r6, #24]
 8007342:	b913      	cbnz	r3, 800734a <__sfp+0x16>
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff ffbd 	bl	80072c4 <__sinit>
 800734a:	3648      	adds	r6, #72	; 0x48
 800734c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	d503      	bpl.n	800735c <__sfp+0x28>
 8007354:	6833      	ldr	r3, [r6, #0]
 8007356:	b30b      	cbz	r3, 800739c <__sfp+0x68>
 8007358:	6836      	ldr	r6, [r6, #0]
 800735a:	e7f7      	b.n	800734c <__sfp+0x18>
 800735c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007360:	b9d5      	cbnz	r5, 8007398 <__sfp+0x64>
 8007362:	4b16      	ldr	r3, [pc, #88]	; (80073bc <__sfp+0x88>)
 8007364:	60e3      	str	r3, [r4, #12]
 8007366:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800736a:	6665      	str	r5, [r4, #100]	; 0x64
 800736c:	f000 f84c 	bl	8007408 <__retarget_lock_init_recursive>
 8007370:	f7ff ff96 	bl	80072a0 <__sfp_lock_release>
 8007374:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007378:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800737c:	6025      	str	r5, [r4, #0]
 800737e:	61a5      	str	r5, [r4, #24]
 8007380:	2208      	movs	r2, #8
 8007382:	4629      	mov	r1, r5
 8007384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007388:	f7fe fc3e 	bl	8005c08 <memset>
 800738c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007390:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007394:	4620      	mov	r0, r4
 8007396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007398:	3468      	adds	r4, #104	; 0x68
 800739a:	e7d9      	b.n	8007350 <__sfp+0x1c>
 800739c:	2104      	movs	r1, #4
 800739e:	4638      	mov	r0, r7
 80073a0:	f7ff ff62 	bl	8007268 <__sfmoreglue>
 80073a4:	4604      	mov	r4, r0
 80073a6:	6030      	str	r0, [r6, #0]
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d1d5      	bne.n	8007358 <__sfp+0x24>
 80073ac:	f7ff ff78 	bl	80072a0 <__sfp_lock_release>
 80073b0:	230c      	movs	r3, #12
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	e7ee      	b.n	8007394 <__sfp+0x60>
 80073b6:	bf00      	nop
 80073b8:	0801bb60 	.word	0x0801bb60
 80073bc:	ffff0001 	.word	0xffff0001

080073c0 <_fwalk_reent>:
 80073c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	4606      	mov	r6, r0
 80073c6:	4688      	mov	r8, r1
 80073c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073cc:	2700      	movs	r7, #0
 80073ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073d2:	f1b9 0901 	subs.w	r9, r9, #1
 80073d6:	d505      	bpl.n	80073e4 <_fwalk_reent+0x24>
 80073d8:	6824      	ldr	r4, [r4, #0]
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d1f7      	bne.n	80073ce <_fwalk_reent+0xe>
 80073de:	4638      	mov	r0, r7
 80073e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e4:	89ab      	ldrh	r3, [r5, #12]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d907      	bls.n	80073fa <_fwalk_reent+0x3a>
 80073ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ee:	3301      	adds	r3, #1
 80073f0:	d003      	beq.n	80073fa <_fwalk_reent+0x3a>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	47c0      	blx	r8
 80073f8:	4307      	orrs	r7, r0
 80073fa:	3568      	adds	r5, #104	; 0x68
 80073fc:	e7e9      	b.n	80073d2 <_fwalk_reent+0x12>
	...

08007400 <_localeconv_r>:
 8007400:	4800      	ldr	r0, [pc, #0]	; (8007404 <_localeconv_r+0x4>)
 8007402:	4770      	bx	lr
 8007404:	20000160 	.word	0x20000160

08007408 <__retarget_lock_init_recursive>:
 8007408:	4770      	bx	lr

0800740a <__retarget_lock_acquire_recursive>:
 800740a:	4770      	bx	lr

0800740c <__retarget_lock_release_recursive>:
 800740c:	4770      	bx	lr
	...

08007410 <malloc>:
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <malloc+0xc>)
 8007412:	4601      	mov	r1, r0
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f000 bc17 	b.w	8007c48 <_malloc_r>
 800741a:	bf00      	nop
 800741c:	2000000c 	.word	0x2000000c

08007420 <memcpy>:
 8007420:	440a      	add	r2, r1
 8007422:	4291      	cmp	r1, r2
 8007424:	f100 33ff 	add.w	r3, r0, #4294967295
 8007428:	d100      	bne.n	800742c <memcpy+0xc>
 800742a:	4770      	bx	lr
 800742c:	b510      	push	{r4, lr}
 800742e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007436:	4291      	cmp	r1, r2
 8007438:	d1f9      	bne.n	800742e <memcpy+0xe>
 800743a:	bd10      	pop	{r4, pc}

0800743c <_Balloc>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	b976      	cbnz	r6, 8007464 <_Balloc+0x28>
 8007446:	2010      	movs	r0, #16
 8007448:	f7ff ffe2 	bl	8007410 <malloc>
 800744c:	4602      	mov	r2, r0
 800744e:	6260      	str	r0, [r4, #36]	; 0x24
 8007450:	b920      	cbnz	r0, 800745c <_Balloc+0x20>
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <_Balloc+0x78>)
 8007454:	4818      	ldr	r0, [pc, #96]	; (80074b8 <_Balloc+0x7c>)
 8007456:	2166      	movs	r1, #102	; 0x66
 8007458:	f000 feea 	bl	8008230 <__assert_func>
 800745c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007460:	6006      	str	r6, [r0, #0]
 8007462:	60c6      	str	r6, [r0, #12]
 8007464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007466:	68f3      	ldr	r3, [r6, #12]
 8007468:	b183      	cbz	r3, 800748c <_Balloc+0x50>
 800746a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007472:	b9b8      	cbnz	r0, 80074a4 <_Balloc+0x68>
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f605 	lsl.w	r6, r1, r5
 800747a:	1d72      	adds	r2, r6, #5
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fb60 	bl	8007b44 <_calloc_r>
 8007484:	b160      	cbz	r0, 80074a0 <_Balloc+0x64>
 8007486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800748a:	e00e      	b.n	80074aa <_Balloc+0x6e>
 800748c:	2221      	movs	r2, #33	; 0x21
 800748e:	2104      	movs	r1, #4
 8007490:	4620      	mov	r0, r4
 8007492:	f000 fb57 	bl	8007b44 <_calloc_r>
 8007496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007498:	60f0      	str	r0, [r6, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e4      	bne.n	800746a <_Balloc+0x2e>
 80074a0:	2000      	movs	r0, #0
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	6802      	ldr	r2, [r0, #0]
 80074a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074aa:	2300      	movs	r3, #0
 80074ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074b0:	e7f7      	b.n	80074a2 <_Balloc+0x66>
 80074b2:	bf00      	nop
 80074b4:	0801bba5 	.word	0x0801bba5
 80074b8:	0801bc88 	.word	0x0801bc88

080074bc <_Bfree>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074c0:	4605      	mov	r5, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	b976      	cbnz	r6, 80074e4 <_Bfree+0x28>
 80074c6:	2010      	movs	r0, #16
 80074c8:	f7ff ffa2 	bl	8007410 <malloc>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6268      	str	r0, [r5, #36]	; 0x24
 80074d0:	b920      	cbnz	r0, 80074dc <_Bfree+0x20>
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <_Bfree+0x3c>)
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <_Bfree+0x40>)
 80074d6:	218a      	movs	r1, #138	; 0x8a
 80074d8:	f000 feaa 	bl	8008230 <__assert_func>
 80074dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074e0:	6006      	str	r6, [r0, #0]
 80074e2:	60c6      	str	r6, [r0, #12]
 80074e4:	b13c      	cbz	r4, 80074f6 <_Bfree+0x3a>
 80074e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074e8:	6862      	ldr	r2, [r4, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074f0:	6021      	str	r1, [r4, #0]
 80074f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	0801bba5 	.word	0x0801bba5
 80074fc:	0801bc88 	.word	0x0801bc88

08007500 <__multadd>:
 8007500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007504:	690d      	ldr	r5, [r1, #16]
 8007506:	4607      	mov	r7, r0
 8007508:	460c      	mov	r4, r1
 800750a:	461e      	mov	r6, r3
 800750c:	f101 0c14 	add.w	ip, r1, #20
 8007510:	2000      	movs	r0, #0
 8007512:	f8dc 3000 	ldr.w	r3, [ip]
 8007516:	b299      	uxth	r1, r3
 8007518:	fb02 6101 	mla	r1, r2, r1, r6
 800751c:	0c1e      	lsrs	r6, r3, #16
 800751e:	0c0b      	lsrs	r3, r1, #16
 8007520:	fb02 3306 	mla	r3, r2, r6, r3
 8007524:	b289      	uxth	r1, r1
 8007526:	3001      	adds	r0, #1
 8007528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800752c:	4285      	cmp	r5, r0
 800752e:	f84c 1b04 	str.w	r1, [ip], #4
 8007532:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007536:	dcec      	bgt.n	8007512 <__multadd+0x12>
 8007538:	b30e      	cbz	r6, 800757e <__multadd+0x7e>
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc19      	bgt.n	8007574 <__multadd+0x74>
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4638      	mov	r0, r7
 8007544:	3101      	adds	r1, #1
 8007546:	f7ff ff79 	bl	800743c <_Balloc>
 800754a:	4680      	mov	r8, r0
 800754c:	b928      	cbnz	r0, 800755a <__multadd+0x5a>
 800754e:	4602      	mov	r2, r0
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <__multadd+0x84>)
 8007552:	480d      	ldr	r0, [pc, #52]	; (8007588 <__multadd+0x88>)
 8007554:	21b5      	movs	r1, #181	; 0xb5
 8007556:	f000 fe6b 	bl	8008230 <__assert_func>
 800755a:	6922      	ldr	r2, [r4, #16]
 800755c:	3202      	adds	r2, #2
 800755e:	f104 010c 	add.w	r1, r4, #12
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	300c      	adds	r0, #12
 8007566:	f7ff ff5b 	bl	8007420 <memcpy>
 800756a:	4621      	mov	r1, r4
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff ffa5 	bl	80074bc <_Bfree>
 8007572:	4644      	mov	r4, r8
 8007574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007578:	3501      	adds	r5, #1
 800757a:	615e      	str	r6, [r3, #20]
 800757c:	6125      	str	r5, [r4, #16]
 800757e:	4620      	mov	r0, r4
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	0801bc17 	.word	0x0801bc17
 8007588:	0801bc88 	.word	0x0801bc88

0800758c <__hi0bits>:
 800758c:	0c03      	lsrs	r3, r0, #16
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	b9d3      	cbnz	r3, 80075c8 <__hi0bits+0x3c>
 8007592:	0400      	lsls	r0, r0, #16
 8007594:	2310      	movs	r3, #16
 8007596:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800759a:	bf04      	itt	eq
 800759c:	0200      	lsleq	r0, r0, #8
 800759e:	3308      	addeq	r3, #8
 80075a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075a4:	bf04      	itt	eq
 80075a6:	0100      	lsleq	r0, r0, #4
 80075a8:	3304      	addeq	r3, #4
 80075aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075ae:	bf04      	itt	eq
 80075b0:	0080      	lsleq	r0, r0, #2
 80075b2:	3302      	addeq	r3, #2
 80075b4:	2800      	cmp	r0, #0
 80075b6:	db05      	blt.n	80075c4 <__hi0bits+0x38>
 80075b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075bc:	f103 0301 	add.w	r3, r3, #1
 80075c0:	bf08      	it	eq
 80075c2:	2320      	moveq	r3, #32
 80075c4:	4618      	mov	r0, r3
 80075c6:	4770      	bx	lr
 80075c8:	2300      	movs	r3, #0
 80075ca:	e7e4      	b.n	8007596 <__hi0bits+0xa>

080075cc <__lo0bits>:
 80075cc:	6803      	ldr	r3, [r0, #0]
 80075ce:	f013 0207 	ands.w	r2, r3, #7
 80075d2:	4601      	mov	r1, r0
 80075d4:	d00b      	beq.n	80075ee <__lo0bits+0x22>
 80075d6:	07da      	lsls	r2, r3, #31
 80075d8:	d423      	bmi.n	8007622 <__lo0bits+0x56>
 80075da:	0798      	lsls	r0, r3, #30
 80075dc:	bf49      	itett	mi
 80075de:	085b      	lsrmi	r3, r3, #1
 80075e0:	089b      	lsrpl	r3, r3, #2
 80075e2:	2001      	movmi	r0, #1
 80075e4:	600b      	strmi	r3, [r1, #0]
 80075e6:	bf5c      	itt	pl
 80075e8:	600b      	strpl	r3, [r1, #0]
 80075ea:	2002      	movpl	r0, #2
 80075ec:	4770      	bx	lr
 80075ee:	b298      	uxth	r0, r3
 80075f0:	b9a8      	cbnz	r0, 800761e <__lo0bits+0x52>
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	2010      	movs	r0, #16
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	b90a      	cbnz	r2, 80075fe <__lo0bits+0x32>
 80075fa:	3008      	adds	r0, #8
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	071a      	lsls	r2, r3, #28
 8007600:	bf04      	itt	eq
 8007602:	091b      	lsreq	r3, r3, #4
 8007604:	3004      	addeq	r0, #4
 8007606:	079a      	lsls	r2, r3, #30
 8007608:	bf04      	itt	eq
 800760a:	089b      	lsreq	r3, r3, #2
 800760c:	3002      	addeq	r0, #2
 800760e:	07da      	lsls	r2, r3, #31
 8007610:	d403      	bmi.n	800761a <__lo0bits+0x4e>
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	f100 0001 	add.w	r0, r0, #1
 8007618:	d005      	beq.n	8007626 <__lo0bits+0x5a>
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	4770      	bx	lr
 800761e:	4610      	mov	r0, r2
 8007620:	e7e9      	b.n	80075f6 <__lo0bits+0x2a>
 8007622:	2000      	movs	r0, #0
 8007624:	4770      	bx	lr
 8007626:	2020      	movs	r0, #32
 8007628:	4770      	bx	lr
	...

0800762c <__i2b>:
 800762c:	b510      	push	{r4, lr}
 800762e:	460c      	mov	r4, r1
 8007630:	2101      	movs	r1, #1
 8007632:	f7ff ff03 	bl	800743c <_Balloc>
 8007636:	4602      	mov	r2, r0
 8007638:	b928      	cbnz	r0, 8007646 <__i2b+0x1a>
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <__i2b+0x24>)
 800763c:	4805      	ldr	r0, [pc, #20]	; (8007654 <__i2b+0x28>)
 800763e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007642:	f000 fdf5 	bl	8008230 <__assert_func>
 8007646:	2301      	movs	r3, #1
 8007648:	6144      	str	r4, [r0, #20]
 800764a:	6103      	str	r3, [r0, #16]
 800764c:	bd10      	pop	{r4, pc}
 800764e:	bf00      	nop
 8007650:	0801bc17 	.word	0x0801bc17
 8007654:	0801bc88 	.word	0x0801bc88

08007658 <__multiply>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	4691      	mov	r9, r2
 800765e:	690a      	ldr	r2, [r1, #16]
 8007660:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	bfb8      	it	lt
 8007668:	460b      	movlt	r3, r1
 800766a:	460c      	mov	r4, r1
 800766c:	bfbc      	itt	lt
 800766e:	464c      	movlt	r4, r9
 8007670:	4699      	movlt	r9, r3
 8007672:	6927      	ldr	r7, [r4, #16]
 8007674:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007678:	68a3      	ldr	r3, [r4, #8]
 800767a:	6861      	ldr	r1, [r4, #4]
 800767c:	eb07 060a 	add.w	r6, r7, sl
 8007680:	42b3      	cmp	r3, r6
 8007682:	b085      	sub	sp, #20
 8007684:	bfb8      	it	lt
 8007686:	3101      	addlt	r1, #1
 8007688:	f7ff fed8 	bl	800743c <_Balloc>
 800768c:	b930      	cbnz	r0, 800769c <__multiply+0x44>
 800768e:	4602      	mov	r2, r0
 8007690:	4b44      	ldr	r3, [pc, #272]	; (80077a4 <__multiply+0x14c>)
 8007692:	4845      	ldr	r0, [pc, #276]	; (80077a8 <__multiply+0x150>)
 8007694:	f240 115d 	movw	r1, #349	; 0x15d
 8007698:	f000 fdca 	bl	8008230 <__assert_func>
 800769c:	f100 0514 	add.w	r5, r0, #20
 80076a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076a4:	462b      	mov	r3, r5
 80076a6:	2200      	movs	r2, #0
 80076a8:	4543      	cmp	r3, r8
 80076aa:	d321      	bcc.n	80076f0 <__multiply+0x98>
 80076ac:	f104 0314 	add.w	r3, r4, #20
 80076b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076b4:	f109 0314 	add.w	r3, r9, #20
 80076b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076bc:	9202      	str	r2, [sp, #8]
 80076be:	1b3a      	subs	r2, r7, r4
 80076c0:	3a15      	subs	r2, #21
 80076c2:	f022 0203 	bic.w	r2, r2, #3
 80076c6:	3204      	adds	r2, #4
 80076c8:	f104 0115 	add.w	r1, r4, #21
 80076cc:	428f      	cmp	r7, r1
 80076ce:	bf38      	it	cc
 80076d0:	2204      	movcc	r2, #4
 80076d2:	9201      	str	r2, [sp, #4]
 80076d4:	9a02      	ldr	r2, [sp, #8]
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d80c      	bhi.n	80076f6 <__multiply+0x9e>
 80076dc:	2e00      	cmp	r6, #0
 80076de:	dd03      	ble.n	80076e8 <__multiply+0x90>
 80076e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05a      	beq.n	800779e <__multiply+0x146>
 80076e8:	6106      	str	r6, [r0, #16]
 80076ea:	b005      	add	sp, #20
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	f843 2b04 	str.w	r2, [r3], #4
 80076f4:	e7d8      	b.n	80076a8 <__multiply+0x50>
 80076f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80076fa:	f1ba 0f00 	cmp.w	sl, #0
 80076fe:	d024      	beq.n	800774a <__multiply+0xf2>
 8007700:	f104 0e14 	add.w	lr, r4, #20
 8007704:	46a9      	mov	r9, r5
 8007706:	f04f 0c00 	mov.w	ip, #0
 800770a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800770e:	f8d9 1000 	ldr.w	r1, [r9]
 8007712:	fa1f fb82 	uxth.w	fp, r2
 8007716:	b289      	uxth	r1, r1
 8007718:	fb0a 110b 	mla	r1, sl, fp, r1
 800771c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007720:	f8d9 2000 	ldr.w	r2, [r9]
 8007724:	4461      	add	r1, ip
 8007726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800772a:	fb0a c20b 	mla	r2, sl, fp, ip
 800772e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007732:	b289      	uxth	r1, r1
 8007734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007738:	4577      	cmp	r7, lr
 800773a:	f849 1b04 	str.w	r1, [r9], #4
 800773e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007742:	d8e2      	bhi.n	800770a <__multiply+0xb2>
 8007744:	9a01      	ldr	r2, [sp, #4]
 8007746:	f845 c002 	str.w	ip, [r5, r2]
 800774a:	9a03      	ldr	r2, [sp, #12]
 800774c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007750:	3304      	adds	r3, #4
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	d020      	beq.n	800779a <__multiply+0x142>
 8007758:	6829      	ldr	r1, [r5, #0]
 800775a:	f104 0c14 	add.w	ip, r4, #20
 800775e:	46ae      	mov	lr, r5
 8007760:	f04f 0a00 	mov.w	sl, #0
 8007764:	f8bc b000 	ldrh.w	fp, [ip]
 8007768:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800776c:	fb09 220b 	mla	r2, r9, fp, r2
 8007770:	4492      	add	sl, r2
 8007772:	b289      	uxth	r1, r1
 8007774:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007778:	f84e 1b04 	str.w	r1, [lr], #4
 800777c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007780:	f8be 1000 	ldrh.w	r1, [lr]
 8007784:	0c12      	lsrs	r2, r2, #16
 8007786:	fb09 1102 	mla	r1, r9, r2, r1
 800778a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800778e:	4567      	cmp	r7, ip
 8007790:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007794:	d8e6      	bhi.n	8007764 <__multiply+0x10c>
 8007796:	9a01      	ldr	r2, [sp, #4]
 8007798:	50a9      	str	r1, [r5, r2]
 800779a:	3504      	adds	r5, #4
 800779c:	e79a      	b.n	80076d4 <__multiply+0x7c>
 800779e:	3e01      	subs	r6, #1
 80077a0:	e79c      	b.n	80076dc <__multiply+0x84>
 80077a2:	bf00      	nop
 80077a4:	0801bc17 	.word	0x0801bc17
 80077a8:	0801bc88 	.word	0x0801bc88

080077ac <__pow5mult>:
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b0:	4615      	mov	r5, r2
 80077b2:	f012 0203 	ands.w	r2, r2, #3
 80077b6:	4606      	mov	r6, r0
 80077b8:	460f      	mov	r7, r1
 80077ba:	d007      	beq.n	80077cc <__pow5mult+0x20>
 80077bc:	4c25      	ldr	r4, [pc, #148]	; (8007854 <__pow5mult+0xa8>)
 80077be:	3a01      	subs	r2, #1
 80077c0:	2300      	movs	r3, #0
 80077c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077c6:	f7ff fe9b 	bl	8007500 <__multadd>
 80077ca:	4607      	mov	r7, r0
 80077cc:	10ad      	asrs	r5, r5, #2
 80077ce:	d03d      	beq.n	800784c <__pow5mult+0xa0>
 80077d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077d2:	b97c      	cbnz	r4, 80077f4 <__pow5mult+0x48>
 80077d4:	2010      	movs	r0, #16
 80077d6:	f7ff fe1b 	bl	8007410 <malloc>
 80077da:	4602      	mov	r2, r0
 80077dc:	6270      	str	r0, [r6, #36]	; 0x24
 80077de:	b928      	cbnz	r0, 80077ec <__pow5mult+0x40>
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <__pow5mult+0xac>)
 80077e2:	481e      	ldr	r0, [pc, #120]	; (800785c <__pow5mult+0xb0>)
 80077e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077e8:	f000 fd22 	bl	8008230 <__assert_func>
 80077ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077f0:	6004      	str	r4, [r0, #0]
 80077f2:	60c4      	str	r4, [r0, #12]
 80077f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077fc:	b94c      	cbnz	r4, 8007812 <__pow5mult+0x66>
 80077fe:	f240 2171 	movw	r1, #625	; 0x271
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff12 	bl	800762c <__i2b>
 8007808:	2300      	movs	r3, #0
 800780a:	f8c8 0008 	str.w	r0, [r8, #8]
 800780e:	4604      	mov	r4, r0
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	f04f 0900 	mov.w	r9, #0
 8007816:	07eb      	lsls	r3, r5, #31
 8007818:	d50a      	bpl.n	8007830 <__pow5mult+0x84>
 800781a:	4639      	mov	r1, r7
 800781c:	4622      	mov	r2, r4
 800781e:	4630      	mov	r0, r6
 8007820:	f7ff ff1a 	bl	8007658 <__multiply>
 8007824:	4639      	mov	r1, r7
 8007826:	4680      	mov	r8, r0
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fe47 	bl	80074bc <_Bfree>
 800782e:	4647      	mov	r7, r8
 8007830:	106d      	asrs	r5, r5, #1
 8007832:	d00b      	beq.n	800784c <__pow5mult+0xa0>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	b938      	cbnz	r0, 8007848 <__pow5mult+0x9c>
 8007838:	4622      	mov	r2, r4
 800783a:	4621      	mov	r1, r4
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ff0b 	bl	8007658 <__multiply>
 8007842:	6020      	str	r0, [r4, #0]
 8007844:	f8c0 9000 	str.w	r9, [r0]
 8007848:	4604      	mov	r4, r0
 800784a:	e7e4      	b.n	8007816 <__pow5mult+0x6a>
 800784c:	4638      	mov	r0, r7
 800784e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007852:	bf00      	nop
 8007854:	0801bdd8 	.word	0x0801bdd8
 8007858:	0801bba5 	.word	0x0801bba5
 800785c:	0801bc88 	.word	0x0801bc88

08007860 <__lshift>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	460c      	mov	r4, r1
 8007866:	6849      	ldr	r1, [r1, #4]
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800786e:	68a3      	ldr	r3, [r4, #8]
 8007870:	4607      	mov	r7, r0
 8007872:	4691      	mov	r9, r2
 8007874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007878:	f108 0601 	add.w	r6, r8, #1
 800787c:	42b3      	cmp	r3, r6
 800787e:	db0b      	blt.n	8007898 <__lshift+0x38>
 8007880:	4638      	mov	r0, r7
 8007882:	f7ff fddb 	bl	800743c <_Balloc>
 8007886:	4605      	mov	r5, r0
 8007888:	b948      	cbnz	r0, 800789e <__lshift+0x3e>
 800788a:	4602      	mov	r2, r0
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <__lshift+0xd8>)
 800788e:	482b      	ldr	r0, [pc, #172]	; (800793c <__lshift+0xdc>)
 8007890:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007894:	f000 fccc 	bl	8008230 <__assert_func>
 8007898:	3101      	adds	r1, #1
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	e7ee      	b.n	800787c <__lshift+0x1c>
 800789e:	2300      	movs	r3, #0
 80078a0:	f100 0114 	add.w	r1, r0, #20
 80078a4:	f100 0210 	add.w	r2, r0, #16
 80078a8:	4618      	mov	r0, r3
 80078aa:	4553      	cmp	r3, sl
 80078ac:	db37      	blt.n	800791e <__lshift+0xbe>
 80078ae:	6920      	ldr	r0, [r4, #16]
 80078b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078b4:	f104 0314 	add.w	r3, r4, #20
 80078b8:	f019 091f 	ands.w	r9, r9, #31
 80078bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078c4:	d02f      	beq.n	8007926 <__lshift+0xc6>
 80078c6:	f1c9 0e20 	rsb	lr, r9, #32
 80078ca:	468a      	mov	sl, r1
 80078cc:	f04f 0c00 	mov.w	ip, #0
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	fa02 f209 	lsl.w	r2, r2, r9
 80078d6:	ea42 020c 	orr.w	r2, r2, ip
 80078da:	f84a 2b04 	str.w	r2, [sl], #4
 80078de:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e2:	4298      	cmp	r0, r3
 80078e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80078e8:	d8f2      	bhi.n	80078d0 <__lshift+0x70>
 80078ea:	1b03      	subs	r3, r0, r4
 80078ec:	3b15      	subs	r3, #21
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	3304      	adds	r3, #4
 80078f4:	f104 0215 	add.w	r2, r4, #21
 80078f8:	4290      	cmp	r0, r2
 80078fa:	bf38      	it	cc
 80078fc:	2304      	movcc	r3, #4
 80078fe:	f841 c003 	str.w	ip, [r1, r3]
 8007902:	f1bc 0f00 	cmp.w	ip, #0
 8007906:	d001      	beq.n	800790c <__lshift+0xac>
 8007908:	f108 0602 	add.w	r6, r8, #2
 800790c:	3e01      	subs	r6, #1
 800790e:	4638      	mov	r0, r7
 8007910:	612e      	str	r6, [r5, #16]
 8007912:	4621      	mov	r1, r4
 8007914:	f7ff fdd2 	bl	80074bc <_Bfree>
 8007918:	4628      	mov	r0, r5
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007922:	3301      	adds	r3, #1
 8007924:	e7c1      	b.n	80078aa <__lshift+0x4a>
 8007926:	3904      	subs	r1, #4
 8007928:	f853 2b04 	ldr.w	r2, [r3], #4
 800792c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007930:	4298      	cmp	r0, r3
 8007932:	d8f9      	bhi.n	8007928 <__lshift+0xc8>
 8007934:	e7ea      	b.n	800790c <__lshift+0xac>
 8007936:	bf00      	nop
 8007938:	0801bc17 	.word	0x0801bc17
 800793c:	0801bc88 	.word	0x0801bc88

08007940 <__mcmp>:
 8007940:	b530      	push	{r4, r5, lr}
 8007942:	6902      	ldr	r2, [r0, #16]
 8007944:	690c      	ldr	r4, [r1, #16]
 8007946:	1b12      	subs	r2, r2, r4
 8007948:	d10e      	bne.n	8007968 <__mcmp+0x28>
 800794a:	f100 0314 	add.w	r3, r0, #20
 800794e:	3114      	adds	r1, #20
 8007950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800795c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007960:	42a5      	cmp	r5, r4
 8007962:	d003      	beq.n	800796c <__mcmp+0x2c>
 8007964:	d305      	bcc.n	8007972 <__mcmp+0x32>
 8007966:	2201      	movs	r2, #1
 8007968:	4610      	mov	r0, r2
 800796a:	bd30      	pop	{r4, r5, pc}
 800796c:	4283      	cmp	r3, r0
 800796e:	d3f3      	bcc.n	8007958 <__mcmp+0x18>
 8007970:	e7fa      	b.n	8007968 <__mcmp+0x28>
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	e7f7      	b.n	8007968 <__mcmp+0x28>

08007978 <__mdiff>:
 8007978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	4606      	mov	r6, r0
 8007980:	4611      	mov	r1, r2
 8007982:	4620      	mov	r0, r4
 8007984:	4690      	mov	r8, r2
 8007986:	f7ff ffdb 	bl	8007940 <__mcmp>
 800798a:	1e05      	subs	r5, r0, #0
 800798c:	d110      	bne.n	80079b0 <__mdiff+0x38>
 800798e:	4629      	mov	r1, r5
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff fd53 	bl	800743c <_Balloc>
 8007996:	b930      	cbnz	r0, 80079a6 <__mdiff+0x2e>
 8007998:	4b3a      	ldr	r3, [pc, #232]	; (8007a84 <__mdiff+0x10c>)
 800799a:	4602      	mov	r2, r0
 800799c:	f240 2132 	movw	r1, #562	; 0x232
 80079a0:	4839      	ldr	r0, [pc, #228]	; (8007a88 <__mdiff+0x110>)
 80079a2:	f000 fc45 	bl	8008230 <__assert_func>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b0:	bfa4      	itt	ge
 80079b2:	4643      	movge	r3, r8
 80079b4:	46a0      	movge	r8, r4
 80079b6:	4630      	mov	r0, r6
 80079b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079bc:	bfa6      	itte	ge
 80079be:	461c      	movge	r4, r3
 80079c0:	2500      	movge	r5, #0
 80079c2:	2501      	movlt	r5, #1
 80079c4:	f7ff fd3a 	bl	800743c <_Balloc>
 80079c8:	b920      	cbnz	r0, 80079d4 <__mdiff+0x5c>
 80079ca:	4b2e      	ldr	r3, [pc, #184]	; (8007a84 <__mdiff+0x10c>)
 80079cc:	4602      	mov	r2, r0
 80079ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079d2:	e7e5      	b.n	80079a0 <__mdiff+0x28>
 80079d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079d8:	6926      	ldr	r6, [r4, #16]
 80079da:	60c5      	str	r5, [r0, #12]
 80079dc:	f104 0914 	add.w	r9, r4, #20
 80079e0:	f108 0514 	add.w	r5, r8, #20
 80079e4:	f100 0e14 	add.w	lr, r0, #20
 80079e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079f0:	f108 0210 	add.w	r2, r8, #16
 80079f4:	46f2      	mov	sl, lr
 80079f6:	2100      	movs	r1, #0
 80079f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80079fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a00:	fa1f f883 	uxth.w	r8, r3
 8007a04:	fa11 f18b 	uxtah	r1, r1, fp
 8007a08:	0c1b      	lsrs	r3, r3, #16
 8007a0a:	eba1 0808 	sub.w	r8, r1, r8
 8007a0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a16:	fa1f f888 	uxth.w	r8, r8
 8007a1a:	1419      	asrs	r1, r3, #16
 8007a1c:	454e      	cmp	r6, r9
 8007a1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a22:	f84a 3b04 	str.w	r3, [sl], #4
 8007a26:	d8e7      	bhi.n	80079f8 <__mdiff+0x80>
 8007a28:	1b33      	subs	r3, r6, r4
 8007a2a:	3b15      	subs	r3, #21
 8007a2c:	f023 0303 	bic.w	r3, r3, #3
 8007a30:	3304      	adds	r3, #4
 8007a32:	3415      	adds	r4, #21
 8007a34:	42a6      	cmp	r6, r4
 8007a36:	bf38      	it	cc
 8007a38:	2304      	movcc	r3, #4
 8007a3a:	441d      	add	r5, r3
 8007a3c:	4473      	add	r3, lr
 8007a3e:	469e      	mov	lr, r3
 8007a40:	462e      	mov	r6, r5
 8007a42:	4566      	cmp	r6, ip
 8007a44:	d30e      	bcc.n	8007a64 <__mdiff+0xec>
 8007a46:	f10c 0203 	add.w	r2, ip, #3
 8007a4a:	1b52      	subs	r2, r2, r5
 8007a4c:	f022 0203 	bic.w	r2, r2, #3
 8007a50:	3d03      	subs	r5, #3
 8007a52:	45ac      	cmp	ip, r5
 8007a54:	bf38      	it	cc
 8007a56:	2200      	movcc	r2, #0
 8007a58:	441a      	add	r2, r3
 8007a5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a5e:	b17b      	cbz	r3, 8007a80 <__mdiff+0x108>
 8007a60:	6107      	str	r7, [r0, #16]
 8007a62:	e7a3      	b.n	80079ac <__mdiff+0x34>
 8007a64:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a68:	fa11 f288 	uxtah	r2, r1, r8
 8007a6c:	1414      	asrs	r4, r2, #16
 8007a6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a72:	b292      	uxth	r2, r2
 8007a74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a78:	f84e 2b04 	str.w	r2, [lr], #4
 8007a7c:	1421      	asrs	r1, r4, #16
 8007a7e:	e7e0      	b.n	8007a42 <__mdiff+0xca>
 8007a80:	3f01      	subs	r7, #1
 8007a82:	e7ea      	b.n	8007a5a <__mdiff+0xe2>
 8007a84:	0801bc17 	.word	0x0801bc17
 8007a88:	0801bc88 	.word	0x0801bc88

08007a8c <__d2b>:
 8007a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	4689      	mov	r9, r1
 8007a92:	2101      	movs	r1, #1
 8007a94:	ec57 6b10 	vmov	r6, r7, d0
 8007a98:	4690      	mov	r8, r2
 8007a9a:	f7ff fccf 	bl	800743c <_Balloc>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b930      	cbnz	r0, 8007ab0 <__d2b+0x24>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <__d2b+0xb0>)
 8007aa6:	4826      	ldr	r0, [pc, #152]	; (8007b40 <__d2b+0xb4>)
 8007aa8:	f240 310a 	movw	r1, #778	; 0x30a
 8007aac:	f000 fbc0 	bl	8008230 <__assert_func>
 8007ab0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ab4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ab8:	bb35      	cbnz	r5, 8007b08 <__d2b+0x7c>
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	d028      	beq.n	8007b12 <__d2b+0x86>
 8007ac0:	4668      	mov	r0, sp
 8007ac2:	9600      	str	r6, [sp, #0]
 8007ac4:	f7ff fd82 	bl	80075cc <__lo0bits>
 8007ac8:	9900      	ldr	r1, [sp, #0]
 8007aca:	b300      	cbz	r0, 8007b0e <__d2b+0x82>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	f1c0 0320 	rsb	r3, r0, #32
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	40c2      	lsrs	r2, r0
 8007ada:	6163      	str	r3, [r4, #20]
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	61a3      	str	r3, [r4, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf14      	ite	ne
 8007ae6:	2202      	movne	r2, #2
 8007ae8:	2201      	moveq	r2, #1
 8007aea:	6122      	str	r2, [r4, #16]
 8007aec:	b1d5      	cbz	r5, 8007b24 <__d2b+0x98>
 8007aee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007af2:	4405      	add	r5, r0
 8007af4:	f8c9 5000 	str.w	r5, [r9]
 8007af8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007afc:	f8c8 0000 	str.w	r0, [r8]
 8007b00:	4620      	mov	r0, r4
 8007b02:	b003      	add	sp, #12
 8007b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b0c:	e7d5      	b.n	8007aba <__d2b+0x2e>
 8007b0e:	6161      	str	r1, [r4, #20]
 8007b10:	e7e5      	b.n	8007ade <__d2b+0x52>
 8007b12:	a801      	add	r0, sp, #4
 8007b14:	f7ff fd5a 	bl	80075cc <__lo0bits>
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	6122      	str	r2, [r4, #16]
 8007b20:	3020      	adds	r0, #32
 8007b22:	e7e3      	b.n	8007aec <__d2b+0x60>
 8007b24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b2c:	f8c9 0000 	str.w	r0, [r9]
 8007b30:	6918      	ldr	r0, [r3, #16]
 8007b32:	f7ff fd2b 	bl	800758c <__hi0bits>
 8007b36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b3a:	e7df      	b.n	8007afc <__d2b+0x70>
 8007b3c:	0801bc17 	.word	0x0801bc17
 8007b40:	0801bc88 	.word	0x0801bc88

08007b44 <_calloc_r>:
 8007b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b46:	fba1 2402 	umull	r2, r4, r1, r2
 8007b4a:	b94c      	cbnz	r4, 8007b60 <_calloc_r+0x1c>
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	9201      	str	r2, [sp, #4]
 8007b50:	f000 f87a 	bl	8007c48 <_malloc_r>
 8007b54:	9a01      	ldr	r2, [sp, #4]
 8007b56:	4605      	mov	r5, r0
 8007b58:	b930      	cbnz	r0, 8007b68 <_calloc_r+0x24>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	220c      	movs	r2, #12
 8007b62:	6002      	str	r2, [r0, #0]
 8007b64:	2500      	movs	r5, #0
 8007b66:	e7f8      	b.n	8007b5a <_calloc_r+0x16>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f7fe f84d 	bl	8005c08 <memset>
 8007b6e:	e7f4      	b.n	8007b5a <_calloc_r+0x16>

08007b70 <_free_r>:
 8007b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b72:	2900      	cmp	r1, #0
 8007b74:	d044      	beq.n	8007c00 <_free_r+0x90>
 8007b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7a:	9001      	str	r0, [sp, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b82:	bfb8      	it	lt
 8007b84:	18e4      	addlt	r4, r4, r3
 8007b86:	f000 fcdf 	bl	8008548 <__malloc_lock>
 8007b8a:	4a1e      	ldr	r2, [pc, #120]	; (8007c04 <_free_r+0x94>)
 8007b8c:	9801      	ldr	r0, [sp, #4]
 8007b8e:	6813      	ldr	r3, [r2, #0]
 8007b90:	b933      	cbnz	r3, 8007ba0 <_free_r+0x30>
 8007b92:	6063      	str	r3, [r4, #4]
 8007b94:	6014      	str	r4, [r2, #0]
 8007b96:	b003      	add	sp, #12
 8007b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b9c:	f000 bcda 	b.w	8008554 <__malloc_unlock>
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	d908      	bls.n	8007bb6 <_free_r+0x46>
 8007ba4:	6825      	ldr	r5, [r4, #0]
 8007ba6:	1961      	adds	r1, r4, r5
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	bf01      	itttt	eq
 8007bac:	6819      	ldreq	r1, [r3, #0]
 8007bae:	685b      	ldreq	r3, [r3, #4]
 8007bb0:	1949      	addeq	r1, r1, r5
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	e7ed      	b.n	8007b92 <_free_r+0x22>
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	b10b      	cbz	r3, 8007bc0 <_free_r+0x50>
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d9fa      	bls.n	8007bb6 <_free_r+0x46>
 8007bc0:	6811      	ldr	r1, [r2, #0]
 8007bc2:	1855      	adds	r5, r2, r1
 8007bc4:	42a5      	cmp	r5, r4
 8007bc6:	d10b      	bne.n	8007be0 <_free_r+0x70>
 8007bc8:	6824      	ldr	r4, [r4, #0]
 8007bca:	4421      	add	r1, r4
 8007bcc:	1854      	adds	r4, r2, r1
 8007bce:	42a3      	cmp	r3, r4
 8007bd0:	6011      	str	r1, [r2, #0]
 8007bd2:	d1e0      	bne.n	8007b96 <_free_r+0x26>
 8007bd4:	681c      	ldr	r4, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	6053      	str	r3, [r2, #4]
 8007bda:	4421      	add	r1, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	e7da      	b.n	8007b96 <_free_r+0x26>
 8007be0:	d902      	bls.n	8007be8 <_free_r+0x78>
 8007be2:	230c      	movs	r3, #12
 8007be4:	6003      	str	r3, [r0, #0]
 8007be6:	e7d6      	b.n	8007b96 <_free_r+0x26>
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	1961      	adds	r1, r4, r5
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf04      	itt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	bf04      	itt	eq
 8007bf8:	1949      	addeq	r1, r1, r5
 8007bfa:	6021      	streq	r1, [r4, #0]
 8007bfc:	6054      	str	r4, [r2, #4]
 8007bfe:	e7ca      	b.n	8007b96 <_free_r+0x26>
 8007c00:	b003      	add	sp, #12
 8007c02:	bd30      	pop	{r4, r5, pc}
 8007c04:	2000646c 	.word	0x2000646c

08007c08 <sbrk_aligned>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4e0e      	ldr	r6, [pc, #56]	; (8007c44 <sbrk_aligned+0x3c>)
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6831      	ldr	r1, [r6, #0]
 8007c10:	4605      	mov	r5, r0
 8007c12:	b911      	cbnz	r1, 8007c1a <sbrk_aligned+0x12>
 8007c14:	f000 f9e6 	bl	8007fe4 <_sbrk_r>
 8007c18:	6030      	str	r0, [r6, #0]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f9e1 	bl	8007fe4 <_sbrk_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <sbrk_aligned+0x34>
 8007c26:	1cc4      	adds	r4, r0, #3
 8007c28:	f024 0403 	bic.w	r4, r4, #3
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d007      	beq.n	8007c40 <sbrk_aligned+0x38>
 8007c30:	1a21      	subs	r1, r4, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 f9d6 	bl	8007fe4 <_sbrk_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d101      	bne.n	8007c40 <sbrk_aligned+0x38>
 8007c3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c40:	4620      	mov	r0, r4
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	20006470 	.word	0x20006470

08007c48 <_malloc_r>:
 8007c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	db01      	blt.n	8007c64 <_malloc_r+0x1c>
 8007c60:	42a9      	cmp	r1, r5
 8007c62:	d905      	bls.n	8007c70 <_malloc_r+0x28>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	2600      	movs	r6, #0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	4e2e      	ldr	r6, [pc, #184]	; (8007d2c <_malloc_r+0xe4>)
 8007c72:	f000 fc69 	bl	8008548 <__malloc_lock>
 8007c76:	6833      	ldr	r3, [r6, #0]
 8007c78:	461c      	mov	r4, r3
 8007c7a:	bb34      	cbnz	r4, 8007cca <_malloc_r+0x82>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f7ff ffc2 	bl	8007c08 <sbrk_aligned>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	4604      	mov	r4, r0
 8007c88:	d14d      	bne.n	8007d26 <_malloc_r+0xde>
 8007c8a:	6834      	ldr	r4, [r6, #0]
 8007c8c:	4626      	mov	r6, r4
 8007c8e:	2e00      	cmp	r6, #0
 8007c90:	d140      	bne.n	8007d14 <_malloc_r+0xcc>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	4631      	mov	r1, r6
 8007c96:	4638      	mov	r0, r7
 8007c98:	eb04 0803 	add.w	r8, r4, r3
 8007c9c:	f000 f9a2 	bl	8007fe4 <_sbrk_r>
 8007ca0:	4580      	cmp	r8, r0
 8007ca2:	d13a      	bne.n	8007d1a <_malloc_r+0xd2>
 8007ca4:	6821      	ldr	r1, [r4, #0]
 8007ca6:	3503      	adds	r5, #3
 8007ca8:	1a6d      	subs	r5, r5, r1
 8007caa:	f025 0503 	bic.w	r5, r5, #3
 8007cae:	3508      	adds	r5, #8
 8007cb0:	2d0c      	cmp	r5, #12
 8007cb2:	bf38      	it	cc
 8007cb4:	250c      	movcc	r5, #12
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f7ff ffa5 	bl	8007c08 <sbrk_aligned>
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d02b      	beq.n	8007d1a <_malloc_r+0xd2>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	442b      	add	r3, r5
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	e00e      	b.n	8007ce8 <_malloc_r+0xa0>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	1b52      	subs	r2, r2, r5
 8007cce:	d41e      	bmi.n	8007d0e <_malloc_r+0xc6>
 8007cd0:	2a0b      	cmp	r2, #11
 8007cd2:	d916      	bls.n	8007d02 <_malloc_r+0xba>
 8007cd4:	1961      	adds	r1, r4, r5
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	6025      	str	r5, [r4, #0]
 8007cda:	bf18      	it	ne
 8007cdc:	6059      	strne	r1, [r3, #4]
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	bf08      	it	eq
 8007ce2:	6031      	streq	r1, [r6, #0]
 8007ce4:	5162      	str	r2, [r4, r5]
 8007ce6:	604b      	str	r3, [r1, #4]
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f104 060b 	add.w	r6, r4, #11
 8007cee:	f000 fc31 	bl	8008554 <__malloc_unlock>
 8007cf2:	f026 0607 	bic.w	r6, r6, #7
 8007cf6:	1d23      	adds	r3, r4, #4
 8007cf8:	1af2      	subs	r2, r6, r3
 8007cfa:	d0b6      	beq.n	8007c6a <_malloc_r+0x22>
 8007cfc:	1b9b      	subs	r3, r3, r6
 8007cfe:	50a3      	str	r3, [r4, r2]
 8007d00:	e7b3      	b.n	8007c6a <_malloc_r+0x22>
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	bf0c      	ite	eq
 8007d08:	6032      	streq	r2, [r6, #0]
 8007d0a:	605a      	strne	r2, [r3, #4]
 8007d0c:	e7ec      	b.n	8007ce8 <_malloc_r+0xa0>
 8007d0e:	4623      	mov	r3, r4
 8007d10:	6864      	ldr	r4, [r4, #4]
 8007d12:	e7b2      	b.n	8007c7a <_malloc_r+0x32>
 8007d14:	4634      	mov	r4, r6
 8007d16:	6876      	ldr	r6, [r6, #4]
 8007d18:	e7b9      	b.n	8007c8e <_malloc_r+0x46>
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	603b      	str	r3, [r7, #0]
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f000 fc18 	bl	8008554 <__malloc_unlock>
 8007d24:	e7a1      	b.n	8007c6a <_malloc_r+0x22>
 8007d26:	6025      	str	r5, [r4, #0]
 8007d28:	e7de      	b.n	8007ce8 <_malloc_r+0xa0>
 8007d2a:	bf00      	nop
 8007d2c:	2000646c 	.word	0x2000646c

08007d30 <__sfputc_r>:
 8007d30:	6893      	ldr	r3, [r2, #8]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	b410      	push	{r4}
 8007d38:	6093      	str	r3, [r2, #8]
 8007d3a:	da08      	bge.n	8007d4e <__sfputc_r+0x1e>
 8007d3c:	6994      	ldr	r4, [r2, #24]
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	db01      	blt.n	8007d46 <__sfputc_r+0x16>
 8007d42:	290a      	cmp	r1, #10
 8007d44:	d103      	bne.n	8007d4e <__sfputc_r+0x1e>
 8007d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4a:	f000 b99f 	b.w	800808c <__swbuf_r>
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	1c58      	adds	r0, r3, #1
 8007d52:	6010      	str	r0, [r2, #0]
 8007d54:	7019      	strb	r1, [r3, #0]
 8007d56:	4608      	mov	r0, r1
 8007d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <__sfputs_r>:
 8007d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d60:	4606      	mov	r6, r0
 8007d62:	460f      	mov	r7, r1
 8007d64:	4614      	mov	r4, r2
 8007d66:	18d5      	adds	r5, r2, r3
 8007d68:	42ac      	cmp	r4, r5
 8007d6a:	d101      	bne.n	8007d70 <__sfputs_r+0x12>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e007      	b.n	8007d80 <__sfputs_r+0x22>
 8007d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d74:	463a      	mov	r2, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ffda 	bl	8007d30 <__sfputc_r>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d1f3      	bne.n	8007d68 <__sfputs_r+0xa>
 8007d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d84 <_vfiprintf_r>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	460d      	mov	r5, r1
 8007d8a:	b09d      	sub	sp, #116	; 0x74
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	4698      	mov	r8, r3
 8007d90:	4606      	mov	r6, r0
 8007d92:	b118      	cbz	r0, 8007d9c <_vfiprintf_r+0x18>
 8007d94:	6983      	ldr	r3, [r0, #24]
 8007d96:	b90b      	cbnz	r3, 8007d9c <_vfiprintf_r+0x18>
 8007d98:	f7ff fa94 	bl	80072c4 <__sinit>
 8007d9c:	4b89      	ldr	r3, [pc, #548]	; (8007fc4 <_vfiprintf_r+0x240>)
 8007d9e:	429d      	cmp	r5, r3
 8007da0:	d11b      	bne.n	8007dda <_vfiprintf_r+0x56>
 8007da2:	6875      	ldr	r5, [r6, #4]
 8007da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007da6:	07d9      	lsls	r1, r3, #31
 8007da8:	d405      	bmi.n	8007db6 <_vfiprintf_r+0x32>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	059a      	lsls	r2, r3, #22
 8007dae:	d402      	bmi.n	8007db6 <_vfiprintf_r+0x32>
 8007db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db2:	f7ff fb2a 	bl	800740a <__retarget_lock_acquire_recursive>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	071b      	lsls	r3, r3, #28
 8007dba:	d501      	bpl.n	8007dc0 <_vfiprintf_r+0x3c>
 8007dbc:	692b      	ldr	r3, [r5, #16]
 8007dbe:	b9eb      	cbnz	r3, 8007dfc <_vfiprintf_r+0x78>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f000 f9c6 	bl	8008154 <__swsetup_r>
 8007dc8:	b1c0      	cbz	r0, 8007dfc <_vfiprintf_r+0x78>
 8007dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dcc:	07dc      	lsls	r4, r3, #31
 8007dce:	d50e      	bpl.n	8007dee <_vfiprintf_r+0x6a>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	b01d      	add	sp, #116	; 0x74
 8007dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dda:	4b7b      	ldr	r3, [pc, #492]	; (8007fc8 <_vfiprintf_r+0x244>)
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	d101      	bne.n	8007de4 <_vfiprintf_r+0x60>
 8007de0:	68b5      	ldr	r5, [r6, #8]
 8007de2:	e7df      	b.n	8007da4 <_vfiprintf_r+0x20>
 8007de4:	4b79      	ldr	r3, [pc, #484]	; (8007fcc <_vfiprintf_r+0x248>)
 8007de6:	429d      	cmp	r5, r3
 8007de8:	bf08      	it	eq
 8007dea:	68f5      	ldreq	r5, [r6, #12]
 8007dec:	e7da      	b.n	8007da4 <_vfiprintf_r+0x20>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	0598      	lsls	r0, r3, #22
 8007df2:	d4ed      	bmi.n	8007dd0 <_vfiprintf_r+0x4c>
 8007df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007df6:	f7ff fb09 	bl	800740c <__retarget_lock_release_recursive>
 8007dfa:	e7e9      	b.n	8007dd0 <_vfiprintf_r+0x4c>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007e00:	2320      	movs	r3, #32
 8007e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e0a:	2330      	movs	r3, #48	; 0x30
 8007e0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fd0 <_vfiprintf_r+0x24c>
 8007e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e14:	f04f 0901 	mov.w	r9, #1
 8007e18:	4623      	mov	r3, r4
 8007e1a:	469a      	mov	sl, r3
 8007e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e20:	b10a      	cbz	r2, 8007e26 <_vfiprintf_r+0xa2>
 8007e22:	2a25      	cmp	r2, #37	; 0x25
 8007e24:	d1f9      	bne.n	8007e1a <_vfiprintf_r+0x96>
 8007e26:	ebba 0b04 	subs.w	fp, sl, r4
 8007e2a:	d00b      	beq.n	8007e44 <_vfiprintf_r+0xc0>
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	4622      	mov	r2, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ff93 	bl	8007d5e <__sfputs_r>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f000 80aa 	beq.w	8007f92 <_vfiprintf_r+0x20e>
 8007e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e40:	445a      	add	r2, fp
 8007e42:	9209      	str	r2, [sp, #36]	; 0x24
 8007e44:	f89a 3000 	ldrb.w	r3, [sl]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80a2 	beq.w	8007f92 <_vfiprintf_r+0x20e>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f04f 32ff 	mov.w	r2, #4294967295
 8007e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e58:	f10a 0a01 	add.w	sl, sl, #1
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e64:	931a      	str	r3, [sp, #104]	; 0x68
 8007e66:	4654      	mov	r4, sl
 8007e68:	2205      	movs	r2, #5
 8007e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6e:	4858      	ldr	r0, [pc, #352]	; (8007fd0 <_vfiprintf_r+0x24c>)
 8007e70:	f7f8 fa36 	bl	80002e0 <memchr>
 8007e74:	9a04      	ldr	r2, [sp, #16]
 8007e76:	b9d8      	cbnz	r0, 8007eb0 <_vfiprintf_r+0x12c>
 8007e78:	06d1      	lsls	r1, r2, #27
 8007e7a:	bf44      	itt	mi
 8007e7c:	2320      	movmi	r3, #32
 8007e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e82:	0713      	lsls	r3, r2, #28
 8007e84:	bf44      	itt	mi
 8007e86:	232b      	movmi	r3, #43	; 0x2b
 8007e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e90:	2b2a      	cmp	r3, #42	; 0x2a
 8007e92:	d015      	beq.n	8007ec0 <_vfiprintf_r+0x13c>
 8007e94:	9a07      	ldr	r2, [sp, #28]
 8007e96:	4654      	mov	r4, sl
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f04f 0c0a 	mov.w	ip, #10
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea4:	3b30      	subs	r3, #48	; 0x30
 8007ea6:	2b09      	cmp	r3, #9
 8007ea8:	d94e      	bls.n	8007f48 <_vfiprintf_r+0x1c4>
 8007eaa:	b1b0      	cbz	r0, 8007eda <_vfiprintf_r+0x156>
 8007eac:	9207      	str	r2, [sp, #28]
 8007eae:	e014      	b.n	8007eda <_vfiprintf_r+0x156>
 8007eb0:	eba0 0308 	sub.w	r3, r0, r8
 8007eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	46a2      	mov	sl, r4
 8007ebe:	e7d2      	b.n	8007e66 <_vfiprintf_r+0xe2>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	1d19      	adds	r1, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	9103      	str	r1, [sp, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfbb      	ittet	lt
 8007ecc:	425b      	neglt	r3, r3
 8007ece:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed2:	9307      	strge	r3, [sp, #28]
 8007ed4:	9307      	strlt	r3, [sp, #28]
 8007ed6:	bfb8      	it	lt
 8007ed8:	9204      	strlt	r2, [sp, #16]
 8007eda:	7823      	ldrb	r3, [r4, #0]
 8007edc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ede:	d10c      	bne.n	8007efa <_vfiprintf_r+0x176>
 8007ee0:	7863      	ldrb	r3, [r4, #1]
 8007ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee4:	d135      	bne.n	8007f52 <_vfiprintf_r+0x1ce>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	1d1a      	adds	r2, r3, #4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	9203      	str	r2, [sp, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfb8      	it	lt
 8007ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef6:	3402      	adds	r4, #2
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fe0 <_vfiprintf_r+0x25c>
 8007efe:	7821      	ldrb	r1, [r4, #0]
 8007f00:	2203      	movs	r2, #3
 8007f02:	4650      	mov	r0, sl
 8007f04:	f7f8 f9ec 	bl	80002e0 <memchr>
 8007f08:	b140      	cbz	r0, 8007f1c <_vfiprintf_r+0x198>
 8007f0a:	2340      	movs	r3, #64	; 0x40
 8007f0c:	eba0 000a 	sub.w	r0, r0, sl
 8007f10:	fa03 f000 	lsl.w	r0, r3, r0
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	4303      	orrs	r3, r0
 8007f18:	3401      	adds	r4, #1
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f20:	482c      	ldr	r0, [pc, #176]	; (8007fd4 <_vfiprintf_r+0x250>)
 8007f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f26:	2206      	movs	r2, #6
 8007f28:	f7f8 f9da 	bl	80002e0 <memchr>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d03f      	beq.n	8007fb0 <_vfiprintf_r+0x22c>
 8007f30:	4b29      	ldr	r3, [pc, #164]	; (8007fd8 <_vfiprintf_r+0x254>)
 8007f32:	bb1b      	cbnz	r3, 8007f7c <_vfiprintf_r+0x1f8>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	3307      	adds	r3, #7
 8007f38:	f023 0307 	bic.w	r3, r3, #7
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	9303      	str	r3, [sp, #12]
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	443b      	add	r3, r7
 8007f44:	9309      	str	r3, [sp, #36]	; 0x24
 8007f46:	e767      	b.n	8007e18 <_vfiprintf_r+0x94>
 8007f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7a5      	b.n	8007e9e <_vfiprintf_r+0x11a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	3401      	adds	r4, #1
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f04f 0c0a 	mov.w	ip, #10
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f64:	3a30      	subs	r2, #48	; 0x30
 8007f66:	2a09      	cmp	r2, #9
 8007f68:	d903      	bls.n	8007f72 <_vfiprintf_r+0x1ee>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0c5      	beq.n	8007efa <_vfiprintf_r+0x176>
 8007f6e:	9105      	str	r1, [sp, #20]
 8007f70:	e7c3      	b.n	8007efa <_vfiprintf_r+0x176>
 8007f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f76:	4604      	mov	r4, r0
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7f0      	b.n	8007f5e <_vfiprintf_r+0x1da>
 8007f7c:	ab03      	add	r3, sp, #12
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	462a      	mov	r2, r5
 8007f82:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <_vfiprintf_r+0x258>)
 8007f84:	a904      	add	r1, sp, #16
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7fd fee6 	bl	8005d58 <_printf_float>
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	1c78      	adds	r0, r7, #1
 8007f90:	d1d6      	bne.n	8007f40 <_vfiprintf_r+0x1bc>
 8007f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f94:	07d9      	lsls	r1, r3, #31
 8007f96:	d405      	bmi.n	8007fa4 <_vfiprintf_r+0x220>
 8007f98:	89ab      	ldrh	r3, [r5, #12]
 8007f9a:	059a      	lsls	r2, r3, #22
 8007f9c:	d402      	bmi.n	8007fa4 <_vfiprintf_r+0x220>
 8007f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fa0:	f7ff fa34 	bl	800740c <__retarget_lock_release_recursive>
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	065b      	lsls	r3, r3, #25
 8007fa8:	f53f af12 	bmi.w	8007dd0 <_vfiprintf_r+0x4c>
 8007fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fae:	e711      	b.n	8007dd4 <_vfiprintf_r+0x50>
 8007fb0:	ab03      	add	r3, sp, #12
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <_vfiprintf_r+0x258>)
 8007fb8:	a904      	add	r1, sp, #16
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7fe f970 	bl	80062a0 <_printf_i>
 8007fc0:	e7e4      	b.n	8007f8c <_vfiprintf_r+0x208>
 8007fc2:	bf00      	nop
 8007fc4:	0801bc48 	.word	0x0801bc48
 8007fc8:	0801bc68 	.word	0x0801bc68
 8007fcc:	0801bc28 	.word	0x0801bc28
 8007fd0:	0801bde4 	.word	0x0801bde4
 8007fd4:	0801bdee 	.word	0x0801bdee
 8007fd8:	08005d59 	.word	0x08005d59
 8007fdc:	08007d5f 	.word	0x08007d5f
 8007fe0:	0801bdea 	.word	0x0801bdea

08007fe4 <_sbrk_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	; (8008000 <_sbrk_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7f9 fe32 	bl	8001c58 <_sbrk>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_sbrk_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_sbrk_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	20006474 	.word	0x20006474

08008004 <__sread>:
 8008004:	b510      	push	{r4, lr}
 8008006:	460c      	mov	r4, r1
 8008008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800c:	f000 faa8 	bl	8008560 <_read_r>
 8008010:	2800      	cmp	r0, #0
 8008012:	bfab      	itete	ge
 8008014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008016:	89a3      	ldrhlt	r3, [r4, #12]
 8008018:	181b      	addge	r3, r3, r0
 800801a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800801e:	bfac      	ite	ge
 8008020:	6563      	strge	r3, [r4, #84]	; 0x54
 8008022:	81a3      	strhlt	r3, [r4, #12]
 8008024:	bd10      	pop	{r4, pc}

08008026 <__swrite>:
 8008026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	461f      	mov	r7, r3
 800802c:	898b      	ldrh	r3, [r1, #12]
 800802e:	05db      	lsls	r3, r3, #23
 8008030:	4605      	mov	r5, r0
 8008032:	460c      	mov	r4, r1
 8008034:	4616      	mov	r6, r2
 8008036:	d505      	bpl.n	8008044 <__swrite+0x1e>
 8008038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803c:	2302      	movs	r3, #2
 800803e:	2200      	movs	r2, #0
 8008040:	f000 f9f8 	bl	8008434 <_lseek_r>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	4632      	mov	r2, r6
 8008052:	463b      	mov	r3, r7
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800805a:	f000 b869 	b.w	8008130 <_write_r>

0800805e <__sseek>:
 800805e:	b510      	push	{r4, lr}
 8008060:	460c      	mov	r4, r1
 8008062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008066:	f000 f9e5 	bl	8008434 <_lseek_r>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	89a3      	ldrh	r3, [r4, #12]
 800806e:	bf15      	itete	ne
 8008070:	6560      	strne	r0, [r4, #84]	; 0x54
 8008072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800807a:	81a3      	strheq	r3, [r4, #12]
 800807c:	bf18      	it	ne
 800807e:	81a3      	strhne	r3, [r4, #12]
 8008080:	bd10      	pop	{r4, pc}

08008082 <__sclose>:
 8008082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008086:	f000 b8f1 	b.w	800826c <_close_r>
	...

0800808c <__swbuf_r>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	460e      	mov	r6, r1
 8008090:	4614      	mov	r4, r2
 8008092:	4605      	mov	r5, r0
 8008094:	b118      	cbz	r0, 800809e <__swbuf_r+0x12>
 8008096:	6983      	ldr	r3, [r0, #24]
 8008098:	b90b      	cbnz	r3, 800809e <__swbuf_r+0x12>
 800809a:	f7ff f913 	bl	80072c4 <__sinit>
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <__swbuf_r+0x98>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d12b      	bne.n	80080fc <__swbuf_r+0x70>
 80080a4:	686c      	ldr	r4, [r5, #4]
 80080a6:	69a3      	ldr	r3, [r4, #24]
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	071a      	lsls	r2, r3, #28
 80080ae:	d52f      	bpl.n	8008110 <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	b36b      	cbz	r3, 8008110 <__swbuf_r+0x84>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	b2f6      	uxtb	r6, r6
 80080be:	4283      	cmp	r3, r0
 80080c0:	4637      	mov	r7, r6
 80080c2:	dc04      	bgt.n	80080ce <__swbuf_r+0x42>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f966 	bl	8008398 <_fflush_r>
 80080cc:	bb30      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	701e      	strb	r6, [r3, #0]
 80080dc:	6963      	ldr	r3, [r4, #20]
 80080de:	3001      	adds	r0, #1
 80080e0:	4283      	cmp	r3, r0
 80080e2:	d004      	beq.n	80080ee <__swbuf_r+0x62>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d506      	bpl.n	80080f8 <__swbuf_r+0x6c>
 80080ea:	2e0a      	cmp	r6, #10
 80080ec:	d104      	bne.n	80080f8 <__swbuf_r+0x6c>
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 f951 	bl	8008398 <_fflush_r>
 80080f6:	b988      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <__swbuf_r+0x9c>)
 80080fe:	429c      	cmp	r4, r3
 8008100:	d101      	bne.n	8008106 <__swbuf_r+0x7a>
 8008102:	68ac      	ldr	r4, [r5, #8]
 8008104:	e7cf      	b.n	80080a6 <__swbuf_r+0x1a>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <__swbuf_r+0xa0>)
 8008108:	429c      	cmp	r4, r3
 800810a:	bf08      	it	eq
 800810c:	68ec      	ldreq	r4, [r5, #12]
 800810e:	e7ca      	b.n	80080a6 <__swbuf_r+0x1a>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 f81e 	bl	8008154 <__swsetup_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0cb      	beq.n	80080b4 <__swbuf_r+0x28>
 800811c:	f04f 37ff 	mov.w	r7, #4294967295
 8008120:	e7ea      	b.n	80080f8 <__swbuf_r+0x6c>
 8008122:	bf00      	nop
 8008124:	0801bc48 	.word	0x0801bc48
 8008128:	0801bc68 	.word	0x0801bc68
 800812c:	0801bc28 	.word	0x0801bc28

08008130 <_write_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	; (8008150 <_write_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7f9 fac4 	bl	80016cc <_write>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_write_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_write_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20006474 	.word	0x20006474

08008154 <__swsetup_r>:
 8008154:	4b32      	ldr	r3, [pc, #200]	; (8008220 <__swsetup_r+0xcc>)
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	681d      	ldr	r5, [r3, #0]
 800815a:	4606      	mov	r6, r0
 800815c:	460c      	mov	r4, r1
 800815e:	b125      	cbz	r5, 800816a <__swsetup_r+0x16>
 8008160:	69ab      	ldr	r3, [r5, #24]
 8008162:	b913      	cbnz	r3, 800816a <__swsetup_r+0x16>
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff f8ad 	bl	80072c4 <__sinit>
 800816a:	4b2e      	ldr	r3, [pc, #184]	; (8008224 <__swsetup_r+0xd0>)
 800816c:	429c      	cmp	r4, r3
 800816e:	d10f      	bne.n	8008190 <__swsetup_r+0x3c>
 8008170:	686c      	ldr	r4, [r5, #4]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	d42c      	bmi.n	80081d6 <__swsetup_r+0x82>
 800817c:	06dd      	lsls	r5, r3, #27
 800817e:	d411      	bmi.n	80081a4 <__swsetup_r+0x50>
 8008180:	2309      	movs	r3, #9
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	e03e      	b.n	800820e <__swsetup_r+0xba>
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <__swsetup_r+0xd4>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d101      	bne.n	800819a <__swsetup_r+0x46>
 8008196:	68ac      	ldr	r4, [r5, #8]
 8008198:	e7eb      	b.n	8008172 <__swsetup_r+0x1e>
 800819a:	4b24      	ldr	r3, [pc, #144]	; (800822c <__swsetup_r+0xd8>)
 800819c:	429c      	cmp	r4, r3
 800819e:	bf08      	it	eq
 80081a0:	68ec      	ldreq	r4, [r5, #12]
 80081a2:	e7e6      	b.n	8008172 <__swsetup_r+0x1e>
 80081a4:	0758      	lsls	r0, r3, #29
 80081a6:	d512      	bpl.n	80081ce <__swsetup_r+0x7a>
 80081a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081aa:	b141      	cbz	r1, 80081be <__swsetup_r+0x6a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__swsetup_r+0x66>
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff fcdb 	bl	8007b70 <_free_r>
 80081ba:	2300      	movs	r3, #0
 80081bc:	6363      	str	r3, [r4, #52]	; 0x34
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f043 0308 	orr.w	r3, r3, #8
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	b94b      	cbnz	r3, 80081ee <__swsetup_r+0x9a>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e4:	d003      	beq.n	80081ee <__swsetup_r+0x9a>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f95b 	bl	80084a4 <__smakebuf_r>
 80081ee:	89a0      	ldrh	r0, [r4, #12]
 80081f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f4:	f010 0301 	ands.w	r3, r0, #1
 80081f8:	d00a      	beq.n	8008210 <__swsetup_r+0xbc>
 80081fa:	2300      	movs	r3, #0
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	6963      	ldr	r3, [r4, #20]
 8008200:	425b      	negs	r3, r3
 8008202:	61a3      	str	r3, [r4, #24]
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	b943      	cbnz	r3, 800821a <__swsetup_r+0xc6>
 8008208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800820c:	d1ba      	bne.n	8008184 <__swsetup_r+0x30>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	0781      	lsls	r1, r0, #30
 8008212:	bf58      	it	pl
 8008214:	6963      	ldrpl	r3, [r4, #20]
 8008216:	60a3      	str	r3, [r4, #8]
 8008218:	e7f4      	b.n	8008204 <__swsetup_r+0xb0>
 800821a:	2000      	movs	r0, #0
 800821c:	e7f7      	b.n	800820e <__swsetup_r+0xba>
 800821e:	bf00      	nop
 8008220:	2000000c 	.word	0x2000000c
 8008224:	0801bc48 	.word	0x0801bc48
 8008228:	0801bc68 	.word	0x0801bc68
 800822c:	0801bc28 	.word	0x0801bc28

08008230 <__assert_func>:
 8008230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008232:	4614      	mov	r4, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4b09      	ldr	r3, [pc, #36]	; (800825c <__assert_func+0x2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4605      	mov	r5, r0
 800823c:	68d8      	ldr	r0, [r3, #12]
 800823e:	b14c      	cbz	r4, 8008254 <__assert_func+0x24>
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <__assert_func+0x30>)
 8008242:	9100      	str	r1, [sp, #0]
 8008244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008248:	4906      	ldr	r1, [pc, #24]	; (8008264 <__assert_func+0x34>)
 800824a:	462b      	mov	r3, r5
 800824c:	f000 f8e0 	bl	8008410 <fiprintf>
 8008250:	f000 f9a5 	bl	800859e <abort>
 8008254:	4b04      	ldr	r3, [pc, #16]	; (8008268 <__assert_func+0x38>)
 8008256:	461c      	mov	r4, r3
 8008258:	e7f3      	b.n	8008242 <__assert_func+0x12>
 800825a:	bf00      	nop
 800825c:	2000000c 	.word	0x2000000c
 8008260:	0801bdf5 	.word	0x0801bdf5
 8008264:	0801be02 	.word	0x0801be02
 8008268:	0801be30 	.word	0x0801be30

0800826c <_close_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_close_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7f9 fcb9 	bl	8001bee <_close>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_close_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_close_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20006474 	.word	0x20006474

0800828c <__sflush_r>:
 800828c:	898a      	ldrh	r2, [r1, #12]
 800828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	4605      	mov	r5, r0
 8008294:	0710      	lsls	r0, r2, #28
 8008296:	460c      	mov	r4, r1
 8008298:	d458      	bmi.n	800834c <__sflush_r+0xc0>
 800829a:	684b      	ldr	r3, [r1, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc05      	bgt.n	80082ac <__sflush_r+0x20>
 80082a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc02      	bgt.n	80082ac <__sflush_r+0x20>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	d0f9      	beq.n	80082a6 <__sflush_r+0x1a>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082b8:	682f      	ldr	r7, [r5, #0]
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	d032      	beq.n	8008324 <__sflush_r+0x98>
 80082be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	075a      	lsls	r2, r3, #29
 80082c4:	d505      	bpl.n	80082d2 <__sflush_r+0x46>
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082cc:	b10b      	cbz	r3, 80082d2 <__sflush_r+0x46>
 80082ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082d0:	1ac0      	subs	r0, r0, r3
 80082d2:	2300      	movs	r3, #0
 80082d4:	4602      	mov	r2, r0
 80082d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d8:	6a21      	ldr	r1, [r4, #32]
 80082da:	4628      	mov	r0, r5
 80082dc:	47b0      	blx	r6
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	d106      	bne.n	80082f2 <__sflush_r+0x66>
 80082e4:	6829      	ldr	r1, [r5, #0]
 80082e6:	291d      	cmp	r1, #29
 80082e8:	d82c      	bhi.n	8008344 <__sflush_r+0xb8>
 80082ea:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <__sflush_r+0x108>)
 80082ec:	40ca      	lsrs	r2, r1
 80082ee:	07d6      	lsls	r6, r2, #31
 80082f0:	d528      	bpl.n	8008344 <__sflush_r+0xb8>
 80082f2:	2200      	movs	r2, #0
 80082f4:	6062      	str	r2, [r4, #4]
 80082f6:	04d9      	lsls	r1, r3, #19
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	d504      	bpl.n	8008308 <__sflush_r+0x7c>
 80082fe:	1c42      	adds	r2, r0, #1
 8008300:	d101      	bne.n	8008306 <__sflush_r+0x7a>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b903      	cbnz	r3, 8008308 <__sflush_r+0x7c>
 8008306:	6560      	str	r0, [r4, #84]	; 0x54
 8008308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800830a:	602f      	str	r7, [r5, #0]
 800830c:	2900      	cmp	r1, #0
 800830e:	d0ca      	beq.n	80082a6 <__sflush_r+0x1a>
 8008310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008314:	4299      	cmp	r1, r3
 8008316:	d002      	beq.n	800831e <__sflush_r+0x92>
 8008318:	4628      	mov	r0, r5
 800831a:	f7ff fc29 	bl	8007b70 <_free_r>
 800831e:	2000      	movs	r0, #0
 8008320:	6360      	str	r0, [r4, #52]	; 0x34
 8008322:	e7c1      	b.n	80082a8 <__sflush_r+0x1c>
 8008324:	6a21      	ldr	r1, [r4, #32]
 8008326:	2301      	movs	r3, #1
 8008328:	4628      	mov	r0, r5
 800832a:	47b0      	blx	r6
 800832c:	1c41      	adds	r1, r0, #1
 800832e:	d1c7      	bne.n	80082c0 <__sflush_r+0x34>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c4      	beq.n	80082c0 <__sflush_r+0x34>
 8008336:	2b1d      	cmp	r3, #29
 8008338:	d001      	beq.n	800833e <__sflush_r+0xb2>
 800833a:	2b16      	cmp	r3, #22
 800833c:	d101      	bne.n	8008342 <__sflush_r+0xb6>
 800833e:	602f      	str	r7, [r5, #0]
 8008340:	e7b1      	b.n	80082a6 <__sflush_r+0x1a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	e7ad      	b.n	80082a8 <__sflush_r+0x1c>
 800834c:	690f      	ldr	r7, [r1, #16]
 800834e:	2f00      	cmp	r7, #0
 8008350:	d0a9      	beq.n	80082a6 <__sflush_r+0x1a>
 8008352:	0793      	lsls	r3, r2, #30
 8008354:	680e      	ldr	r6, [r1, #0]
 8008356:	bf08      	it	eq
 8008358:	694b      	ldreq	r3, [r1, #20]
 800835a:	600f      	str	r7, [r1, #0]
 800835c:	bf18      	it	ne
 800835e:	2300      	movne	r3, #0
 8008360:	eba6 0807 	sub.w	r8, r6, r7
 8008364:	608b      	str	r3, [r1, #8]
 8008366:	f1b8 0f00 	cmp.w	r8, #0
 800836a:	dd9c      	ble.n	80082a6 <__sflush_r+0x1a>
 800836c:	6a21      	ldr	r1, [r4, #32]
 800836e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008370:	4643      	mov	r3, r8
 8008372:	463a      	mov	r2, r7
 8008374:	4628      	mov	r0, r5
 8008376:	47b0      	blx	r6
 8008378:	2800      	cmp	r0, #0
 800837a:	dc06      	bgt.n	800838a <__sflush_r+0xfe>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	e78e      	b.n	80082a8 <__sflush_r+0x1c>
 800838a:	4407      	add	r7, r0
 800838c:	eba8 0800 	sub.w	r8, r8, r0
 8008390:	e7e9      	b.n	8008366 <__sflush_r+0xda>
 8008392:	bf00      	nop
 8008394:	20400001 	.word	0x20400001

08008398 <_fflush_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	690b      	ldr	r3, [r1, #16]
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b913      	cbnz	r3, 80083a8 <_fflush_r+0x10>
 80083a2:	2500      	movs	r5, #0
 80083a4:	4628      	mov	r0, r5
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	b118      	cbz	r0, 80083b2 <_fflush_r+0x1a>
 80083aa:	6983      	ldr	r3, [r0, #24]
 80083ac:	b90b      	cbnz	r3, 80083b2 <_fflush_r+0x1a>
 80083ae:	f7fe ff89 	bl	80072c4 <__sinit>
 80083b2:	4b14      	ldr	r3, [pc, #80]	; (8008404 <_fflush_r+0x6c>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d11b      	bne.n	80083f0 <_fflush_r+0x58>
 80083b8:	686c      	ldr	r4, [r5, #4]
 80083ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0ef      	beq.n	80083a2 <_fflush_r+0xa>
 80083c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083c4:	07d0      	lsls	r0, r2, #31
 80083c6:	d404      	bmi.n	80083d2 <_fflush_r+0x3a>
 80083c8:	0599      	lsls	r1, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_fflush_r+0x3a>
 80083cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ce:	f7ff f81c 	bl	800740a <__retarget_lock_acquire_recursive>
 80083d2:	4628      	mov	r0, r5
 80083d4:	4621      	mov	r1, r4
 80083d6:	f7ff ff59 	bl	800828c <__sflush_r>
 80083da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083dc:	07da      	lsls	r2, r3, #31
 80083de:	4605      	mov	r5, r0
 80083e0:	d4e0      	bmi.n	80083a4 <_fflush_r+0xc>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	059b      	lsls	r3, r3, #22
 80083e6:	d4dd      	bmi.n	80083a4 <_fflush_r+0xc>
 80083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ea:	f7ff f80f 	bl	800740c <__retarget_lock_release_recursive>
 80083ee:	e7d9      	b.n	80083a4 <_fflush_r+0xc>
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <_fflush_r+0x70>)
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d101      	bne.n	80083fa <_fflush_r+0x62>
 80083f6:	68ac      	ldr	r4, [r5, #8]
 80083f8:	e7df      	b.n	80083ba <_fflush_r+0x22>
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <_fflush_r+0x74>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	bf08      	it	eq
 8008400:	68ec      	ldreq	r4, [r5, #12]
 8008402:	e7da      	b.n	80083ba <_fflush_r+0x22>
 8008404:	0801bc48 	.word	0x0801bc48
 8008408:	0801bc68 	.word	0x0801bc68
 800840c:	0801bc28 	.word	0x0801bc28

08008410 <fiprintf>:
 8008410:	b40e      	push	{r1, r2, r3}
 8008412:	b503      	push	{r0, r1, lr}
 8008414:	4601      	mov	r1, r0
 8008416:	ab03      	add	r3, sp, #12
 8008418:	4805      	ldr	r0, [pc, #20]	; (8008430 <fiprintf+0x20>)
 800841a:	f853 2b04 	ldr.w	r2, [r3], #4
 800841e:	6800      	ldr	r0, [r0, #0]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	f7ff fcaf 	bl	8007d84 <_vfiprintf_r>
 8008426:	b002      	add	sp, #8
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b003      	add	sp, #12
 800842e:	4770      	bx	lr
 8008430:	2000000c 	.word	0x2000000c

08008434 <_lseek_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	; (8008454 <_lseek_r+0x20>)
 8008438:	4604      	mov	r4, r0
 800843a:	4608      	mov	r0, r1
 800843c:	4611      	mov	r1, r2
 800843e:	2200      	movs	r2, #0
 8008440:	602a      	str	r2, [r5, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f7f9 fbfa 	bl	8001c3c <_lseek>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_lseek_r+0x1e>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_lseek_r+0x1e>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20006474 	.word	0x20006474

08008458 <__swhatbuf_r>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	460e      	mov	r6, r1
 800845c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008460:	2900      	cmp	r1, #0
 8008462:	b096      	sub	sp, #88	; 0x58
 8008464:	4614      	mov	r4, r2
 8008466:	461d      	mov	r5, r3
 8008468:	da08      	bge.n	800847c <__swhatbuf_r+0x24>
 800846a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	061a      	lsls	r2, r3, #24
 8008474:	d410      	bmi.n	8008498 <__swhatbuf_r+0x40>
 8008476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847a:	e00e      	b.n	800849a <__swhatbuf_r+0x42>
 800847c:	466a      	mov	r2, sp
 800847e:	f000 f895 	bl	80085ac <_fstat_r>
 8008482:	2800      	cmp	r0, #0
 8008484:	dbf1      	blt.n	800846a <__swhatbuf_r+0x12>
 8008486:	9a01      	ldr	r2, [sp, #4]
 8008488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800848c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008490:	425a      	negs	r2, r3
 8008492:	415a      	adcs	r2, r3
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	e7ee      	b.n	8008476 <__swhatbuf_r+0x1e>
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	2000      	movs	r0, #0
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	b016      	add	sp, #88	; 0x58
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080084a4 <__smakebuf_r>:
 80084a4:	898b      	ldrh	r3, [r1, #12]
 80084a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a8:	079d      	lsls	r5, r3, #30
 80084aa:	4606      	mov	r6, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	d507      	bpl.n	80084c0 <__smakebuf_r+0x1c>
 80084b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	2301      	movs	r3, #1
 80084ba:	6163      	str	r3, [r4, #20]
 80084bc:	b002      	add	sp, #8
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	ab01      	add	r3, sp, #4
 80084c2:	466a      	mov	r2, sp
 80084c4:	f7ff ffc8 	bl	8008458 <__swhatbuf_r>
 80084c8:	9900      	ldr	r1, [sp, #0]
 80084ca:	4605      	mov	r5, r0
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff fbbb 	bl	8007c48 <_malloc_r>
 80084d2:	b948      	cbnz	r0, 80084e8 <__smakebuf_r+0x44>
 80084d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d8:	059a      	lsls	r2, r3, #22
 80084da:	d4ef      	bmi.n	80084bc <__smakebuf_r+0x18>
 80084dc:	f023 0303 	bic.w	r3, r3, #3
 80084e0:	f043 0302 	orr.w	r3, r3, #2
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	e7e3      	b.n	80084b0 <__smakebuf_r+0xc>
 80084e8:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <__smakebuf_r+0x7c>)
 80084ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	6020      	str	r0, [r4, #0]
 80084f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	6163      	str	r3, [r4, #20]
 80084fa:	9b01      	ldr	r3, [sp, #4]
 80084fc:	6120      	str	r0, [r4, #16]
 80084fe:	b15b      	cbz	r3, 8008518 <__smakebuf_r+0x74>
 8008500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f863 	bl	80085d0 <_isatty_r>
 800850a:	b128      	cbz	r0, 8008518 <__smakebuf_r+0x74>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	89a0      	ldrh	r0, [r4, #12]
 800851a:	4305      	orrs	r5, r0
 800851c:	81a5      	strh	r5, [r4, #12]
 800851e:	e7cd      	b.n	80084bc <__smakebuf_r+0x18>
 8008520:	0800725d 	.word	0x0800725d

08008524 <__ascii_mbtowc>:
 8008524:	b082      	sub	sp, #8
 8008526:	b901      	cbnz	r1, 800852a <__ascii_mbtowc+0x6>
 8008528:	a901      	add	r1, sp, #4
 800852a:	b142      	cbz	r2, 800853e <__ascii_mbtowc+0x1a>
 800852c:	b14b      	cbz	r3, 8008542 <__ascii_mbtowc+0x1e>
 800852e:	7813      	ldrb	r3, [r2, #0]
 8008530:	600b      	str	r3, [r1, #0]
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	1e10      	subs	r0, r2, #0
 8008536:	bf18      	it	ne
 8008538:	2001      	movne	r0, #1
 800853a:	b002      	add	sp, #8
 800853c:	4770      	bx	lr
 800853e:	4610      	mov	r0, r2
 8008540:	e7fb      	b.n	800853a <__ascii_mbtowc+0x16>
 8008542:	f06f 0001 	mvn.w	r0, #1
 8008546:	e7f8      	b.n	800853a <__ascii_mbtowc+0x16>

08008548 <__malloc_lock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_lock+0x8>)
 800854a:	f7fe bf5e 	b.w	800740a <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	20006468 	.word	0x20006468

08008554 <__malloc_unlock>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__malloc_unlock+0x8>)
 8008556:	f7fe bf59 	b.w	800740c <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	20006468 	.word	0x20006468

08008560 <_read_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_read_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7f9 fb20 	bl	8001bb4 <_read>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_read_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_read_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20006474 	.word	0x20006474

08008584 <__ascii_wctomb>:
 8008584:	b149      	cbz	r1, 800859a <__ascii_wctomb+0x16>
 8008586:	2aff      	cmp	r2, #255	; 0xff
 8008588:	bf85      	ittet	hi
 800858a:	238a      	movhi	r3, #138	; 0x8a
 800858c:	6003      	strhi	r3, [r0, #0]
 800858e:	700a      	strbls	r2, [r1, #0]
 8008590:	f04f 30ff 	movhi.w	r0, #4294967295
 8008594:	bf98      	it	ls
 8008596:	2001      	movls	r0, #1
 8008598:	4770      	bx	lr
 800859a:	4608      	mov	r0, r1
 800859c:	4770      	bx	lr

0800859e <abort>:
 800859e:	b508      	push	{r3, lr}
 80085a0:	2006      	movs	r0, #6
 80085a2:	f000 f84d 	bl	8008640 <raise>
 80085a6:	2001      	movs	r0, #1
 80085a8:	f7f9 fafa 	bl	8001ba0 <_exit>

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	; (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7f9 fb24 	bl	8001c06 <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20006474 	.word	0x20006474

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fb23 	bl	8001c26 <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20006474 	.word	0x20006474

080085f0 <_raise_r>:
 80085f0:	291f      	cmp	r1, #31
 80085f2:	b538      	push	{r3, r4, r5, lr}
 80085f4:	4604      	mov	r4, r0
 80085f6:	460d      	mov	r5, r1
 80085f8:	d904      	bls.n	8008604 <_raise_r+0x14>
 80085fa:	2316      	movs	r3, #22
 80085fc:	6003      	str	r3, [r0, #0]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008606:	b112      	cbz	r2, 800860e <_raise_r+0x1e>
 8008608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800860c:	b94b      	cbnz	r3, 8008622 <_raise_r+0x32>
 800860e:	4620      	mov	r0, r4
 8008610:	f000 f830 	bl	8008674 <_getpid_r>
 8008614:	462a      	mov	r2, r5
 8008616:	4601      	mov	r1, r0
 8008618:	4620      	mov	r0, r4
 800861a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861e:	f000 b817 	b.w	8008650 <_kill_r>
 8008622:	2b01      	cmp	r3, #1
 8008624:	d00a      	beq.n	800863c <_raise_r+0x4c>
 8008626:	1c59      	adds	r1, r3, #1
 8008628:	d103      	bne.n	8008632 <_raise_r+0x42>
 800862a:	2316      	movs	r3, #22
 800862c:	6003      	str	r3, [r0, #0]
 800862e:	2001      	movs	r0, #1
 8008630:	e7e7      	b.n	8008602 <_raise_r+0x12>
 8008632:	2400      	movs	r4, #0
 8008634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008638:	4628      	mov	r0, r5
 800863a:	4798      	blx	r3
 800863c:	2000      	movs	r0, #0
 800863e:	e7e0      	b.n	8008602 <_raise_r+0x12>

08008640 <raise>:
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <raise+0xc>)
 8008642:	4601      	mov	r1, r0
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f7ff bfd3 	b.w	80085f0 <_raise_r>
 800864a:	bf00      	nop
 800864c:	2000000c 	.word	0x2000000c

08008650 <_kill_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_kill_r+0x20>)
 8008654:	2300      	movs	r3, #0
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	f7f9 fa8f 	bl	8001b80 <_kill>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	d102      	bne.n	800866c <_kill_r+0x1c>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	b103      	cbz	r3, 800866c <_kill_r+0x1c>
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	bd38      	pop	{r3, r4, r5, pc}
 800866e:	bf00      	nop
 8008670:	20006474 	.word	0x20006474

08008674 <_getpid_r>:
 8008674:	f7f9 ba7c 	b.w	8001b70 <_getpid>

08008678 <sqrtf>:
 8008678:	b508      	push	{r3, lr}
 800867a:	ed2d 8b02 	vpush	{d8}
 800867e:	eeb0 8a40 	vmov.f32	s16, s0
 8008682:	f000 f817 	bl	80086b4 <__ieee754_sqrtf>
 8008686:	eeb4 8a48 	vcmp.f32	s16, s16
 800868a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868e:	d60c      	bvs.n	80086aa <sqrtf+0x32>
 8008690:	eddf 8a07 	vldr	s17, [pc, #28]	; 80086b0 <sqrtf+0x38>
 8008694:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	d505      	bpl.n	80086aa <sqrtf+0x32>
 800869e:	f7fd fa89 	bl	8005bb4 <__errno>
 80086a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80086a6:	2321      	movs	r3, #33	; 0x21
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	ecbd 8b02 	vpop	{d8}
 80086ae:	bd08      	pop	{r3, pc}
 80086b0:	00000000 	.word	0x00000000

080086b4 <__ieee754_sqrtf>:
 80086b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80086b8:	4770      	bx	lr
	...

080086bc <_init>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr

080086c8 <_fini>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr
