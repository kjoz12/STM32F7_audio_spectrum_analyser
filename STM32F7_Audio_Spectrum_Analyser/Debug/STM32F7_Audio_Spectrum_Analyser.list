
STM32F7_Audio_Spectrum_Analyser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013aac  08008bd8  08008bd8  00018bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c684  0801c684  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c684  0801c684  0002c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c68c  0801c68c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c68c  0801c68c  0002c68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c690  0801c690  0002c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801c694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001922c  200001e4  0801c878  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019410  0801c878  00039410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7ce  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba7  00000000  00000000  0004e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016da0  00000000  00000000  00052589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00069330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  0006a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028982  00000000  00000000  0006b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9f5  00000000  00000000  000942ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6ecf  00000000  00000000  000b3cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  001aab8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f8  00000000  00000000  001aac50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bc0 	.word	0x08008bc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008bc0 	.word	0x08008bc0

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb0:	b087      	sub	sp, #28
 8000fb2:	469b      	mov	fp, r3
 8000fb4:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
		
    if (function_char < ' ') {
 8000fb8:	281f      	cmp	r0, #31
 8000fba:	d901      	bls.n	8000fc0 <ILI9341_Draw_Char+0x14>
        Character = 0;
    } else {
        function_char -= 32;
 8000fbc:	3820      	subs	r0, #32
 8000fbe:	b2c0      	uxtb	r0, r0
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000fc0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000fc4:	4829      	ldr	r0, [pc, #164]	; (800106c <ILI9341_Draw_Char+0xc0>)
 8000fc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000fca:	3801      	subs	r0, #1
 8000fcc:	f10d 0810 	add.w	r8, sp, #16
{
 8000fd0:	4643      	mov	r3, r8
		{
		temp[k] = font[function_char][k];
 8000fd2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8000fd6:	f803 4b01 	strb.w	r4, [r3], #1
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000fda:	f10d 0416 	add.w	r4, sp, #22
 8000fde:	42a3      	cmp	r3, r4
 8000fe0:	d1f7      	bne.n	8000fd2 <ILI9341_Draw_Char+0x26>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000fe2:	fa1f f981 	uxth.w	r9, r1
 8000fe6:	b290      	uxth	r0, r2
 8000fe8:	9003      	str	r0, [sp, #12]
 8000fea:	00fb      	lsls	r3, r7, #3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8000ffa:	9100      	str	r1, [sp, #0]
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	4648      	mov	r0, r9
 8001000:	f000 fb94 	bl	800172c <ILI9341_Draw_Rectangle>
 8001004:	46ca      	mov	sl, r9
 8001006:	e029      	b.n	800105c <ILI9341_Draw_Char+0xb0>
    for (j=0; j<CHAR_WIDTH; j++) {
        for (i=0; i<CHAR_HEIGHT; i++) {
            if (temp[j] & (1<<i)) {			
							if(Size == 1)
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001008:	465a      	mov	r2, fp
 800100a:	4629      	mov	r1, r5
 800100c:	4650      	mov	r0, sl
 800100e:	f000 fac9 	bl	80015a4 <ILI9341_Draw_Pixel>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001012:	3601      	adds	r6, #1
 8001014:	443c      	add	r4, r7
 8001016:	b2a4      	uxth	r4, r4
 8001018:	3501      	adds	r5, #1
 800101a:	b2ad      	uxth	r5, r5
 800101c:	2e08      	cmp	r6, #8
 800101e:	d010      	beq.n	8001042 <ILI9341_Draw_Char+0x96>
            if (temp[j] & (1<<i)) {			
 8001020:	f898 3000 	ldrb.w	r3, [r8]
 8001024:	4133      	asrs	r3, r6
 8001026:	f013 0f01 	tst.w	r3, #1
 800102a:	d0f2      	beq.n	8001012 <ILI9341_Draw_Char+0x66>
							if(Size == 1)
 800102c:	2f01      	cmp	r7, #1
 800102e:	d0eb      	beq.n	8001008 <ILI9341_Draw_Char+0x5c>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001030:	f8cd b000 	str.w	fp, [sp]
 8001034:	463b      	mov	r3, r7
 8001036:	463a      	mov	r2, r7
 8001038:	4621      	mov	r1, r4
 800103a:	4648      	mov	r0, r9
 800103c:	f000 fb76 	bl	800172c <ILI9341_Draw_Rectangle>
 8001040:	e7e7      	b.n	8001012 <ILI9341_Draw_Char+0x66>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001042:	44b9      	add	r9, r7
 8001044:	fa1f f989 	uxth.w	r9, r9
 8001048:	f10a 0a01 	add.w	sl, sl, #1
 800104c:	fa1f fa8a 	uxth.w	sl, sl
 8001050:	f108 0801 	add.w	r8, r8, #1
 8001054:	f10d 0316 	add.w	r3, sp, #22
 8001058:	4598      	cmp	r8, r3
 800105a:	d003      	beq.n	8001064 <ILI9341_Draw_Char+0xb8>
{
 800105c:	9c03      	ldr	r4, [sp, #12]
 800105e:	4625      	mov	r5, r4
 8001060:	2600      	movs	r6, #0
 8001062:	e7dd      	b.n	8001020 <ILI9341_Draw_Char+0x74>
							}
            }						
        }
    }
}
 8001064:	b007      	add	sp, #28
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106a:	bf00      	nop
 800106c:	08008bd8 	.word	0x08008bd8

08001070 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	4605      	mov	r5, r0
 8001078:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 800107c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    while (*Text) {
 8001080:	7800      	ldrb	r0, [r0, #0]
 8001082:	b1a8      	cbz	r0, 80010b0 <ILI9341_Draw_Text+0x40>
 8001084:	460c      	mov	r4, r1
 8001086:	4617      	mov	r7, r2
 8001088:	4698      	mov	r8, r3
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
        X += CHAR_WIDTH*Size;
 800108a:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 800108e:	0076      	lsls	r6, r6, #1
 8001090:	b2f6      	uxtb	r6, r6
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001092:	f8cd a004 	str.w	sl, [sp, #4]
 8001096:	f8cd 9000 	str.w	r9, [sp]
 800109a:	4643      	mov	r3, r8
 800109c:	463a      	mov	r2, r7
 800109e:	4621      	mov	r1, r4
 80010a0:	f7ff ff84 	bl	8000fac <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80010a4:	4434      	add	r4, r6
 80010a6:	b2e4      	uxtb	r4, r4
    while (*Text) {
 80010a8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d1f0      	bne.n	8001092 <ILI9341_Draw_Text+0x22>
    }
}
 80010b0:	b002      	add	sp, #8
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080010b8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
//
/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80010b8:	b508      	push	{r3, lr}
MX_SPI5_Init();																							//SPI INIT
 80010ba:	f000 feb1 	bl	8001e20 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80010be:	f000 fb69 	bl	8001794 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	4801      	ldr	r0, [pc, #4]	; (80010d0 <ILI9341_SPI_Init+0x18>)
 80010ca:	f001 fcb9 	bl	8002a40 <HAL_GPIO_WritePin>
}
 80010ce:	bd08      	pop	{r3, pc}
 80010d0:	40020800 	.word	0x40020800

080010d4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80010d4:	b500      	push	{lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	f88d 0007 	strb.w	r0, [sp, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80010dc:	2301      	movs	r3, #1
 80010de:	461a      	mov	r2, r3
 80010e0:	f10d 0107 	add.w	r1, sp, #7
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <ILI9341_SPI_Send+0x1c>)
 80010e6:	f002 fe0b 	bl	8003d00 <HAL_SPI_Transmit>
}
 80010ea:	b003      	add	sp, #12
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	20019348 	.word	0x20019348

080010f4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010f8:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <ILI9341_Write_Command+0x34>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	4620      	mov	r0, r4
 8001102:	f001 fc9d 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	4620      	mov	r0, r4
 800110e:	f001 fc97 	bl	8002a40 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001112:	4628      	mov	r0, r5
 8001114:	f7ff ffde 	bl	80010d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	4620      	mov	r0, r4
 8001120:	f001 fc8e 	bl	8002a40 <HAL_GPIO_WritePin>
}
 8001124:	bd38      	pop	{r3, r4, r5, pc}
 8001126:	bf00      	nop
 8001128:	40020800 	.word	0x40020800

0800112c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <ILI9341_Write_Data+0x34>)
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001138:	4620      	mov	r0, r4
 800113a:	f001 fc81 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4620      	mov	r0, r4
 8001146:	f001 fc7b 	bl	8002a40 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff ffc2 	bl	80010d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4620      	mov	r0, r4
 8001158:	f001 fc72 	bl	8002a40 <HAL_GPIO_WritePin>
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	bf00      	nop
 8001160:	40020800 	.word	0x40020800

08001164 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	4607      	mov	r7, r0
 8001168:	460d      	mov	r5, r1
 800116a:	4616      	mov	r6, r2
 800116c:	461c      	mov	r4, r3
ILI9341_Write_Command(0x2A);
 800116e:	202a      	movs	r0, #42	; 0x2a
 8001170:	f7ff ffc0 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001174:	0a38      	lsrs	r0, r7, #8
 8001176:	f7ff ffd9 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800117a:	b2f8      	uxtb	r0, r7
 800117c:	f7ff ffd6 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001180:	0a30      	lsrs	r0, r6, #8
 8001182:	f7ff ffd3 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001186:	b2f0      	uxtb	r0, r6
 8001188:	f7ff ffd0 	bl	800112c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800118c:	202b      	movs	r0, #43	; 0x2b
 800118e:	f7ff ffb1 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001192:	0a28      	lsrs	r0, r5, #8
 8001194:	f7ff ffca 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001198:	b2e8      	uxtb	r0, r5
 800119a:	f7ff ffc7 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800119e:	0a20      	lsrs	r0, r4, #8
 80011a0:	f7ff ffc4 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80011a4:	b2e0      	uxtb	r0, r4
 80011a6:	f7ff ffc1 	bl	800112c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80011aa:	202c      	movs	r0, #44	; 0x2c
 80011ac:	f7ff ffa2 	bl	80010f4 <ILI9341_Write_Command>
}
 80011b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011b4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80011b4:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80011b6:	4c0d      	ldr	r4, [pc, #52]	; (80011ec <ILI9341_Reset+0x38>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011be:	4620      	mov	r0, r4
 80011c0:	f001 fc3e 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80011c4:	20c8      	movs	r0, #200	; 0xc8
 80011c6:	f001 f89d 	bl	8002304 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4620      	mov	r0, r4
 80011d2:	f001 fc35 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80011d6:	20c8      	movs	r0, #200	; 0xc8
 80011d8:	f001 f894 	bl	8002304 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	4620      	mov	r0, r4
 80011e4:	f001 fc2c 	bl	8002a40 <HAL_GPIO_WritePin>
}
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	bf00      	nop
 80011ec:	40020800 	.word	0x40020800

080011f0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	4604      	mov	r4, r0
	
uint8_t screen_rotation = Rotation;

ILI9341_Write_Command(0x36);
 80011f4:	2036      	movs	r0, #54	; 0x36
 80011f6:	f7ff ff7d 	bl	80010f4 <ILI9341_Write_Command>
HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 f882 	bl	8002304 <HAL_Delay>
	
switch(screen_rotation) 
 8001200:	2c03      	cmp	r4, #3
 8001202:	d80d      	bhi.n	8001220 <ILI9341_Set_Rotation+0x30>
 8001204:	e8df f004 	tbb	[pc, r4]
 8001208:	23180d02 	.word	0x23180d02
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800120c:	2048      	movs	r0, #72	; 0x48
 800120e:	f7ff ff8d 	bl	800112c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <ILI9341_Set_Rotation+0x74>)
 8001214:	22f0      	movs	r2, #240	; 0xf0
 8001216:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <ILI9341_Set_Rotation+0x78>)
 800121a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800121e:	801a      	strh	r2, [r3, #0]
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
	}
}
 8001220:	bd10      	pop	{r4, pc}
			ILI9341_Write_Data(0x20|0x08);
 8001222:	2028      	movs	r0, #40	; 0x28
 8001224:	f7ff ff82 	bl	800112c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <ILI9341_Set_Rotation+0x74>)
 800122a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800122e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <ILI9341_Set_Rotation+0x78>)
 8001232:	22f0      	movs	r2, #240	; 0xf0
 8001234:	801a      	strh	r2, [r3, #0]
			break;
 8001236:	e7f3      	b.n	8001220 <ILI9341_Set_Rotation+0x30>
			ILI9341_Write_Data(0x80|0x08);
 8001238:	2088      	movs	r0, #136	; 0x88
 800123a:	f7ff ff77 	bl	800112c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <ILI9341_Set_Rotation+0x74>)
 8001240:	22f0      	movs	r2, #240	; 0xf0
 8001242:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <ILI9341_Set_Rotation+0x78>)
 8001246:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800124a:	801a      	strh	r2, [r3, #0]
			break;
 800124c:	e7e8      	b.n	8001220 <ILI9341_Set_Rotation+0x30>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800124e:	20e8      	movs	r0, #232	; 0xe8
 8001250:	f7ff ff6c 	bl	800112c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <ILI9341_Set_Rotation+0x74>)
 8001256:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800125a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <ILI9341_Set_Rotation+0x78>)
 800125e:	22f0      	movs	r2, #240	; 0xf0
 8001260:	801a      	strh	r2, [r3, #0]
}
 8001262:	e7dd      	b.n	8001220 <ILI9341_Set_Rotation+0x30>
 8001264:	20000002 	.word	0x20000002
 8001268:	20000000 	.word	0x20000000

0800126c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800126c:	b508      	push	{r3, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001274:	4801      	ldr	r0, [pc, #4]	; (800127c <ILI9341_Enable+0x10>)
 8001276:	f001 fbe3 	bl	8002a40 <HAL_GPIO_WritePin>
}
 800127a:	bd08      	pop	{r3, pc}
 800127c:	40020800 	.word	0x40020800

08001280 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001280:	b508      	push	{r3, lr}

ILI9341_Enable();
 8001282:	f7ff fff3 	bl	800126c <ILI9341_Enable>
ILI9341_SPI_Init();
 8001286:	f7ff ff17 	bl	80010b8 <ILI9341_SPI_Init>
ILI9341_Reset();
 800128a:	f7ff ff93 	bl	80011b4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ff30 	bl	80010f4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001298:	f001 f834 	bl	8002304 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800129c:	20cb      	movs	r0, #203	; 0xcb
 800129e:	f7ff ff29 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80012a2:	2039      	movs	r0, #57	; 0x39
 80012a4:	f7ff ff42 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80012a8:	202c      	movs	r0, #44	; 0x2c
 80012aa:	f7ff ff3f 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff3c 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80012b4:	2034      	movs	r0, #52	; 0x34
 80012b6:	f7ff ff39 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f7ff ff36 	bl	800112c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80012c0:	20cf      	movs	r0, #207	; 0xcf
 80012c2:	f7ff ff17 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff30 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80012cc:	20c1      	movs	r0, #193	; 0xc1
 80012ce:	f7ff ff2d 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80012d2:	2030      	movs	r0, #48	; 0x30
 80012d4:	f7ff ff2a 	bl	800112c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80012d8:	20e8      	movs	r0, #232	; 0xe8
 80012da:	f7ff ff0b 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80012de:	2085      	movs	r0, #133	; 0x85
 80012e0:	f7ff ff24 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ff21 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80012ea:	2078      	movs	r0, #120	; 0x78
 80012ec:	f7ff ff1e 	bl	800112c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80012f0:	20ea      	movs	r0, #234	; 0xea
 80012f2:	f7ff feff 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ff18 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff15 	bl	800112c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001302:	20ed      	movs	r0, #237	; 0xed
 8001304:	f7ff fef6 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f7ff ff0f 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800130e:	2003      	movs	r0, #3
 8001310:	f7ff ff0c 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001314:	2012      	movs	r0, #18
 8001316:	f7ff ff09 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800131a:	2081      	movs	r0, #129	; 0x81
 800131c:	f7ff ff06 	bl	800112c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001320:	20f7      	movs	r0, #247	; 0xf7
 8001322:	f7ff fee7 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001326:	2020      	movs	r0, #32
 8001328:	f7ff ff00 	bl	800112c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800132c:	20c0      	movs	r0, #192	; 0xc0
 800132e:	f7ff fee1 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001332:	2023      	movs	r0, #35	; 0x23
 8001334:	f7ff fefa 	bl	800112c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001338:	20c1      	movs	r0, #193	; 0xc1
 800133a:	f7ff fedb 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800133e:	2010      	movs	r0, #16
 8001340:	f7ff fef4 	bl	800112c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001344:	20c5      	movs	r0, #197	; 0xc5
 8001346:	f7ff fed5 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800134a:	203e      	movs	r0, #62	; 0x3e
 800134c:	f7ff feee 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001350:	2028      	movs	r0, #40	; 0x28
 8001352:	f7ff feeb 	bl	800112c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001356:	20c7      	movs	r0, #199	; 0xc7
 8001358:	f7ff fecc 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800135c:	2086      	movs	r0, #134	; 0x86
 800135e:	f7ff fee5 	bl	800112c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f7ff fec6 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001368:	2048      	movs	r0, #72	; 0x48
 800136a:	f7ff fedf 	bl	800112c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800136e:	203a      	movs	r0, #58	; 0x3a
 8001370:	f7ff fec0 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001374:	2055      	movs	r0, #85	; 0x55
 8001376:	f7ff fed9 	bl	800112c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800137a:	20b1      	movs	r0, #177	; 0xb1
 800137c:	f7ff feba 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fed3 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001386:	2018      	movs	r0, #24
 8001388:	f7ff fed0 	bl	800112c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800138c:	20b6      	movs	r0, #182	; 0xb6
 800138e:	f7ff feb1 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001392:	2008      	movs	r0, #8
 8001394:	f7ff feca 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001398:	2082      	movs	r0, #130	; 0x82
 800139a:	f7ff fec7 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800139e:	2027      	movs	r0, #39	; 0x27
 80013a0:	f7ff fec4 	bl	800112c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80013a4:	20f2      	movs	r0, #242	; 0xf2
 80013a6:	f7ff fea5 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff febe 	bl	800112c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80013b0:	2026      	movs	r0, #38	; 0x26
 80013b2:	f7ff fe9f 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff feb8 	bl	800112c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80013bc:	20e0      	movs	r0, #224	; 0xe0
 80013be:	f7ff fe99 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f7ff feb2 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80013c8:	2031      	movs	r0, #49	; 0x31
 80013ca:	f7ff feaf 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80013ce:	202b      	movs	r0, #43	; 0x2b
 80013d0:	f7ff feac 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80013d4:	200c      	movs	r0, #12
 80013d6:	f7ff fea9 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80013da:	200e      	movs	r0, #14
 80013dc:	f7ff fea6 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80013e0:	2008      	movs	r0, #8
 80013e2:	f7ff fea3 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80013e6:	204e      	movs	r0, #78	; 0x4e
 80013e8:	f7ff fea0 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80013ec:	20f1      	movs	r0, #241	; 0xf1
 80013ee:	f7ff fe9d 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80013f2:	2037      	movs	r0, #55	; 0x37
 80013f4:	f7ff fe9a 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80013f8:	2007      	movs	r0, #7
 80013fa:	f7ff fe97 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80013fe:	2010      	movs	r0, #16
 8001400:	f7ff fe94 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001404:	2003      	movs	r0, #3
 8001406:	f7ff fe91 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800140a:	200e      	movs	r0, #14
 800140c:	f7ff fe8e 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001410:	2009      	movs	r0, #9
 8001412:	f7ff fe8b 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fe88 	bl	800112c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800141c:	20e1      	movs	r0, #225	; 0xe1
 800141e:	f7ff fe69 	bl	80010f4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fe82 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001428:	200e      	movs	r0, #14
 800142a:	f7ff fe7f 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800142e:	2014      	movs	r0, #20
 8001430:	f7ff fe7c 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001434:	2003      	movs	r0, #3
 8001436:	f7ff fe79 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800143a:	2011      	movs	r0, #17
 800143c:	f7ff fe76 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001440:	2007      	movs	r0, #7
 8001442:	f7ff fe73 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001446:	2031      	movs	r0, #49	; 0x31
 8001448:	f7ff fe70 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800144c:	20c1      	movs	r0, #193	; 0xc1
 800144e:	f7ff fe6d 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001452:	2048      	movs	r0, #72	; 0x48
 8001454:	f7ff fe6a 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001458:	2008      	movs	r0, #8
 800145a:	f7ff fe67 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800145e:	200f      	movs	r0, #15
 8001460:	f7ff fe64 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001464:	200c      	movs	r0, #12
 8001466:	f7ff fe61 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800146a:	2031      	movs	r0, #49	; 0x31
 800146c:	f7ff fe5e 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001470:	2036      	movs	r0, #54	; 0x36
 8001472:	f7ff fe5b 	bl	800112c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001476:	200f      	movs	r0, #15
 8001478:	f7ff fe58 	bl	800112c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800147c:	2011      	movs	r0, #17
 800147e:	f7ff fe39 	bl	80010f4 <ILI9341_Write_Command>
HAL_Delay(120);
 8001482:	2078      	movs	r0, #120	; 0x78
 8001484:	f000 ff3e 	bl	8002304 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001488:	2029      	movs	r0, #41	; 0x29
 800148a:	f7ff fe33 	bl	80010f4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff feae 	bl	80011f0 <ILI9341_Set_Rotation>
}
 8001494:	bd08      	pop	{r3, pc}
	...

08001498 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	af00      	add	r7, sp, #0
 800149e:	4606      	mov	r6, r0
//SENDS COLOUR
uint32_t Buffer_Size = 0;
if((Size*2) < BURST_MAX_SIZE)
 80014a0:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80014a4:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 80014a8:	d22e      	bcs.n	8001508 <ILI9341_Draw_Colour_Burst+0x70>
 80014aa:	460c      	mov	r4, r1
else
{
	Buffer_Size = BURST_MAX_SIZE;
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80014ac:	4d2e      	ldr	r5, [pc, #184]	; (8001568 <ILI9341_Draw_Colour_Burst+0xd0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	4628      	mov	r0, r5
 80014b6:	f001 fac3 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c0:	4628      	mov	r0, r5
 80014c2:	f001 fabd 	bl	8002a40 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80014c6:	0a32      	lsrs	r2, r6, #8
unsigned char burst_buffer[Buffer_Size];
 80014c8:	1de3      	adds	r3, r4, #7
 80014ca:	f023 0307 	bic.w	r3, r3, #7
 80014ce:	ebad 0d03 	sub.w	sp, sp, r3
 80014d2:	466d      	mov	r5, sp
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80014d4:	bb54      	cbnz	r4, 800152c <ILI9341_Draw_Colour_Burst+0x94>
		burst_buffer[j] = 	chifted;
		burst_buffer[j+1] = Colour;
	}

uint32_t Sending_Size = Size*2;
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80014d6:	f04f 0900 	mov.w	r9, #0
 80014da:	46c8      	mov	r8, r9
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;

if(Sending_in_Block != 0)
 80014dc:	e001      	b.n	80014e2 <ILI9341_Draw_Colour_Burst+0x4a>
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80014de:	fbb8 f8f4 	udiv	r8, r8, r4
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80014e2:	f1b8 0f00 	cmp.w	r8, #0
 80014e6:	d02e      	beq.n	8001546 <ILI9341_Draw_Colour_Burst+0xae>
 80014e8:	2600      	movs	r6, #0
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80014ea:	fa1f fb84 	uxth.w	fp, r4
 80014ee:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800156c <ILI9341_Draw_Colour_Burst+0xd4>
 80014f2:	240a      	movs	r4, #10
 80014f4:	4623      	mov	r3, r4
 80014f6:	465a      	mov	r2, fp
 80014f8:	4629      	mov	r1, r5
 80014fa:	4650      	mov	r0, sl
 80014fc:	f002 fc00 	bl	8003d00 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001500:	3601      	adds	r6, #1
 8001502:	4546      	cmp	r6, r8
 8001504:	d1f6      	bne.n	80014f4 <ILI9341_Draw_Colour_Burst+0x5c>
 8001506:	e01e      	b.n	8001546 <ILI9341_Draw_Colour_Burst+0xae>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001508:	4c17      	ldr	r4, [pc, #92]	; (8001568 <ILI9341_Draw_Colour_Burst+0xd0>)
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	4620      	mov	r0, r4
 8001512:	f001 fa95 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4620      	mov	r0, r4
 800151e:	f001 fa8f 	bl	8002a40 <HAL_GPIO_WritePin>
unsigned char chifted = 	Colour>>8;;
 8001522:	0a32      	lsrs	r2, r6, #8
unsigned char burst_buffer[Buffer_Size];
 8001524:	b0fe      	sub	sp, #504	; 0x1f8
 8001526:	466d      	mov	r5, sp
	Buffer_Size = BURST_MAX_SIZE;
 8001528:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 800152c:	2300      	movs	r3, #0
		burst_buffer[j+1] = Colour;
 800152e:	1c69      	adds	r1, r5, #1
		burst_buffer[j] = 	chifted;
 8001530:	54ea      	strb	r2, [r5, r3]
		burst_buffer[j+1] = Colour;
 8001532:	54ce      	strb	r6, [r1, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001534:	3302      	adds	r3, #2
 8001536:	42a3      	cmp	r3, r4
 8001538:	d3fa      	bcc.n	8001530 <ILI9341_Draw_Colour_Burst+0x98>
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800153a:	fbb8 f9f4 	udiv	r9, r8, r4
 800153e:	fb04 8919 	mls	r9, r4, r9, r8
if(Sending_in_Block != 0)
 8001542:	45a0      	cmp	r8, r4
 8001544:	d2cb      	bcs.n	80014de <ILI9341_Draw_Colour_Burst+0x46>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001546:	230a      	movs	r3, #10
 8001548:	fa1f f289 	uxth.w	r2, r9
 800154c:	4629      	mov	r1, r5
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <ILI9341_Draw_Colour_Burst+0xd4>)
 8001550:	f002 fbd6 	bl	8003d00 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <ILI9341_Draw_Colour_Burst+0xd0>)
 800155c:	f001 fa70 	bl	8002a40 <HAL_GPIO_WritePin>
}
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001566:	bf00      	nop
 8001568:	40020800 	.word	0x40020800
 800156c:	20019348 	.word	0x20019348

08001570 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	4604      	mov	r4, r0
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001574:	4e09      	ldr	r6, [pc, #36]	; (800159c <ILI9341_Fill_Screen+0x2c>)
 8001576:	8832      	ldrh	r2, [r6, #0]
 8001578:	4d09      	ldr	r5, [pc, #36]	; (80015a0 <ILI9341_Fill_Screen+0x30>)
 800157a:	882b      	ldrh	r3, [r5, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	b292      	uxth	r2, r2
 8001580:	2100      	movs	r1, #0
 8001582:	4608      	mov	r0, r1
 8001584:	f7ff fdee 	bl	8001164 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001588:	8833      	ldrh	r3, [r6, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	8829      	ldrh	r1, [r5, #0]
 800158e:	b289      	uxth	r1, r1
 8001590:	fb03 f101 	mul.w	r1, r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff7f 	bl	8001498 <ILI9341_Draw_Colour_Burst>
}
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	20000002 	.word	0x20000002
 80015a0:	20000000 	.word	0x20000000

080015a4 <ILI9341_Draw_Pixel>:
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <ILI9341_Draw_Pixel+0x178>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4283      	cmp	r3, r0
 80015ac:	f240 80b5 	bls.w	800171a <ILI9341_Draw_Pixel+0x176>
{
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	4604      	mov	r4, r0
 80015b6:	460e      	mov	r6, r1
 80015b8:	4617      	mov	r7, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <ILI9341_Draw_Pixel+0x17c>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d801      	bhi.n	80015c8 <ILI9341_Draw_Pixel+0x24>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	
}
 80015c4:	b005      	add	sp, #20
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80015c8:	4d56      	ldr	r5, [pc, #344]	; (8001724 <ILI9341_Draw_Pixel+0x180>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	4628      	mov	r0, r5
 80015d2:	f001 fa35 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015dc:	4628      	mov	r0, r5
 80015de:	f001 fa2f 	bl	8002a40 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80015e2:	202a      	movs	r0, #42	; 0x2a
 80015e4:	f7ff fd76 	bl	80010d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ee:	4628      	mov	r0, r5
 80015f0:	f001 fa26 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fa:	4628      	mov	r0, r5
 80015fc:	f001 fa20 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001606:	4628      	mov	r0, r5
 8001608:	f001 fa1a 	bl	8002a40 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800160c:	0a23      	lsrs	r3, r4, #8
 800160e:	f88d 300c 	strb.w	r3, [sp, #12]
 8001612:	b2e3      	uxtb	r3, r4
 8001614:	f88d 300d 	strb.w	r3, [sp, #13]
 8001618:	3401      	adds	r4, #1
 800161a:	1224      	asrs	r4, r4, #8
 800161c:	f88d 400e 	strb.w	r4, [sp, #14]
 8001620:	3301      	adds	r3, #1
 8001622:	f88d 300f 	strb.w	r3, [sp, #15]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001626:	4c40      	ldr	r4, [pc, #256]	; (8001728 <ILI9341_Draw_Pixel+0x184>)
 8001628:	2301      	movs	r3, #1
 800162a:	2204      	movs	r2, #4
 800162c:	a903      	add	r1, sp, #12
 800162e:	4620      	mov	r0, r4
 8001630:	f002 fb66 	bl	8003d00 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163a:	4628      	mov	r0, r5
 800163c:	f001 fa00 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001646:	4628      	mov	r0, r5
 8001648:	f001 f9fa 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	4628      	mov	r0, r5
 8001654:	f001 f9f4 	bl	8002a40 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001658:	202b      	movs	r0, #43	; 0x2b
 800165a:	f7ff fd3b 	bl	80010d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	4628      	mov	r0, r5
 8001666:	f001 f9eb 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001670:	4628      	mov	r0, r5
 8001672:	f001 f9e5 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4628      	mov	r0, r5
 800167e:	f001 f9df 	bl	8002a40 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001682:	0a33      	lsrs	r3, r6, #8
 8001684:	f88d 3008 	strb.w	r3, [sp, #8]
 8001688:	b2f3      	uxtb	r3, r6
 800168a:	f88d 3009 	strb.w	r3, [sp, #9]
 800168e:	3601      	adds	r6, #1
 8001690:	1236      	asrs	r6, r6, #8
 8001692:	f88d 600a 	strb.w	r6, [sp, #10]
 8001696:	3301      	adds	r3, #1
 8001698:	f88d 300b 	strb.w	r3, [sp, #11]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800169c:	2301      	movs	r3, #1
 800169e:	2204      	movs	r2, #4
 80016a0:	a902      	add	r1, sp, #8
 80016a2:	4620      	mov	r0, r4
 80016a4:	f002 fb2c 	bl	8003d00 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ae:	4628      	mov	r0, r5
 80016b0:	f001 f9c6 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ba:	4628      	mov	r0, r5
 80016bc:	f001 f9c0 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	4628      	mov	r0, r5
 80016c8:	f001 f9ba 	bl	8002a40 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80016cc:	202c      	movs	r0, #44	; 0x2c
 80016ce:	f7ff fd01 	bl	80010d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	4628      	mov	r0, r5
 80016da:	f001 f9b1 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	4628      	mov	r0, r5
 80016e6:	f001 f9ab 	bl	8002a40 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f0:	4628      	mov	r0, r5
 80016f2:	f001 f9a5 	bl	8002a40 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80016f6:	0a3b      	lsrs	r3, r7, #8
 80016f8:	f88d 3004 	strb.w	r3, [sp, #4]
 80016fc:	f88d 7005 	strb.w	r7, [sp, #5]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001700:	2301      	movs	r3, #1
 8001702:	2202      	movs	r2, #2
 8001704:	a901      	add	r1, sp, #4
 8001706:	4620      	mov	r0, r4
 8001708:	f002 fafa 	bl	8003d00 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4628      	mov	r0, r5
 8001714:	f001 f994 	bl	8002a40 <HAL_GPIO_WritePin>
 8001718:	e754      	b.n	80015c4 <ILI9341_Draw_Pixel+0x20>
 800171a:	4770      	bx	lr
 800171c:	20000002 	.word	0x20000002
 8001720:	20000000 	.word	0x20000000
 8001724:	40020800 	.word	0x40020800
 8001728:	20019348 	.word	0x20019348

0800172c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	461c      	mov	r4, r3
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <ILI9341_Draw_Rectangle+0x60>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4283      	cmp	r3, r0
 8001738:	d927      	bls.n	800178a <ILI9341_Draw_Rectangle+0x5e>
 800173a:	4615      	mov	r5, r2
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <ILI9341_Draw_Rectangle+0x64>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	428b      	cmp	r3, r1
 8001744:	d921      	bls.n	800178a <ILI9341_Draw_Rectangle+0x5e>
if((X+Width-1)>=LCD_WIDTH)
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <ILI9341_Draw_Rectangle+0x60>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	1882      	adds	r2, r0, r2
 800174e:	429a      	cmp	r2, r3
 8001750:	dd03      	ble.n	800175a <ILI9341_Draw_Rectangle+0x2e>
	{
		Width=LCD_WIDTH-X;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <ILI9341_Draw_Rectangle+0x60>)
 8001754:	881d      	ldrh	r5, [r3, #0]
 8001756:	1a2d      	subs	r5, r5, r0
 8001758:	b2ad      	uxth	r5, r5
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <ILI9341_Draw_Rectangle+0x64>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	190a      	adds	r2, r1, r4
 8001762:	429a      	cmp	r2, r3
 8001764:	dd03      	ble.n	800176e <ILI9341_Draw_Rectangle+0x42>
	{
		Height=LCD_HEIGHT-Y;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <ILI9341_Draw_Rectangle+0x64>)
 8001768:	881c      	ldrh	r4, [r3, #0]
 800176a:	1a64      	subs	r4, r4, r1
 800176c:	b2a4      	uxth	r4, r4
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800176e:	1e4b      	subs	r3, r1, #1
 8001770:	4423      	add	r3, r4
 8001772:	1e42      	subs	r2, r0, #1
 8001774:	442a      	add	r2, r5
 8001776:	b29b      	uxth	r3, r3
 8001778:	b292      	uxth	r2, r2
 800177a:	f7ff fcf3 	bl	8001164 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800177e:	fb05 f104 	mul.w	r1, r5, r4
 8001782:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001786:	f7ff fe87 	bl	8001498 <ILI9341_Draw_Colour_Burst>
}
 800178a:	bd38      	pop	{r3, r4, r5, pc}
 800178c:	20000002 	.word	0x20000002
 8001790:	20000000 	.word	0x20000000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b530      	push	{r4, r5, lr}
 8001796:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	2400      	movs	r4, #0
 800179a:	9405      	str	r4, [sp, #20]
 800179c:	9406      	str	r4, [sp, #24]
 800179e:	9407      	str	r4, [sp, #28]
 80017a0:	9408      	str	r4, [sp, #32]
 80017a2:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_GPIO_Init+0x98>)
 80017a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
 80017ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b0:	f002 0220 	and.w	r2, r2, #32
 80017b4:	9200      	str	r2, [sp, #0]
 80017b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ba:	f042 0204 	orr.w	r2, r2, #4
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
 80017c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c2:	f002 0204 	and.w	r2, r2, #4
 80017c6:	9201      	str	r2, [sp, #4]
 80017c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
 80017d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d4:	f002 0201 	and.w	r2, r2, #1
 80017d8:	9202      	str	r2, [sp, #8]
 80017da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017de:	f042 0202 	orr.w	r2, r2, #2
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	f002 0202 	and.w	r2, r2, #2
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f0:	f042 0208 	orr.w	r2, r2, #8
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001800:	4d0b      	ldr	r5, [pc, #44]	; (8001830 <MX_GPIO_Init+0x9c>)
 8001802:	4622      	mov	r2, r4
 8001804:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001808:	4628      	mov	r0, r5
 800180a:	f001 f919 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800180e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001812:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	a905      	add	r1, sp, #20
 8001820:	4628      	mov	r0, r5
 8001822:	f000 ffdb 	bl	80027dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001826:	b00b      	add	sp, #44	; 0x2c
 8001828:	bd30      	pop	{r4, r5, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40020800 	.word	0x40020800

08001834 <user_leds_init>:



void user_leds_init(void)
{
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <user_leds_init+0x40>)
 8001836:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PB0 as output
	GPIOB->MODER |= (1U<<0);
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <user_leds_init+0x44>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1U<<1);
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f022 0202 	bic.w	r2, r2, #2
 800184e:	601a      	str	r2, [r3, #0]

	//Set PB7 as output
	GPIOB->MODER |= (1U<<14);
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001856:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1U<<15);
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800185e:	601a      	str	r2, [r3, #0]

	//Set PB14 as output
	GPIOB->MODER |= (1U<<28);
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001866:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1U<<29);
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800186e:	601a      	str	r2, [r3, #0]




}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <led_toggle>:
}


void led_toggle(ledType led)
{
	GPIOB->ODR ^=led;
 800187c:	4a02      	ldr	r2, [pc, #8]	; (8001888 <led_toggle+0xc>)
 800187e:	6953      	ldr	r3, [r2, #20]
 8001880:	4043      	eors	r3, r0
 8001882:	6153      	str	r3, [r2, #20]
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40020400 	.word	0x40020400

0800188c <led_on>:


void led_on(ledType led)
{
	GPIOB->ODR |=led;
 800188c:	4a02      	ldr	r2, [pc, #8]	; (8001898 <led_on+0xc>)
 800188e:	6953      	ldr	r3, [r2, #20]
 8001890:	4303      	orrs	r3, r0
 8001892:	6153      	str	r3, [r2, #20]
}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40020400 	.word	0x40020400

0800189c <PeriphCommonClock_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PeriphCommonClock_Config(void) //Disappears when I2S1 disabled
{
 800189c:	b500      	push	{lr}
 800189e:	b0a3      	sub	sp, #140	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	2270      	movs	r2, #112	; 0x70
 80018a2:	2100      	movs	r1, #0
 80018a4:	a806      	add	r0, sp, #24
 80018a6:	f004 f85f 	bl	8005968 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018aa:	2201      	movs	r2, #1
 80018ac:	9201      	str	r2, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018b6:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80018b8:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80018ba:	920a      	str	r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018bc:	a801      	add	r0, sp, #4
 80018be:	f001 fda1 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	b910      	cbnz	r0, 80018ca <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
  }
}
 80018c4:	b023      	add	sp, #140	; 0x8c
 80018c6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ca:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <PeriphCommonClock_Config+0x30>
	...

080018d0 <DoFFT>:
void DoFFT() {
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	ed2d 8b02 	vpush	{d8}
 80018d8:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80018dc:	b087      	sub	sp, #28
	arm_rfft_fast_f32(&fft_handler, fft_in_buf, fft_out_buf,0);
 80018de:	2300      	movs	r3, #0
 80018e0:	4a81      	ldr	r2, [pc, #516]	; (8001ae8 <DoFFT+0x218>)
 80018e2:	4982      	ldr	r1, [pc, #520]	; (8001aec <DoFFT+0x21c>)
 80018e4:	4882      	ldr	r0, [pc, #520]	; (8001af0 <DoFFT+0x220>)
 80018e6:	f003 f8cf 	bl	8004a88 <arm_rfft_fast_f32>
	if (GPIOC->IDR & BTN_PIN) // If button is pressed
 80018ea:	4b82      	ldr	r3, [pc, #520]	; (8001af4 <DoFFT+0x224>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80018f2:	d13a      	bne.n	800196a <DoFFT+0x9a>
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2)
 80018f4:	4c7c      	ldr	r4, [pc, #496]	; (8001ae8 <DoFFT+0x218>)
 80018f6:	ad05      	add	r5, sp, #20
 80018f8:	f504 4780 	add.w	r7, r4, #16384	; 0x4000
void DoFFT() {
 80018fc:	462e      	mov	r6, r5
		freqs[freqpoint] = (int)(20*log(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1]))));
 80018fe:	f04f 0800 	mov.w	r8, #0
 8001902:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8001b14 <DoFFT+0x244>
 8001906:	ed94 0a00 	vldr	s0, [r4]
 800190a:	edd4 7a01 	vldr	s15, [r4, #4]
 800190e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001912:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001916:	ee30 0a27 	vadd.f32	s0, s0, s15
 800191a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d42e      	bmi.n	8001982 <DoFFT+0xb2>
 8001924:	eef1 7ac0 	vsqrt.f32	s15, s0
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe8c 	bl	8000648 <__aeabi_f2d>
 8001930:	ec41 0b10 	vmov	d0, r0, r1
 8001934:	f006 ff20 	bl	8008778 <log>
 8001938:	ec51 0b10 	vmov	r0, r1, d0
 800193c:	4642      	mov	r2, r8
 800193e:	464b      	mov	r3, r9
 8001940:	f7fe feda 	bl	80006f8 <__aeabi_dmul>
 8001944:	f7ff f988 	bl	8000c58 <__aeabi_d2iz>
 8001948:	f846 0f04 	str.w	r0, [r6, #4]!
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2)
 800194c:	3408      	adds	r4, #8
 800194e:	42bc      	cmp	r4, r7
 8001950:	d1d9      	bne.n	8001906 <DoFFT+0x36>
		freq = (peakVal)/((FFT_BUFFER_SIZE)/real_fsample);
 8001952:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <DoFFT+0x228>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001afc <DoFFT+0x22c>
 800195c:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8001960:	4629      	mov	r1, r5
	for (int j = 0; j < FFT_BUFFER_SIZE/2; j +=1)
 8001962:	2300      	movs	r3, #0
	int peak = 0;
 8001964:	461e      	mov	r6, r3
	uint16_t peakVal = 0;
 8001966:	461f      	mov	r7, r3
 8001968:	e014      	b.n	8001994 <DoFFT+0xc4>
		button = 1 - button;
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <DoFFT+0x230>)
 800196c:	7813      	ldrb	r3, [r2, #0]
 800196e:	f1c3 0301 	rsb	r3, r3, #1
 8001972:	7013      	strb	r3, [r2, #0]
		ILI9341_Fill_Screen(BLACK);
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fdfb 	bl	8001570 <ILI9341_Fill_Screen>
		HAL_Delay(50);
 800197a:	2032      	movs	r0, #50	; 0x32
 800197c:	f000 fcc2 	bl	8002304 <HAL_Delay>
 8001980:	e7b8      	b.n	80018f4 <DoFFT+0x24>
		freqs[freqpoint] = (int)(20*log(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1]))));
 8001982:	f006 ff37 	bl	80087f4 <sqrtf>
 8001986:	eef0 7a40 	vmov.f32	s15, s0
 800198a:	e7cd      	b.n	8001928 <DoFFT+0x58>
	for (int j = 0; j < FFT_BUFFER_SIZE/2; j +=1)
 800198c:	3301      	adds	r3, #1
 800198e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001992:	d006      	beq.n	80019a2 <DoFFT+0xd2>
		if(freqs[j] > peak)
 8001994:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8001998:	42b2      	cmp	r2, r6
 800199a:	ddf7      	ble.n	800198c <DoFFT+0xbc>
			peakVal = j;
 800199c:	b29f      	uxth	r7, r3
			peak = freqs[j];
 800199e:	4616      	mov	r6, r2
 80019a0:	e7f4      	b.n	800198c <DoFFT+0xbc>
	if(button == 0)
 80019a2:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <DoFFT+0x230>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d178      	bne.n	8001a9c <DoFFT+0x1cc>
 80019aa:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001b18 <DoFFT+0x248>
 80019ae:	f44f 74a0 	mov.w	r4, #320	; 0x140
			ILI9341_Draw_Pixel(320-(j-2),(freqs_prev[j]+100), BLACK);
 80019b2:	f04f 0900 	mov.w	r9, #0
 80019b6:	f838 1f02 	ldrh.w	r1, [r8, #2]!
 80019ba:	3164      	adds	r1, #100	; 0x64
 80019bc:	464a      	mov	r2, r9
 80019be:	b289      	uxth	r1, r1
 80019c0:	b2a0      	uxth	r0, r4
 80019c2:	f7ff fdef 	bl	80015a4 <ILI9341_Draw_Pixel>
		for (int j = 2; j < 322; j +=1)
 80019c6:	3c01      	subs	r4, #1
 80019c8:	d1f5      	bne.n	80019b6 <DoFFT+0xe6>
 80019ca:	f10d 081c 	add.w	r8, sp, #28
 80019ce:	f44f 74a0 	mov.w	r4, #320	; 0x140
			ILI9341_Draw_Pixel(320-(j-2),(freqs[j]+100), WHITE);
 80019d2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80019d6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80019da:	3164      	adds	r1, #100	; 0x64
 80019dc:	464a      	mov	r2, r9
 80019de:	b289      	uxth	r1, r1
 80019e0:	b2a0      	uxth	r0, r4
 80019e2:	f7ff fddf 	bl	80015a4 <ILI9341_Draw_Pixel>
		for (int j = 2; j < 322; j +=1)
 80019e6:	3c01      	subs	r4, #1
 80019e8:	d1f5      	bne.n	80019d6 <DoFFT+0x106>
		freq = (peakVal)/((FFT_BUFFER_SIZE)/real_fsample);
 80019ea:	463c      	mov	r4, r7
 80019ec:	ee07 7a90 	vmov	s15, r7
 80019f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f4:	ee87 8aa8 	vdiv.f32	s16, s15, s17
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7ff fbf9 	bl	80011f0 <ILI9341_Set_Rotation>
	sprintf(counter_buff, "PEAK: %0.1f", freq_prev);
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <DoFFT+0x234>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f7fe fe21 	bl	8000648 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8001b1c <DoFFT+0x24c>
 8001a0e:	4659      	mov	r1, fp
 8001a10:	a803      	add	r0, sp, #12
 8001a12:	f004 fc33 	bl	800627c <siprintf>
	ILI9341_Draw_Text(counter_buff, 80, 200, WHITE, 2, WHITE);
 8001a16:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001a1a:	9701      	str	r7, [sp, #4]
 8001a1c:	f04f 0a02 	mov.w	sl, #2
 8001a20:	f8cd a000 	str.w	sl, [sp]
 8001a24:	463b      	mov	r3, r7
 8001a26:	22c8      	movs	r2, #200	; 0xc8
 8001a28:	2150      	movs	r1, #80	; 0x50
 8001a2a:	a803      	add	r0, sp, #12
 8001a2c:	f7ff fb20 	bl	8001070 <ILI9341_Draw_Text>
	sprintf(counter_buff, "PEAK: %0.1f", freq);
 8001a30:	ee18 0a10 	vmov	r0, s16
 8001a34:	f7fe fe08 	bl	8000648 <__aeabi_f2d>
 8001a38:	4680      	mov	r8, r0
 8001a3a:	4689      	mov	r9, r1
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4659      	mov	r1, fp
 8001a42:	a803      	add	r0, sp, #12
 8001a44:	f004 fc1a 	bl	800627c <siprintf>
	ILI9341_Draw_Text(counter_buff, 80, 200, BLACK, 2, WHITE);
 8001a48:	9701      	str	r7, [sp, #4]
 8001a4a:	f8cd a000 	str.w	sl, [sp]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	22c8      	movs	r2, #200	; 0xc8
 8001a52:	2150      	movs	r1, #80	; 0x50
 8001a54:	a803      	add	r0, sp, #12
 8001a56:	f7ff fb0b 	bl	8001070 <ILI9341_Draw_Text>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fbc8 	bl	80011f0 <ILI9341_Set_Rotation>
	for (int i = 0; i < FFT_BUFFER_SIZE/2; i += 1)
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <DoFFT+0x238>)
 8001a62:	f242 0114 	movw	r1, #8212	; 0x2014
 8001a66:	4469      	add	r1, sp
		freqs_prev[i] = freqs[i];
 8001a68:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8001a6c:	f823 2f02 	strh.w	r2, [r3, #2]!
	for (int i = 0; i < FFT_BUFFER_SIZE/2; i += 1)
 8001a70:	42a9      	cmp	r1, r5
 8001a72:	d1f9      	bne.n	8001a68 <DoFFT+0x198>
	freq_prev = freq;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <DoFFT+0x234>)
 8001a76:	ed83 8a00 	vstr	s16, [r3]
	printf("%d %0.1f %d \r\n",peakVal,freq,peak);
 8001a7a:	9600      	str	r6, [sp, #0]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	4621      	mov	r1, r4
 8001a82:	4822      	ldr	r0, [pc, #136]	; (8001b0c <DoFFT+0x23c>)
 8001a84:	f004 fbe2 	bl	800624c <iprintf>
	dataReadyFlag = 0;
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <DoFFT+0x240>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
 8001a92:	b007      	add	sp, #28
 8001a94:	ecbd 8b02 	vpop	{d8}
 8001a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001b20 <DoFFT+0x250>
	if(button == 0)
 8001aa0:	f44f 74a0 	mov.w	r4, #320	; 0x140
			ILI9341_Draw_Pixel(320-(j),(freqs_prev[(index+322)]+100), BLACK);
 8001aa4:	f04f 0900 	mov.w	r9, #0
 8001aa8:	f8b8 128e 	ldrh.w	r1, [r8, #654]	; 0x28e
 8001aac:	3164      	adds	r1, #100	; 0x64
 8001aae:	464a      	mov	r2, r9
 8001ab0:	b289      	uxth	r1, r1
 8001ab2:	b2a0      	uxth	r0, r4
 8001ab4:	f7ff fd76 	bl	80015a4 <ILI9341_Draw_Pixel>
		for (int j = 0; j < 320; j +=1)
 8001ab8:	f108 080a 	add.w	r8, r8, #10
 8001abc:	3c01      	subs	r4, #1
 8001abe:	d1f3      	bne.n	8001aa8 <DoFFT+0x1d8>
 8001ac0:	f10d 0818 	add.w	r8, sp, #24
 8001ac4:	f44f 74a0 	mov.w	r4, #320	; 0x140
			ILI9341_Draw_Pixel(320-(j),(freqs[(index+322)]+100), WHITE);
 8001ac8:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8001acc:	f8d8 151c 	ldr.w	r1, [r8, #1308]	; 0x51c
 8001ad0:	3164      	adds	r1, #100	; 0x64
 8001ad2:	464a      	mov	r2, r9
 8001ad4:	b289      	uxth	r1, r1
 8001ad6:	b2a0      	uxth	r0, r4
 8001ad8:	f7ff fd64 	bl	80015a4 <ILI9341_Draw_Pixel>
		for (int j = 0; j < 320; j +=1)
 8001adc:	f108 0814 	add.w	r8, r8, #20
 8001ae0:	3c01      	subs	r4, #1
 8001ae2:	d1f3      	bne.n	8001acc <DoFFT+0x1fc>
 8001ae4:	e781      	b.n	80019ea <DoFFT+0x11a>
 8001ae6:	bf00      	nop
 8001ae8:	2000421c 	.word	0x2000421c
 8001aec:	2000021c 	.word	0x2000021c
 8001af0:	20000204 	.word	0x20000204
 8001af4:	40020800 	.word	0x40020800
 8001af8:	20000004 	.word	0x20000004
 8001afc:	45800000 	.word	0x45800000
 8001b00:	20000200 	.word	0x20000200
 8001b04:	2000821c 	.word	0x2000821c
 8001b08:	2000821e 	.word	0x2000821e
 8001b0c:	08008e24 	.word	0x08008e24
 8001b10:	20000201 	.word	0x20000201
 8001b14:	40340000 	.word	0x40340000
 8001b18:	20008222 	.word	0x20008222
 8001b1c:	08008e18 	.word	0x08008e18
 8001b20:	20008220 	.word	0x20008220

08001b24 <HAL_I2S_RxHalfCpltCallback>:
{
 8001b24:	b508      	push	{r3, lr}
	dataReadyFlag = 1;
 8001b26:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_I2S_RxHalfCpltCallback+0x10>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
	led_toggle(BLUE_LED);
 8001b2c:	2080      	movs	r0, #128	; 0x80
 8001b2e:	f7ff fea5 	bl	800187c <led_toggle>
}
 8001b32:	bd08      	pop	{r3, pc}
 8001b34:	20000201 	.word	0x20000201

08001b38 <HAL_I2S_RxCpltCallback>:
{
 8001b38:	b508      	push	{r3, lr}
	dataReadyFlag = 2;
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_I2S_RxCpltCallback+0x14>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
	led_toggle(RED_LED);
 8001b40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b44:	f7ff fe9a 	bl	800187c <led_toggle>
}
 8001b48:	bd08      	pop	{r3, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000201 	.word	0x20000201

08001b50 <SystemClock_Config>:
{
 8001b50:	b500      	push	{lr}
 8001b52:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b54:	2230      	movs	r2, #48	; 0x30
 8001b56:	2100      	movs	r1, #0
 8001b58:	a808      	add	r0, sp, #32
 8001b5a:	f003 ff05 	bl	8005968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	9304      	str	r3, [sp, #16]
 8001b64:	9305      	str	r3, [sp, #20]
 8001b66:	9306      	str	r3, [sp, #24]
 8001b68:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <SystemClock_Config+0xa0>)
 8001b6c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b6e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b72:	6411      	str	r1, [r2, #64]	; 0x40
 8001b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b76:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b7a:	9201      	str	r2, [sp, #4]
 8001b7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <SystemClock_Config+0xa4>)
 8001b80:	6811      	ldr	r1, [r2, #0]
 8001b82:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001b86:	6011      	str	r1, [r2, #0]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b92:	2202      	movs	r2, #2
 8001b94:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b96:	2101      	movs	r1, #1
 8001b98:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001ba6:	23c8      	movs	r3, #200	; 0xc8
 8001ba8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001baa:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bac:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bae:	a808      	add	r0, sp, #32
 8001bb0:	f001 f8e2 	bl	8002d78 <HAL_RCC_OscConfig>
 8001bb4:	b9b0      	cbnz	r0, 8001be4 <SystemClock_Config+0x94>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bb6:	f001 f8a1 	bl	8002cfc <HAL_PWREx_EnableOverDrive>
 8001bba:	b9a8      	cbnz	r0, 8001be8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bcc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001bd4:	2106      	movs	r1, #6
 8001bd6:	a803      	add	r0, sp, #12
 8001bd8:	f001 fb3c 	bl	8003254 <HAL_RCC_ClockConfig>
 8001bdc:	b930      	cbnz	r0, 8001bec <SystemClock_Config+0x9c>
}
 8001bde:	b015      	add	sp, #84	; 0x54
 8001be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be4:	b672      	cpsid	i
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <SystemClock_Config+0x96>
 8001be8:	b672      	cpsid	i
 8001bea:	e7fe      	b.n	8001bea <SystemClock_Config+0x9a>
 8001bec:	b672      	cpsid	i
 8001bee:	e7fe      	b.n	8001bee <SystemClock_Config+0x9e>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <main>:
{
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	ed2d 8b02 	vpush	{d8}
 8001bfe:	b083      	sub	sp, #12
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c04:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c08:	4b71      	ldr	r3, [pc, #452]	; (8001dd0 <main+0x1d8>)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c1e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c24:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001c28:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c2c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c34:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c38:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c3c:	015a      	lsls	r2, r3, #5
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c3e:	f643 75e0 	movw	r5, #16352	; 0x3fe0
 8001c42:	4863      	ldr	r0, [pc, #396]	; (8001dd0 <main+0x1d8>)
 8001c44:	ea02 0405 	and.w	r4, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c48:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c4a:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
 8001c4e:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d1f7      	bne.n	8001c4a <main+0x52>
    } while(sets-- != 0U);
 8001c5a:	3a20      	subs	r2, #32
 8001c5c:	f112 0f20 	cmn.w	r2, #32
 8001c60:	d1f0      	bne.n	8001c44 <main+0x4c>
 8001c62:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <main+0x1d8>)
 8001c68:	6953      	ldr	r3, [r2, #20]
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6153      	str	r3, [r2, #20]
 8001c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c74:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001c78:	f000 fb1c 	bl	80022b4 <HAL_Init>
  SystemClock_Config();
 8001c7c:	f7ff ff68 	bl	8001b50 <SystemClock_Config>
  PeriphCommonClock_Config(); // Disappears when I2S1 disabled
 8001c80:	f7ff fe0c 	bl	800189c <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001c84:	f7ff fd86 	bl	8001794 <MX_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c88:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <main+0x1dc>)
 8001c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	200e      	movs	r0, #14
 8001ca2:	f000 fb55 	bl	8002350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ca6:	200e      	movs	r0, #14
 8001ca8:	f000 fb86 	bl	80023b8 <HAL_NVIC_EnableIRQ>
  huart3.Instance = USART3;
 8001cac:	484a      	ldr	r0, [pc, #296]	; (8001dd8 <main+0x1e0>)
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <main+0x1e4>)
 8001cb0:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8001cb2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cb6:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cbe:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc4:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc6:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc8:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cca:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ccc:	f002 fdf9 	bl	80048c2 <HAL_UART_Init>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d141      	bne.n	8001d58 <main+0x160>
  hi2s2.Instance = SPI2;
 8001cd4:	4842      	ldr	r0, [pc, #264]	; (8001de0 <main+0x1e8>)
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <main+0x1ec>)
 8001cd8:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cde:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ce4:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001cec:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001cf0:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001cf2:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61c3      	str	r3, [r0, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001cf8:	f000 fea8 	bl	8002a4c <HAL_I2S_Init>
 8001cfc:	bb70      	cbnz	r0, 8001d5c <main+0x164>
  MX_SPI5_Init();
 8001cfe:	f000 f88f 	bl	8001e20 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001d02:	f000 fa35 	bl	8002170 <MX_TIM1_Init>
  ILI9341_Init();//initial driver setup to drive ili9341
 8001d06:	f7ff fabb 	bl	8001280 <ILI9341_Init>
  user_leds_init();
 8001d0a:	f7ff fd93 	bl	8001834 <user_leds_init>
  GPIOC->MODER &=~ (1U<<26);
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <main+0x1f0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d16:	601a      	str	r2, [r3, #0]
  GPIOC->MODER &=~ (1U<<27);
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001d1e:	601a      	str	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft_handler, FFT_BUFFER_SIZE);
 8001d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d24:	4831      	ldr	r0, [pc, #196]	; (8001dec <main+0x1f4>)
 8001d26:	f002 fdfd 	bl	8004924 <arm_rfft_fast_init_f32>
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(&hi2s2, rxBuf, ADC_BUFFER_SIZE); // Start DMA stream
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	4930      	ldr	r1, [pc, #192]	; (8001df0 <main+0x1f8>)
 8001d30:	482b      	ldr	r0, [pc, #172]	; (8001de0 <main+0x1e8>)
 8001d32:	f000 ff39 	bl	8002ba8 <HAL_I2S_Receive_DMA>
  if(status != HAL_OK)
 8001d36:	b198      	cbz	r0, 8001d60 <main+0x168>
	  led_on(RED_LED);
 8001d38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d3c:	f7ff fda6 	bl	800188c <led_on>
  ILI9341_Fill_Screen(BLACK);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff fc15 	bl	8001570 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fa52 	bl	80011f0 <ILI9341_Set_Rotation>
	  if (dataReadyFlag == 1)
 8001d4c:	4f29      	ldr	r7, [pc, #164]	; (8001df4 <main+0x1fc>)
			  fft_in_buf[fft_in_ptr] = INT16_TO_FLOAT*((float)rxBuf[i]);
 8001d4e:	4e28      	ldr	r6, [pc, #160]	; (8001df0 <main+0x1f8>)
 8001d50:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8001df8 <main+0x200>
			  txBuf[i] = rxBuf[i];
 8001d54:	4d29      	ldr	r5, [pc, #164]	; (8001dfc <main+0x204>)
 8001d56:	e01e      	b.n	8001d96 <main+0x19e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <main+0x162>
 8001d5c:	b672      	cpsid	i
 8001d5e:	e7fe      	b.n	8001d5e <main+0x166>
	  led_on(GREEN_LED);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff fd93 	bl	800188c <led_on>
 8001d66:	e7eb      	b.n	8001d40 <main+0x148>
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <main+0x208>)
	  int fft_in_ptr = 0;
 8001d6a:	2400      	movs	r4, #0
			  fft_in_buf[fft_in_ptr] = INT16_TO_FLOAT*((float)rxBuf[i]);
 8001d6c:	f936 3024 	ldrsh.w	r3, [r6, r4, lsl #2]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d7c:	ece2 7a01 	vstmia	r2!, {s15}
			  txBuf[i] = rxBuf[i];
 8001d80:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]
			  fft_in_ptr++;
 8001d84:	3401      	adds	r4, #1
		  for (int i = 0; i < (ADC_BUFFER_SIZE/2); i += 2)
 8001d86:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001d8a:	d1ef      	bne.n	8001d6c <main+0x174>
		  DoFFT();
 8001d8c:	f7ff fda0 	bl	80018d0 <DoFFT>
	  if (dataReadyFlag == 2)
 8001d90:	783b      	ldrb	r3, [r7, #0]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d004      	beq.n	8001da0 <main+0x1a8>
	  if (dataReadyFlag == 1)
 8001d96:	783b      	ldrb	r3, [r7, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d0e5      	beq.n	8001d68 <main+0x170>
	  int fft_in_ptr = 0;
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	e7f7      	b.n	8001d90 <main+0x198>
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <main+0x208>)
 8001da2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
			  fft_in_buf[fft_in_ptr] = INT16_TO_FLOAT*((float)rxBuf[i]) ;
 8001daa:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 8001dae:	ee07 2a90 	vmov	s15, r2
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001dba:	ece4 7a01 	vstmia	r4!, {s15}
			  txBuf[i] = rxBuf[i];
 8001dbe:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc8:	d1ef      	bne.n	8001daa <main+0x1b2>
		  DoFFT();
 8001dca:	f7ff fd81 	bl	80018d0 <DoFFT>
 8001dce:	e7e2      	b.n	8001d96 <main+0x19e>
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	200092c0 	.word	0x200092c0
 8001ddc:	40004800 	.word	0x40004800
 8001de0:	20009280 	.word	0x20009280
 8001de4:	40003800 	.word	0x40003800
 8001de8:	40020800 	.word	0x40020800
 8001dec:	20000204 	.word	0x20000204
 8001df0:	20009348 	.word	0x20009348
 8001df4:	20000201 	.word	0x20000201
 8001df8:	38000000 	.word	0x38000000
 8001dfc:	20011348 	.word	0x20011348
 8001e00:	2000021c 	.word	0x2000021c

08001e04 <_write>:
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	4802      	ldr	r0, [pc, #8]	; (8001e18 <_write+0x14>)
 8001e10:	f002 fccc 	bl	80047ac <HAL_UART_Transmit>
}
 8001e14:	4620      	mov	r0, r4
 8001e16:	bd10      	pop	{r4, pc}
 8001e18:	200092c0 	.word	0x200092c0

08001e1c <Error_Handler>:
 8001e1c:	b672      	cpsid	i
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <Error_Handler+0x2>

08001e20 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001e20:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e22:	480f      	ldr	r0, [pc, #60]	; (8001e60 <MX_SPI5_Init+0x40>)
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_SPI5_Init+0x44>)
 8001e26:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e28:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e2c:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e36:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e38:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3a:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e42:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e46:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e48:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e50:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e52:	f001 fee3 	bl	8003c1c <HAL_SPI_Init>
 8001e56:	b900      	cbnz	r0, 8001e5a <MX_SPI5_Init+0x3a>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e5a:	f7ff ffdf 	bl	8001e1c <Error_Handler>
}
 8001e5e:	e7fb      	b.n	8001e58 <MX_SPI5_Init+0x38>
 8001e60:	20019348 	.word	0x20019348
 8001e64:	40015000 	.word	0x40015000

08001e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e68:	b500      	push	{lr}
 8001e6a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9303      	str	r3, [sp, #12]
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	9305      	str	r3, [sp, #20]
 8001e74:	9306      	str	r3, [sp, #24]
 8001e76:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_SPI_MspInit+0x64>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d002      	beq.n	8001e86 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001e80:	b009      	add	sp, #36	; 0x24
 8001e82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e86:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
 8001e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	9302      	str	r3, [sp, #8]
 8001eac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001eae:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001eb2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec0:	a903      	add	r1, sp, #12
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <HAL_SPI_MspInit+0x68>)
 8001ec4:	f000 fc8a 	bl	80027dc <HAL_GPIO_Init>
}
 8001ec8:	e7da      	b.n	8001e80 <HAL_SPI_MspInit+0x18>
 8001eca:	bf00      	nop
 8001ecc:	40015000 	.word	0x40015000
 8001ed0:	40021400 	.word	0x40021400

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_MspInit+0x2c>)
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	b002      	add	sp, #8
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b0ab      	sub	sp, #172	; 0xac
 8001f08:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	9125      	str	r1, [sp, #148]	; 0x94
 8001f0e:	9126      	str	r1, [sp, #152]	; 0x98
 8001f10:	9127      	str	r1, [sp, #156]	; 0x9c
 8001f12:	9128      	str	r1, [sp, #160]	; 0xa0
 8001f14:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f16:	2284      	movs	r2, #132	; 0x84
 8001f18:	a804      	add	r0, sp, #16
 8001f1a:	f003 fd25 	bl	8005968 <memset>
  if(hi2s->Instance==SPI2)
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_I2S_MspInit+0xf0>)
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_I2S_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f26:	b02b      	add	sp, #172	; 0xac
 8001f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001f2a:	23c8      	movs	r3, #200	; 0xc8
 8001f2c:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f32:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f34:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3a:	a804      	add	r0, sp, #16
 8001f3c:	f001 fa62 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d150      	bne.n	8001fe6 <HAL_I2S_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_I2S_MspInit+0xf4>)
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f50:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f54:	9201      	str	r2, [sp, #4]
 8001f56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5a:	f042 0204 	orr.w	r2, r2, #4
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f62:	f002 0204 	and.w	r2, r2, #4
 8001f66:	9202      	str	r2, [sp, #8]
 8001f68:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6c:	f042 0202 	orr.w	r2, r2, #2
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	9303      	str	r3, [sp, #12]
 8001f7a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001f7c:	2342      	movs	r3, #66	; 0x42
 8001f7e:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2702      	movs	r7, #2
 8001f82:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2500      	movs	r5, #0
 8001f86:	9527      	str	r5, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8a:	2605      	movs	r6, #5
 8001f8c:	9629      	str	r6, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8e:	a925      	add	r1, sp, #148	; 0x94
 8001f90:	481a      	ldr	r0, [pc, #104]	; (8001ffc <HAL_I2S_MspInit+0xf8>)
 8001f92:	f000 fc23 	bl	80027dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f9a:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	9527      	str	r5, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa2:	9629      	str	r6, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	a925      	add	r1, sp, #148	; 0x94
 8001fa6:	4816      	ldr	r0, [pc, #88]	; (8002000 <HAL_I2S_MspInit+0xfc>)
 8001fa8:	f000 fc18 	bl	80027dc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001fac:	4815      	ldr	r0, [pc, #84]	; (8002004 <HAL_I2S_MspInit+0x100>)
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_I2S_MspInit+0x104>)
 8001fb0:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001fb2:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb4:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc2:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc8:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fce:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fd0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fd4:	6203      	str	r3, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001fd8:	f000 fa2c 	bl	8002434 <HAL_DMA_Init>
 8001fdc:	b930      	cbnz	r0, 8001fec <HAL_I2S_MspInit+0xe8>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_I2S_MspInit+0x100>)
 8001fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8001fe2:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001fe4:	e79f      	b.n	8001f26 <HAL_I2S_MspInit+0x22>
      Error_Handler();
 8001fe6:	f7ff ff19 	bl	8001e1c <Error_Handler>
 8001fea:	e7ab      	b.n	8001f44 <HAL_I2S_MspInit+0x40>
      Error_Handler();
 8001fec:	f7ff ff16 	bl	8001e1c <Error_Handler>
 8001ff0:	e7f5      	b.n	8001fde <HAL_I2S_MspInit+0xda>
 8001ff2:	bf00      	nop
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020400 	.word	0x40020400
 8002004:	20009220 	.word	0x20009220
 8002008:	40026058 	.word	0x40026058

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b0a8      	sub	sp, #160	; 0xa0
 8002010:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	2100      	movs	r1, #0
 8002014:	9123      	str	r1, [sp, #140]	; 0x8c
 8002016:	9124      	str	r1, [sp, #144]	; 0x90
 8002018:	9125      	str	r1, [sp, #148]	; 0x94
 800201a:	9126      	str	r1, [sp, #152]	; 0x98
 800201c:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800201e:	2284      	movs	r2, #132	; 0x84
 8002020:	a802      	add	r0, sp, #8
 8002022:	f003 fca1 	bl	8005968 <memset>
  if(huart->Instance==USART3)
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_UART_MspInit+0x80>)
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800202e:	b028      	add	sp, #160	; 0xa0
 8002030:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002036:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	a802      	add	r0, sp, #8
 800203a:	f001 f9e3 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 800203e:	bb10      	cbnz	r0, 8002086 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_UART_MspInit+0x84>)
 8002042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002044:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
 800204a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002050:	9200      	str	r2, [sp, #0]
 8002052:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002056:	f042 0208 	orr.w	r2, r2, #8
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800206a:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002078:	2307      	movs	r3, #7
 800207a:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207c:	a923      	add	r1, sp, #140	; 0x8c
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x88>)
 8002080:	f000 fbac 	bl	80027dc <HAL_GPIO_Init>
}
 8002084:	e7d3      	b.n	800202e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002086:	f7ff fec9 	bl	8001e1c <Error_Handler>
 800208a:	e7d9      	b.n	8002040 <HAL_UART_MspInit+0x34>
 800208c:	40004800 	.word	0x40004800
 8002090:	40023800 	.word	0x40023800
 8002094:	40020c00 	.word	0x40020c00

08002098 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler>

0800209a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler>

0800209c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <MemManage_Handler>

0800209e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <BusFault_Handler>

080020a0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler>

080020a2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a4:	4770      	bx	lr

080020a6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020aa:	f000 f919 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ae:	bd08      	pop	{r3, pc}

080020b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80020b2:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Stream3_IRQHandler+0xc>)
 80020b4:	f000 faa4 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020b8:	bd08      	pop	{r3, pc}
 80020ba:	bf00      	nop
 80020bc:	20009220 	.word	0x20009220

080020c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020c0:	2001      	movs	r0, #1
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c6:	f003 fc25 	bl	8005914 <__errno>
 80020ca:	2316      	movs	r3, #22
 80020cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	bd08      	pop	{r3, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80020d6:	f003 fc1d 	bl	8005914 <__errno>
 80020da:	2316      	movs	r3, #22
 80020dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80020de:	e7fe      	b.n	80020de <_exit+0xa>

080020e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	1e16      	subs	r6, r2, #0
 80020e4:	dd07      	ble.n	80020f6 <_read+0x16>
 80020e6:	460c      	mov	r4, r1
 80020e8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80020ea:	f3af 8000 	nop.w
 80020ee:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	42a5      	cmp	r5, r4
 80020f4:	d1f9      	bne.n	80020ea <_read+0xa>
  }

  return len;
}
 80020f6:	4630      	mov	r0, r6
 80020f8:	bd70      	pop	{r4, r5, r6, pc}

080020fa <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
 80020fe:	4770      	bx	lr

08002100 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002104:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002106:	2000      	movs	r0, #0
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800210a:	2001      	movs	r0, #1
 800210c:	4770      	bx	lr

0800210e <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800210e:	2000      	movs	r0, #0
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b508      	push	{r3, lr}
 8002116:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <_sbrk+0x38>)
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	b152      	cbz	r2, 8002134 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <_sbrk+0x38>)
 8002120:	6810      	ldr	r0, [r2, #0]
 8002122:	4403      	add	r3, r0
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <_sbrk+0x3c>)
 8002126:	490b      	ldr	r1, [pc, #44]	; (8002154 <_sbrk+0x40>)
 8002128:	1a52      	subs	r2, r2, r1
 800212a:	4293      	cmp	r3, r2
 800212c:	d806      	bhi.n	800213c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <_sbrk+0x38>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002132:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <_sbrk+0x38>)
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <_sbrk+0x44>)
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	e7f0      	b.n	800211e <_sbrk+0xa>
    errno = ENOMEM;
 800213c:	f003 fbea 	bl	8005914 <__errno>
 8002140:	230c      	movs	r3, #12
 8002142:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	e7f3      	b.n	8002132 <_sbrk+0x1e>
 800214a:	bf00      	nop
 800214c:	200193ac 	.word	0x200193ac
 8002150:	20050000 	.word	0x20050000
 8002154:	00000400 	.word	0x00000400
 8002158:	20019410 	.word	0x20019410

0800215c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <SystemInit+0x10>)
 800215e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002162:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002166:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002170:	b500      	push	{lr}
 8002172:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002174:	2300      	movs	r3, #0
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	9305      	str	r3, [sp, #20]
 800217a:	9306      	str	r3, [sp, #24]
 800217c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <MX_TIM1_Init+0x74>)
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <MX_TIM1_Init+0x78>)
 8002188:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 10000;
 800218a:	f242 7210 	movw	r2, #10000	; 0x2710
 800218e:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219c:	6102      	str	r2, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800219e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a2:	f001 ff1b 	bl	8003fdc <HAL_TIM_Base_Init>
 80021a6:	b998      	cbnz	r0, 80021d0 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ae:	a904      	add	r1, sp, #16
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <MX_TIM1_Init+0x74>)
 80021b2:	f001 ff51 	bl	8004058 <HAL_TIM_ConfigClockSource>
 80021b6:	b970      	cbnz	r0, 80021d6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021bc:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c0:	a901      	add	r1, sp, #4
 80021c2:	4808      	ldr	r0, [pc, #32]	; (80021e4 <MX_TIM1_Init+0x74>)
 80021c4:	f001 fffe 	bl	80041c4 <HAL_TIMEx_MasterConfigSynchronization>
 80021c8:	b940      	cbnz	r0, 80021dc <MX_TIM1_Init+0x6c>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021ca:	b009      	add	sp, #36	; 0x24
 80021cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80021d0:	f7ff fe24 	bl	8001e1c <Error_Handler>
 80021d4:	e7e8      	b.n	80021a8 <MX_TIM1_Init+0x38>
    Error_Handler();
 80021d6:	f7ff fe21 	bl	8001e1c <Error_Handler>
 80021da:	e7ed      	b.n	80021b8 <MX_TIM1_Init+0x48>
    Error_Handler();
 80021dc:	f7ff fe1e 	bl	8001e1c <Error_Handler>
}
 80021e0:	e7f3      	b.n	80021ca <MX_TIM1_Init+0x5a>
 80021e2:	bf00      	nop
 80021e4:	200193b0 	.word	0x200193b0
 80021e8:	40010000 	.word	0x40010000

080021ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_TIM_Base_MspInit+0x28>)
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d000      	beq.n	80021f6 <HAL_TIM_Base_MspInit+0xa>
 80021f4:	4770      	bx	lr
{
 80021f6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80021fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800220e:	b002      	add	sp, #8
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002242:	f7ff ff8b 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f003 fb6b 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7ff fcd5 	bl	8001bf8 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800225c:	0801c694 	.word	0x0801c694
  ldr r2, =_sbss
 8002260:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002264:	20019410 	.word	0x20019410

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_InitTick+0x3c>)
 8002272:	7818      	ldrb	r0, [r3, #0]
 8002274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002278:	fbb3 f3f0 	udiv	r3, r3, r0
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <HAL_InitTick+0x40>)
 800227e:	6810      	ldr	r0, [r2, #0]
 8002280:	fbb0 f0f3 	udiv	r0, r0, r3
 8002284:	f000 f8a6 	bl	80023d4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002288:	2c0f      	cmp	r4, #15
 800228a:	d800      	bhi.n	800228e <HAL_InitTick+0x22>
 800228c:	b108      	cbz	r0, 8002292 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8002290:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002292:	2200      	movs	r2, #0
 8002294:	4621      	mov	r1, r4
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	f000 f859 	bl	8002350 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_InitTick+0x44>)
 80022a0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80022a2:	2000      	movs	r0, #0
 80022a4:	e7f4      	b.n	8002290 <HAL_InitTick+0x24>
 80022a6:	bf00      	nop
 80022a8:	2000000c 	.word	0x2000000c
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000010 	.word	0x20000010

080022b4 <HAL_Init>:
{
 80022b4:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_Init+0x28>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 f82f 	bl	800232c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	200f      	movs	r0, #15
 80022d0:	f7ff ffcc 	bl	800226c <HAL_InitTick>
  HAL_MspInit();
 80022d4:	f7ff fdfe 	bl	8001ed4 <HAL_MspInit>
}
 80022d8:	2000      	movs	r0, #0
 80022da:	bd08      	pop	{r3, pc}
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_IncTick+0x10>)
 80022e2:	6811      	ldr	r1, [r2, #0]
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_IncTick+0x14>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	440b      	add	r3, r1
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200193fc 	.word	0x200193fc
 80022f4:	2000000c 	.word	0x2000000c

080022f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022f8:	4b01      	ldr	r3, [pc, #4]	; (8002300 <HAL_GetTick+0x8>)
 80022fa:	6818      	ldr	r0, [r3, #0]
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200193fc 	.word	0x200193fc

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff fff6 	bl	80022f8 <HAL_GetTick>
 800230c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002312:	d002      	beq.n	800231a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_Delay+0x24>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800231a:	f7ff ffed 	bl	80022f8 <HAL_GetTick>
 800231e:	1b40      	subs	r0, r0, r5
 8002320:	42a0      	cmp	r0, r4
 8002322:	d3fa      	bcc.n	800231a <HAL_Delay+0x16>
  {
  }
}
 8002324:	bd38      	pop	{r3, r4, r5, pc}
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c

0800232c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800232e:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	0200      	lsls	r0, r0, #8
 8002332:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002342:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002344:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	05fa0000 	.word	0x05fa0000

08002350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002350:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_NVIC_SetPriority+0x5c>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235a:	f1c3 0c07 	rsb	ip, r3, #7
 800235e:	f1bc 0f04 	cmp.w	ip, #4
 8002362:	bf28      	it	cs
 8002364:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002368:	f103 0e04 	add.w	lr, r3, #4
 800236c:	f1be 0f06 	cmp.w	lr, #6
 8002370:	bf8c      	ite	hi
 8002372:	3b03      	subhi	r3, #3
 8002374:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002376:	f04f 3eff 	mov.w	lr, #4294967295
 800237a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800237e:	ea21 010c 	bic.w	r1, r1, ip
 8002382:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	fa0e f303 	lsl.w	r3, lr, r3
 8002388:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800238e:	2800      	cmp	r0, #0
 8002390:	db05      	blt.n	800239e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	0109      	lsls	r1, r1, #4
 8002394:	b2c9      	uxtb	r1, r1
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_NVIC_SetPriority+0x60>)
 8002398:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800239a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	f000 000f 	and.w	r0, r0, #15
 80023a2:	0109      	lsls	r1, r1, #4
 80023a4:	b2c9      	uxtb	r1, r1
 80023a6:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_NVIC_SetPriority+0x64>)
 80023a8:	5419      	strb	r1, [r3, r0]
 80023aa:	e7f6      	b.n	800239a <HAL_NVIC_SetPriority+0x4a>
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	e000e400 	.word	0xe000e400
 80023b4:	e000ed14 	.word	0xe000ed14

080023b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	db08      	blt.n	80023ce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023bc:	0942      	lsrs	r2, r0, #5
 80023be:	f000 001f 	and.w	r0, r0, #31
 80023c2:	2301      	movs	r3, #1
 80023c4:	fa03 f000 	lsl.w	r0, r3, r0
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <HAL_NVIC_EnableIRQ+0x18>)
 80023ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	3801      	subs	r0, #1
 80023d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023da:	d20b      	bcs.n	80023f4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80023e0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_SYSTICK_Config+0x24>)
 80023e4:	21f0      	movs	r1, #240	; 0xf0
 80023e6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ea:	2000      	movs	r0, #0
 80023ec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	2207      	movs	r2, #7
 80023f0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023f4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023fc:	b410      	push	{r4}
 80023fe:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002400:	6804      	ldr	r4, [r0, #0]
 8002402:	b2e1      	uxtb	r1, r4
 8002404:	3910      	subs	r1, #16
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <DMA_CalcBaseAndBitshift+0x2c>)
 8002408:	fba3 0301 	umull	r0, r3, r3, r1
 800240c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <DMA_CalcBaseAndBitshift+0x30>)
 8002410:	5cc3      	ldrb	r3, [r0, r3]
 8002412:	65d3      	str	r3, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002414:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002416:	4806      	ldr	r0, [pc, #24]	; (8002430 <DMA_CalcBaseAndBitshift+0x34>)
 8002418:	ea00 0004 	and.w	r0, r0, r4
 800241c:	bf88      	it	hi
 800241e:	3004      	addhi	r0, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002420:	6590      	str	r0, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	aaaaaaab 	.word	0xaaaaaaab
 800242c:	08008e4c 	.word	0x08008e4c
 8002430:	fffffc00 	.word	0xfffffc00

08002434 <HAL_DMA_Init>:
{
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ff5e 	bl	80022f8 <HAL_GetTick>
  if(hdma == NULL)
 800243c:	2c00      	cmp	r4, #0
 800243e:	f000 808c 	beq.w	800255a <HAL_DMA_Init+0x126>
 8002442:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800244a:	2300      	movs	r3, #0
 800244c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f012 0f01 	tst.w	r2, #1
 8002462:	d00a      	beq.n	800247a <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002464:	f7ff ff48 	bl	80022f8 <HAL_GetTick>
 8002468:	1b43      	subs	r3, r0, r5
 800246a:	2b05      	cmp	r3, #5
 800246c:	d9f5      	bls.n	800245a <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246e:	2320      	movs	r3, #32
 8002470:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002472:	2003      	movs	r0, #3
 8002474:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002478:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 800247a:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800247c:	4838      	ldr	r0, [pc, #224]	; (8002560 <HAL_DMA_Init+0x12c>)
 800247e:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002480:	6861      	ldr	r1, [r4, #4]
 8002482:	68a2      	ldr	r2, [r4, #8]
 8002484:	430a      	orrs	r2, r1
 8002486:	68e1      	ldr	r1, [r4, #12]
 8002488:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	6921      	ldr	r1, [r4, #16]
 800248c:	430a      	orrs	r2, r1
 800248e:	6961      	ldr	r1, [r4, #20]
 8002490:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	69a1      	ldr	r1, [r4, #24]
 8002494:	430a      	orrs	r2, r1
 8002496:	69e1      	ldr	r1, [r4, #28]
 8002498:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	6a21      	ldr	r1, [r4, #32]
 800249c:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249e:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024a2:	2904      	cmp	r1, #4
 80024a4:	d021      	beq.n	80024ea <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 80024a6:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80024a8:	6821      	ldr	r1, [r4, #0]
 80024aa:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ac:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 80024b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024b2:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d10a      	bne.n	80024ce <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80024b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024ba:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024be:	b133      	cbz	r3, 80024ce <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024c0:	69a5      	ldr	r5, [r4, #24]
 80024c2:	bb3d      	cbnz	r5, 8002514 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80024c4:	2801      	cmp	r0, #1
 80024c6:	d01f      	beq.n	8002508 <HAL_DMA_Init+0xd4>
 80024c8:	f030 0002 	bics.w	r0, r0, #2
 80024cc:	d012      	beq.n	80024f4 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80024ce:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff93 	bl	80023fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024d8:	233f      	movs	r3, #63	; 0x3f
 80024da:	4093      	lsls	r3, r2
 80024dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	2000      	movs	r0, #0
 80024e0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80024e8:	e7c6      	b.n	8002478 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80024ee:	4301      	orrs	r1, r0
 80024f0:	430a      	orrs	r2, r1
 80024f2:	e7d8      	b.n	80024a6 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0e8      	beq.n	80024ce <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002500:	2001      	movs	r0, #1
 8002502:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002506:	e7b7      	b.n	8002478 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250c:	bf14      	ite	ne
 800250e:	2300      	movne	r3, #0
 8002510:	2301      	moveq	r3, #1
 8002512:	e7f1      	b.n	80024f8 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002514:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002518:	d008      	beq.n	800252c <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800251a:	2802      	cmp	r0, #2
 800251c:	d9ee      	bls.n	80024fc <HAL_DMA_Init+0xc8>
 800251e:	2803      	cmp	r0, #3
 8002520:	d1d5      	bne.n	80024ce <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0d1      	beq.n	80024ce <HAL_DMA_Init+0x9a>
 800252a:	e7e7      	b.n	80024fc <HAL_DMA_Init+0xc8>
    switch (tmp)
 800252c:	2803      	cmp	r0, #3
 800252e:	d8ce      	bhi.n	80024ce <HAL_DMA_Init+0x9a>
 8002530:	a501      	add	r5, pc, #4	; (adr r5, 8002538 <HAL_DMA_Init+0x104>)
 8002532:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002536:	bf00      	nop
 8002538:	080024fd 	.word	0x080024fd
 800253c:	08002549 	.word	0x08002549
 8002540:	080024fd 	.word	0x080024fd
 8002544:	0800254f 	.word	0x0800254f
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800254c:	e7eb      	b.n	8002526 <HAL_DMA_Init+0xf2>
 800254e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002552:	bf14      	ite	ne
 8002554:	2300      	movne	r3, #0
 8002556:	2301      	moveq	r3, #1
 8002558:	e7e5      	b.n	8002526 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 800255a:	2001      	movs	r0, #1
 800255c:	e78c      	b.n	8002478 <HAL_DMA_Init+0x44>
 800255e:	bf00      	nop
 8002560:	f010803f 	.word	0xf010803f

08002564 <HAL_DMA_Start_IT>:
{
 8002564:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002568:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800256c:	f1bc 0f01 	cmp.w	ip, #1
 8002570:	d044      	beq.n	80025fc <HAL_DMA_Start_IT+0x98>
 8002572:	f04f 0c01 	mov.w	ip, #1
 8002576:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 800257e:	fa5f fc8c 	uxtb.w	ip, ip
 8002582:	f1bc 0f01 	cmp.w	ip, #1
 8002586:	d005      	beq.n	8002594 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002588:	2300      	movs	r3, #0
 800258a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800258e:	2002      	movs	r0, #2
}
 8002590:	bc70      	pop	{r4, r5, r6}
 8002592:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	2502      	movs	r5, #2
 8002596:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	2500      	movs	r5, #0
 800259c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800259e:	6806      	ldr	r6, [r0, #0]
 80025a0:	6835      	ldr	r5, [r6, #0]
 80025a2:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80025a6:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80025a8:	6805      	ldr	r5, [r0, #0]
 80025aa:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ac:	6883      	ldr	r3, [r0, #8]
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d01f      	beq.n	80025f2 <HAL_DMA_Start_IT+0x8e>
    hdma->Instance->PAR = SrcAddress;
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025b6:	6803      	ldr	r3, [r0, #0]
 80025b8:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80025bc:	233f      	movs	r3, #63	; 0x3f
 80025be:	4093      	lsls	r3, r2
 80025c0:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	f043 0316 	orr.w	r3, r3, #22
 80025ca:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025cc:	6802      	ldr	r2, [r0, #0]
 80025ce:	6953      	ldr	r3, [r2, #20]
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80025d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025d8:	b123      	cbz	r3, 80025e4 <HAL_DMA_Start_IT+0x80>
      hdma->Instance->CR  |= DMA_IT_HT;
 80025da:	6802      	ldr	r2, [r0, #0]
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80025e4:	6802      	ldr	r2, [r0, #0]
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2000      	movs	r0, #0
 80025f0:	e7ce      	b.n	8002590 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	60d9      	str	r1, [r3, #12]
 80025fa:	e7de      	b.n	80025ba <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 80025fc:	2002      	movs	r0, #2
 80025fe:	e7c7      	b.n	8002590 <HAL_DMA_Start_IT+0x2c>

08002600 <HAL_DMA_IRQHandler>:
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b083      	sub	sp, #12
 8002604:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_DMA_IRQHandler+0x1d4>)
 800260c:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002610:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002614:	2308      	movs	r3, #8
 8002616:	4093      	lsls	r3, r2
 8002618:	422b      	tst	r3, r5
 800261a:	d010      	beq.n	800263e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	f012 0f04 	tst.w	r2, #4
 8002624:	d00b      	beq.n	800263e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	f022 0204 	bic.w	r2, r2, #4
 800262c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800262e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002630:	2308      	movs	r3, #8
 8002632:	4093      	lsls	r3, r2
 8002634:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002636:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002640:	2301      	movs	r3, #1
 8002642:	4093      	lsls	r3, r2
 8002644:	422b      	tst	r3, r5
 8002646:	d009      	beq.n	800265c <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	6952      	ldr	r2, [r2, #20]
 800264c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002650:	d004      	beq.n	800265c <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002652:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002654:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800265c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800265e:	2304      	movs	r3, #4
 8002660:	4093      	lsls	r3, r2
 8002662:	422b      	tst	r3, r5
 8002664:	d009      	beq.n	800267a <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f012 0f02 	tst.w	r2, #2
 800266e:	d004      	beq.n	800267a <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002670:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002672:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800267c:	2310      	movs	r3, #16
 800267e:	4093      	lsls	r3, r2
 8002680:	422b      	tst	r3, r5
 8002682:	d024      	beq.n	80026ce <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	f012 0f08 	tst.w	r2, #8
 800268c:	d01f      	beq.n	80026ce <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800268e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002698:	d00d      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80026a0:	d104      	bne.n	80026ac <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80026a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026a4:	b19b      	cbz	r3, 80026ce <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80026a6:	4620      	mov	r0, r4
 80026a8:	4798      	blx	r3
 80026aa:	e010      	b.n	80026ce <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026ae:	b173      	cbz	r3, 80026ce <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80026b0:	4620      	mov	r0, r4
 80026b2:	4798      	blx	r3
 80026b4:	e00b      	b.n	80026ce <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80026bc:	d103      	bne.n	80026c6 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80026c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c8:	b10b      	cbz	r3, 80026ce <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80026ca:	4620      	mov	r0, r4
 80026cc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80026d0:	2320      	movs	r3, #32
 80026d2:	4093      	lsls	r3, r2
 80026d4:	422b      	tst	r3, r5
 80026d6:	d055      	beq.n	8002784 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	f012 0f10 	tst.w	r2, #16
 80026e0:	d050      	beq.n	8002784 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d00e      	beq.n	800270c <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80026f6:	d033      	beq.n	8002760 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80026fe:	d12a      	bne.n	8002756 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8002700:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8002706:	4620      	mov	r0, r4
 8002708:	4798      	blx	r3
 800270a:	e03b      	b.n	8002784 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f023 0316 	bic.w	r3, r3, #22
 8002714:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	6953      	ldr	r3, [r2, #20]
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002722:	b1a3      	cbz	r3, 800274e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f023 0308 	bic.w	r3, r3, #8
 800272c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002730:	233f      	movs	r3, #63	; 0x3f
 8002732:	4093      	lsls	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002736:	2301      	movs	r3, #1
 8002738:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800273c:	2300      	movs	r3, #0
 800273e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002742:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002744:	2b00      	cmp	r3, #0
 8002746:	d043      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002748:	4620      	mov	r0, r4
 800274a:	4798      	blx	r3
 800274c:	e040      	b.n	80027d0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e7      	bne.n	8002724 <HAL_DMA_IRQHandler+0x124>
 8002754:	e7eb      	b.n	800272e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8002756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002758:	b1a3      	cbz	r3, 8002784 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 800275a:	4620      	mov	r0, r4
 800275c:	4798      	blx	r3
 800275e:	e011      	b.n	8002784 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002766:	d109      	bne.n	800277c <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f022 0210 	bic.w	r2, r2, #16
 800276e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002770:	2301      	movs	r3, #1
 8002772:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002776:	2300      	movs	r3, #0
 8002778:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800277c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800277e:	b10b      	cbz	r3, 8002784 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8002780:	4620      	mov	r0, r4
 8002782:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002784:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002786:	b31b      	cbz	r3, 80027d0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002788:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800278a:	f013 0f01 	tst.w	r3, #1
 800278e:	d01b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_DMA_IRQHandler+0x1d8>)
 8002792:	fba3 3606 	umull	r3, r6, r3, r6
 8002796:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8002798:	2305      	movs	r3, #5
 800279a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	3301      	adds	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	42b3      	cmp	r3, r6
 80027b0:	d804      	bhi.n	80027bc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f013 0f01 	tst.w	r3, #1
 80027ba:	d1f5      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80027bc:	2301      	movs	r3, #1
 80027be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80027c2:	2300      	movs	r3, #0
 80027c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80027c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027ca:	b10b      	cbz	r3, 80027d0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80027cc:	4620      	mov	r0, r4
 80027ce:	4798      	blx	r3
}
 80027d0:	b003      	add	sp, #12
 80027d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d4:	20000008 	.word	0x20000008
 80027d8:	1b4e81b5 	.word	0x1b4e81b5

080027dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e0:	b083      	sub	sp, #12
 80027e2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e4:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	4d90      	ldr	r5, [pc, #576]	; (8002a28 <HAL_GPIO_Init+0x24c>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e8:	4f90      	ldr	r7, [pc, #576]	; (8002a2c <HAL_GPIO_Init+0x250>)
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4c91      	ldr	r4, [pc, #580]	; (8002a30 <HAL_GPIO_Init+0x254>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ec:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8002a38 <HAL_GPIO_Init+0x25c>
 80027f0:	e05b      	b.n	80028aa <HAL_GPIO_Init+0xce>
        temp = GPIOx->OSPEEDR; 
 80027f2:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027f6:	f04f 0a03 	mov.w	sl, #3
 80027fa:	fa0a fa02 	lsl.w	sl, sl, r2
 80027fe:	ea29 0a0a 	bic.w	sl, r9, sl
        temp |= (GPIO_Init->Speed << (position * 2));
 8002802:	68ce      	ldr	r6, [r1, #12]
 8002804:	fa06 f902 	lsl.w	r9, r6, r2
 8002808:	ea49 090a 	orr.w	r9, r9, sl
        GPIOx->OSPEEDR = temp;
 800280c:	f8c0 9008 	str.w	r9, [r0, #8]
        temp = GPIOx->OTYPER;
 8002810:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	ea29 090c 	bic.w	r9, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002818:	684e      	ldr	r6, [r1, #4]
 800281a:	f3c6 1c00 	ubfx	ip, r6, #4, #1
 800281e:	fa0c fc03 	lsl.w	ip, ip, r3
 8002822:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->OTYPER = temp;
 8002826:	f8c0 c004 	str.w	ip, [r0, #4]
 800282a:	e051      	b.n	80028d0 <HAL_GPIO_Init+0xf4>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800282c:	f04f 0c00 	mov.w	ip, #0
 8002830:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002834:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8002838:	f8c9 c008 	str.w	ip, [r9, #8]
        temp = EXTI->RTSR;
 800283c:	f8d4 9008 	ldr.w	r9, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002840:	ea6f 0c0e 	mvn.w	ip, lr
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002844:	684e      	ldr	r6, [r1, #4]
 8002846:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800284a:	bf0c      	ite	eq
 800284c:	ea0c 0909 	andeq.w	r9, ip, r9
        {
          temp |= iocurrent;
 8002850:	ea4e 0909 	orrne.w	r9, lr, r9
        }
        EXTI->RTSR = temp;
 8002854:	f8c4 9008 	str.w	r9, [r4, #8]

        temp = EXTI->FTSR;
 8002858:	f8d4 900c 	ldr.w	r9, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800285c:	684e      	ldr	r6, [r1, #4]
 800285e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002862:	bf0c      	ite	eq
 8002864:	ea0c 0909 	andeq.w	r9, ip, r9
        {
          temp |= iocurrent;
 8002868:	ea4e 0909 	orrne.w	r9, lr, r9
        }
        EXTI->FTSR = temp;
 800286c:	f8c4 900c 	str.w	r9, [r4, #12]

        temp = EXTI->EMR;
 8002870:	f8d4 9004 	ldr.w	r9, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002874:	684e      	ldr	r6, [r1, #4]
 8002876:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800287a:	bf0c      	ite	eq
 800287c:	ea0c 0909 	andeq.w	r9, ip, r9
        {
          temp |= iocurrent;
 8002880:	ea4e 0909 	orrne.w	r9, lr, r9
        }
        EXTI->EMR = temp;
 8002884:	f8c4 9004 	str.w	r9, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002888:	f8d4 9000 	ldr.w	r9, [r4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288c:	684e      	ldr	r6, [r1, #4]
 800288e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002892:	bf0c      	ite	eq
 8002894:	ea0c 0909 	andeq.w	r9, ip, r9
        {
          temp |= iocurrent;
 8002898:	ea4e 0909 	orrne.w	r9, lr, r9
        }
        EXTI->IMR = temp;
 800289c:	f8c4 9000 	str.w	r9, [r4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028a0:	3301      	adds	r3, #1
 80028a2:	3202      	adds	r2, #2
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	f000 80bb 	beq.w	8002a20 <HAL_GPIO_Init+0x244>
    ioposition = ((uint32_t)0x01) << position;
 80028aa:	f04f 0c01 	mov.w	ip, #1
 80028ae:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	f8d1 9000 	ldr.w	r9, [r1]
 80028b6:	ea0c 0e09 	and.w	lr, ip, r9
    if(iocurrent == ioposition)
 80028ba:	ea3c 0609 	bics.w	r6, ip, r9
 80028be:	d1ef      	bne.n	80028a0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	684e      	ldr	r6, [r1, #4]
 80028c2:	f006 0903 	and.w	r9, r6, #3
 80028c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80028ca:	f1b9 0f01 	cmp.w	r9, #1
 80028ce:	d990      	bls.n	80027f2 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	684e      	ldr	r6, [r1, #4]
 80028d2:	f006 0c03 	and.w	ip, r6, #3
 80028d6:	f1bc 0f03 	cmp.w	ip, #3
 80028da:	d02b      	beq.n	8002934 <HAL_GPIO_Init+0x158>
        temp = GPIOx->PUPDR;
 80028dc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e0:	f04f 0903 	mov.w	r9, #3
 80028e4:	fa09 f902 	lsl.w	r9, r9, r2
 80028e8:	ea2c 0909 	bic.w	r9, ip, r9
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028ec:	688e      	ldr	r6, [r1, #8]
 80028ee:	fa06 fc02 	lsl.w	ip, r6, r2
 80028f2:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->PUPDR = temp;
 80028f6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	684e      	ldr	r6, [r1, #4]
 80028fc:	f006 0c03 	and.w	ip, r6, #3
 8002900:	f1bc 0f02 	cmp.w	ip, #2
 8002904:	d116      	bne.n	8002934 <HAL_GPIO_Init+0x158>
        temp = GPIOx->AFR[position >> 3];
 8002906:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800290a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800290e:	f8d9 b020 	ldr.w	fp, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002912:	f003 0c07 	and.w	ip, r3, #7
 8002916:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800291a:	f04f 0a0f 	mov.w	sl, #15
 800291e:	fa0a fa0c 	lsl.w	sl, sl, ip
 8002922:	ea2b 0a0a 	bic.w	sl, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002926:	690e      	ldr	r6, [r1, #16]
 8002928:	fa06 fc0c 	lsl.w	ip, r6, ip
 800292c:	ea4c 0c0a 	orr.w	ip, ip, sl
        GPIOx->AFR[position >> 3] = temp;
 8002930:	f8c9 c020 	str.w	ip, [r9, #32]
      temp = GPIOx->MODER;
 8002934:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002938:	f04f 0903 	mov.w	r9, #3
 800293c:	fa09 f902 	lsl.w	r9, r9, r2
 8002940:	ea2c 0909 	bic.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002944:	684e      	ldr	r6, [r1, #4]
 8002946:	f006 0c03 	and.w	ip, r6, #3
 800294a:	fa0c fc02 	lsl.w	ip, ip, r2
 800294e:	ea4c 0c09 	orr.w	ip, ip, r9
      GPIOx->MODER = temp;
 8002952:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002956:	684e      	ldr	r6, [r1, #4]
 8002958:	f416 3f40 	tst.w	r6, #196608	; 0x30000
 800295c:	d0a0      	beq.n	80028a0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	f8d5 c044 	ldr.w	ip, [r5, #68]	; 0x44
 8002962:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8002966:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
 800296a:	f8d5 c044 	ldr.w	ip, [r5, #68]	; 0x44
 800296e:	f40c 4c80 	and.w	ip, ip, #16384	; 0x4000
 8002972:	f8cd c004 	str.w	ip, [sp, #4]
 8002976:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800297a:	f023 0903 	bic.w	r9, r3, #3
 800297e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8002982:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8002986:	f8d9 a008 	ldr.w	sl, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800298a:	f003 0c03 	and.w	ip, r3, #3
 800298e:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8002992:	f04f 0c0f 	mov.w	ip, #15
 8002996:	fa0c fc0b 	lsl.w	ip, ip, fp
 800299a:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800299e:	42b8      	cmp	r0, r7
 80029a0:	f43f af44 	beq.w	800282c <HAL_GPIO_Init+0x50>
 80029a4:	4540      	cmp	r0, r8
 80029a6:	d023      	beq.n	80029f0 <HAL_GPIO_Init+0x214>
 80029a8:	4e22      	ldr	r6, [pc, #136]	; (8002a34 <HAL_GPIO_Init+0x258>)
 80029aa:	42b0      	cmp	r0, r6
 80029ac:	d023      	beq.n	80029f6 <HAL_GPIO_Init+0x21a>
 80029ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029b2:	42b0      	cmp	r0, r6
 80029b4:	d022      	beq.n	80029fc <HAL_GPIO_Init+0x220>
 80029b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029ba:	42b0      	cmp	r0, r6
 80029bc:	d021      	beq.n	8002a02 <HAL_GPIO_Init+0x226>
 80029be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029c2:	42b0      	cmp	r0, r6
 80029c4:	d020      	beq.n	8002a08 <HAL_GPIO_Init+0x22c>
 80029c6:	f8df c074 	ldr.w	ip, [pc, #116]	; 8002a3c <HAL_GPIO_Init+0x260>
 80029ca:	4560      	cmp	r0, ip
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x232>
 80029ce:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80029d2:	4560      	cmp	r0, ip
 80029d4:	d01e      	beq.n	8002a14 <HAL_GPIO_Init+0x238>
 80029d6:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80029da:	4560      	cmp	r0, ip
 80029dc:	d01d      	beq.n	8002a1a <HAL_GPIO_Init+0x23e>
 80029de:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80029e2:	4560      	cmp	r0, ip
 80029e4:	bf0c      	ite	eq
 80029e6:	f04f 0c09 	moveq.w	ip, #9
 80029ea:	f04f 0c0a 	movne.w	ip, #10
 80029ee:	e71f      	b.n	8002830 <HAL_GPIO_Init+0x54>
 80029f0:	f04f 0c01 	mov.w	ip, #1
 80029f4:	e71c      	b.n	8002830 <HAL_GPIO_Init+0x54>
 80029f6:	f04f 0c02 	mov.w	ip, #2
 80029fa:	e719      	b.n	8002830 <HAL_GPIO_Init+0x54>
 80029fc:	f04f 0c03 	mov.w	ip, #3
 8002a00:	e716      	b.n	8002830 <HAL_GPIO_Init+0x54>
 8002a02:	f04f 0c04 	mov.w	ip, #4
 8002a06:	e713      	b.n	8002830 <HAL_GPIO_Init+0x54>
 8002a08:	f04f 0c05 	mov.w	ip, #5
 8002a0c:	e710      	b.n	8002830 <HAL_GPIO_Init+0x54>
 8002a0e:	f04f 0c06 	mov.w	ip, #6
 8002a12:	e70d      	b.n	8002830 <HAL_GPIO_Init+0x54>
 8002a14:	f04f 0c07 	mov.w	ip, #7
 8002a18:	e70a      	b.n	8002830 <HAL_GPIO_Init+0x54>
 8002a1a:	f04f 0c08 	mov.w	ip, #8
 8002a1e:	e707      	b.n	8002830 <HAL_GPIO_Init+0x54>
      }
    }
  }
}
 8002a20:	b003      	add	sp, #12
 8002a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40013c00 	.word	0x40013c00
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40021800 	.word	0x40021800

08002a40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	b10a      	cbz	r2, 8002a46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	6181      	str	r1, [r0, #24]
 8002a44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a46:	0409      	lsls	r1, r1, #16
 8002a48:	6181      	str	r1, [r0, #24]
  }
}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2S_Init>:
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	f000 809d 	beq.w	8002b8c <HAL_I2S_Init+0x140>
{
 8002a52:	b538      	push	{r3, r4, r5, lr}
 8002a54:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d035      	beq.n	8002aca <HAL_I2S_Init+0x7e>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a64:	6821      	ldr	r1, [r4, #0]
 8002a66:	69c8      	ldr	r0, [r1, #28]
 8002a68:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_I2S_Init+0x144>)
 8002a6a:	4003      	ands	r3, r0
 8002a6c:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a72:	6960      	ldr	r0, [r4, #20]
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d064      	beq.n	8002b42 <HAL_I2S_Init+0xf6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a78:	68e5      	ldr	r5, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2310      	moveq	r3, #16
 8002a80:	2320      	movne	r3, #32
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a82:	68a2      	ldr	r2, [r4, #8]
 8002a84:	2a20      	cmp	r2, #32
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a86:	bf98      	it	ls
 8002a88:	005b      	lslls	r3, r3, #1
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002a8a:	69e2      	ldr	r2, [r4, #28]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8002a8c:	2a01      	cmp	r2, #1
 8002a8e:	d021      	beq.n	8002ad4 <HAL_I2S_Init+0x88>
 8002a90:	2a02      	cmp	r2, #2
 8002a92:	d13d      	bne.n	8002b10 <HAL_I2S_Init+0xc4>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a94:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <HAL_I2S_Init+0x148>)
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a9c:	4a3d      	ldr	r2, [pc, #244]	; (8002b94 <HAL_I2S_Init+0x148>)
 8002a9e:	6851      	ldr	r1, [r2, #4]
 8002aa0:	f001 0c3f 	and.w	ip, r1, #63	; 0x3f
 8002aa4:	bf0c      	ite	eq
 8002aa6:	493c      	ldreq	r1, [pc, #240]	; (8002b98 <HAL_I2S_Init+0x14c>)
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002aa8:	493c      	ldrne	r1, [pc, #240]	; (8002b9c <HAL_I2S_Init+0x150>)
 8002aaa:	fbb1 fcfc 	udiv	ip, r1, ip
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002aae:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_I2S_Init+0x148>)
 8002ab0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002ab4:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
 8002ab8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002abc:	fb0c f101 	mul.w	r1, ip, r1
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002ac0:	f3c2 7202 	ubfx	r2, r2, #28, #3
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002ac4:	fbb1 f2f2 	udiv	r2, r1, r2

      break;
 8002ac8:	e005      	b.n	8002ad6 <HAL_I2S_Init+0x8a>
    hi2s->Lock = HAL_UNLOCKED;
 8002aca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_I2S_MspInit(hi2s);
 8002ace:	f7ff fa19 	bl	8001f04 <HAL_I2S_MspInit>
 8002ad2:	e7c4      	b.n	8002a5e <HAL_I2S_Init+0x12>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <HAL_I2S_Init+0x154>)
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ad6:	6921      	ldr	r1, [r4, #16]
 8002ad8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002adc:	d01a      	beq.n	8002b14 <HAL_I2S_Init+0xc8>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ae6:	0053      	lsls	r3, r2, #1
 8002ae8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002aec:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002aee:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <HAL_I2S_Init+0x158>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002af4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002af8:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8002afc:	0858      	lsrs	r0, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002afe:	1e83      	subs	r3, r0, #2
 8002b00:	2bfd      	cmp	r3, #253	; 0xfd
 8002b02:	d91c      	bls.n	8002b3e <HAL_I2S_Init+0xf2>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return  HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	e03c      	b.n	8002b8a <HAL_I2S_Init+0x13e>
  switch (hi2s->Init.ClockSource)
 8002b10:	2200      	movs	r2, #0
 8002b12:	e7e0      	b.n	8002ad6 <HAL_I2S_Init+0x8a>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b14:	b14d      	cbz	r5, 8002b2a <HAL_I2S_Init+0xde>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b20:	0052      	lsls	r2, r2, #1
 8002b22:	fbb2 f3f0 	udiv	r3, r2, r0
 8002b26:	3305      	adds	r3, #5
 8002b28:	e7e1      	b.n	8002aee <HAL_I2S_Init+0xa2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b34:	0052      	lsls	r2, r2, #1
 8002b36:	fbb2 f3f0 	udiv	r3, r2, r0
 8002b3a:	3305      	adds	r3, #5
 8002b3c:	e7d7      	b.n	8002aee <HAL_I2S_Init+0xa2>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b3e:	0213      	lsls	r3, r2, #8
 8002b40:	e000      	b.n	8002b44 <HAL_I2S_Init+0xf8>
    i2sodd = 0U;
 8002b42:	2300      	movs	r3, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b44:	6821      	ldr	r1, [r4, #0]
 8002b46:	4303      	orrs	r3, r0
 8002b48:	6920      	ldr	r0, [r4, #16]
 8002b4a:	4303      	orrs	r3, r0
 8002b4c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b4e:	6821      	ldr	r1, [r4, #0]
 8002b50:	69c8      	ldr	r0, [r1, #28]
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	68a2      	ldr	r2, [r4, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_I2S_Init+0x144>)
 8002b5a:	4002      	ands	r2, r0
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	68e2      	ldr	r2, [r4, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	69a2      	ldr	r2, [r4, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6a:	61cb      	str	r3, [r1, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002b6c:	68a3      	ldr	r3, [r4, #8]
 8002b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b72:	2b30      	cmp	r3, #48	; 0x30
 8002b74:	d104      	bne.n	8002b80 <HAL_I2S_Init+0x134>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	69d3      	ldr	r3, [r2, #28]
 8002b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b7e:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b80:	2000      	movs	r0, #0
 8002b82:	63e0      	str	r0, [r4, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
}
 8002b8e:	4770      	bx	lr
 8002b90:	fffff040 	.word	0xfffff040
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	017d7840 	.word	0x017d7840
 8002ba0:	00bb8000 	.word	0x00bb8000
 8002ba4:	cccccccd 	.word	0xcccccccd

08002ba8 <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	d072      	beq.n	8002c92 <HAL_I2S_Receive_DMA+0xea>
{
 8002bac:	b530      	push	{r4, r5, lr}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	d068      	beq.n	8002c88 <HAL_I2S_Receive_DMA+0xe0>
  __HAL_LOCK(hi2s);
 8002bb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d066      	beq.n	8002c8e <HAL_I2S_Receive_DMA+0xe6>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002bc6:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
 8002bca:	b2ed      	uxtb	r5, r5
 8002bcc:	429d      	cmp	r5, r3
 8002bce:	d110      	bne.n	8002bf2 <HAL_I2S_Receive_DMA+0x4a>
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63e3      	str	r3, [r4, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8002bda:	62a1      	str	r1, [r4, #40]	; 0x28
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d009      	beq.n	8002bfc <HAL_I2S_Receive_DMA+0x54>
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d007      	beq.n	8002bfc <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = Size;
 8002bec:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8002bee:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8002bf0:	e008      	b.n	8002c04 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_BUSY;
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	e046      	b.n	8002c8a <HAL_I2S_Receive_DMA+0xe2>
    hi2s->RxXferSize = (Size << 1U);
 8002bfc:	0052      	lsls	r2, r2, #1
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002c02:	85e2      	strh	r2, [r4, #46]	; 0x2e
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_I2S_Receive_DMA+0xf0>)
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_I2S_Receive_DMA+0xf4>)
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <HAL_I2S_Receive_DMA+0xf8>)
 8002c14:	64da      	str	r2, [r3, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	69cb      	ldr	r3, [r1, #28]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c22:	d01d      	beq.n	8002c60 <HAL_I2S_Receive_DMA+0xb8>
                                 hi2s->RxXferSize))
 8002c24:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c2a:	310c      	adds	r1, #12
 8002c2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c2e:	f7ff fc99 	bl	8002564 <HAL_DMA_Start_IT>
 8002c32:	b9e8      	cbnz	r0, 8002c70 <HAL_I2S_Receive_DMA+0xc8>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c3c:	d103      	bne.n	8002c46 <HAL_I2S_Receive_DMA+0x9e>
    __HAL_I2S_ENABLE(hi2s);
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	f012 0f01 	tst.w	r2, #1
 8002c4e:	d103      	bne.n	8002c58 <HAL_I2S_Receive_DMA+0xb0>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8002c5e:	e014      	b.n	8002c8a <HAL_I2S_Receive_DMA+0xe2>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	68cb      	ldr	r3, [r1, #12]
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	688b      	ldr	r3, [r1, #8]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	9b01      	ldr	r3, [sp, #4]
 8002c6e:	e7d9      	b.n	8002c24 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	63e3      	str	r3, [r4, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(hi2s);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002c84:	4628      	mov	r0, r5
 8002c86:	e000      	b.n	8002c8a <HAL_I2S_Receive_DMA+0xe2>
    return  HAL_ERROR;
 8002c88:	2001      	movs	r0, #1
}
 8002c8a:	b003      	add	sp, #12
 8002c8c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 8002c8e:	2002      	movs	r0, #2
 8002c90:	e7fb      	b.n	8002c8a <HAL_I2S_Receive_DMA+0xe2>
    return  HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	08002ca5 	.word	0x08002ca5
 8002c9c:	08002caf 	.word	0x08002caf
 8002ca0:	08002cd5 	.word	0x08002cd5

08002ca4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002ca6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002ca8:	f7fe ff3c 	bl	8001b24 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cac:	bd08      	pop	{r3, pc}

08002cae <I2S_DMARxCplt>:
{
 8002cae:	b508      	push	{r3, lr}
 8002cb0:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	b94b      	cbnz	r3, 8002ccc <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cb8:	6802      	ldr	r2, [r0, #0]
 8002cba:	6853      	ldr	r3, [r2, #4]
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_I2S_RxCpltCallback(hi2s);
 8002ccc:	f7fe ff34 	bl	8001b38 <HAL_I2S_RxCpltCallback>
}
 8002cd0:	bd08      	pop	{r3, pc}

08002cd2 <HAL_I2S_ErrorCallback>:
}
 8002cd2:	4770      	bx	lr

08002cd4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cd6:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cd8:	6802      	ldr	r2, [r0, #0]
 8002cda:	6853      	ldr	r3, [r2, #4]
 8002cdc:	f023 0303 	bic.w	r3, r3, #3
 8002ce0:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	84c3      	strh	r3, [r0, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8002ce6:	85c3      	strh	r3, [r0, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002cf6:	f7ff ffec 	bl	8002cd2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cfa:	bd08      	pop	{r3, pc}

08002cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cfc:	b530      	push	{r4, r5, lr}
 8002cfe:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_PWREx_EnableOverDrive+0x74>)
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_PWREx_EnableOverDrive+0x78>)
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1e:	f7ff faeb 	bl	80022f8 <HAL_GetTick>
 8002d22:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d24:	4d13      	ldr	r5, [pc, #76]	; (8002d74 <HAL_PWREx_EnableOverDrive+0x78>)
 8002d26:	686b      	ldr	r3, [r5, #4]
 8002d28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d2c:	d108      	bne.n	8002d40 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d2e:	f7ff fae3 	bl	80022f8 <HAL_GetTick>
 8002d32:	1b00      	subs	r0, r0, r4
 8002d34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d38:	d9f5      	bls.n	8002d26 <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <HAL_PWREx_EnableOverDrive+0x78>)
 8002d42:	6813      	ldr	r3, [r2, #0]
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002d4a:	f7ff fad5 	bl	80022f8 <HAL_GetTick>
 8002d4e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d50:	4d08      	ldr	r5, [pc, #32]	; (8002d74 <HAL_PWREx_EnableOverDrive+0x78>)
 8002d52:	686b      	ldr	r3, [r5, #4]
 8002d54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d58:	d107      	bne.n	8002d6a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d5a:	f7ff facd 	bl	80022f8 <HAL_GetTick>
 8002d5e:	1b00      	subs	r0, r0, r4
 8002d60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d64:	d9f5      	bls.n	8002d52 <HAL_PWREx_EnableOverDrive+0x56>
      return HAL_TIMEOUT;
 8002d66:	2003      	movs	r0, #3
 8002d68:	e7e8      	b.n	8002d3c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	e7e6      	b.n	8002d3c <HAL_PWREx_EnableOverDrive+0x40>
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	f000 8202 	beq.w	8003182 <HAL_RCC_OscConfig+0x40a>
{
 8002d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	f013 0f01 	tst.w	r3, #1
 8002d8c:	d029      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d8e:	4b96      	ldr	r3, [pc, #600]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d01a      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b93      	ldr	r3, [pc, #588]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d00f      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_OscConfig+0xb8>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d154      	bne.n	8002e5c <HAL_RCC_OscConfig+0xe4>
 8002db2:	4b8d      	ldr	r3, [pc, #564]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e039      	b.n	8002e3a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002dce:	d0ea      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	4b85      	ldr	r3, [pc, #532]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6a>
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 81d2 	beq.w	8003186 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	f013 0f02 	tst.w	r3, #2
 8002de8:	d074      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f013 0f0c 	tst.w	r3, #12
 8002df2:	d05e      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df4:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d053      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e00:	68e3      	ldr	r3, [r4, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8089 	beq.w	8002f1a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4a77      	ldr	r2, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7ff fa71 	bl	80022f8 <HAL_GetTick>
 8002e16:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4e73      	ldr	r6, [pc, #460]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	6833      	ldr	r3, [r6, #0]
 8002e1c:	f013 0f02 	tst.w	r3, #2
 8002e20:	d172      	bne.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7ff fa69 	bl	80022f8 <HAL_GetTick>
 8002e26:	1b40      	subs	r0, r0, r5
 8002e28:	2802      	cmp	r0, #2
 8002e2a:	d9f6      	bls.n	8002e1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	e1af      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	4a6d      	ldr	r2, [pc, #436]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	b32b      	cbz	r3, 8002e8a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8002e3e:	f7ff fa5b 	bl	80022f8 <HAL_GetTick>
 8002e42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e44:	4e68      	ldr	r6, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e4c:	d1c9      	bne.n	8002de2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4e:	f7ff fa53 	bl	80022f8 <HAL_GetTick>
 8002e52:	1b40      	subs	r0, r0, r5
 8002e54:	2864      	cmp	r0, #100	; 0x64
 8002e56:	d9f6      	bls.n	8002e46 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
 8002e5a:	e199      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_OscConfig+0xfe>
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e7e1      	b.n	8002e3a <HAL_RCC_OscConfig+0xc2>
 8002e76:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e7d7      	b.n	8002e3a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002e8a:	f7ff fa35 	bl	80022f8 <HAL_GetTick>
 8002e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e90:	4e55      	ldr	r6, [pc, #340]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e92:	6833      	ldr	r3, [r6, #0]
 8002e94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e98:	d0a3      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7ff fa2d 	bl	80022f8 <HAL_GetTick>
 8002e9e:	1b40      	subs	r0, r0, r5
 8002ea0:	2864      	cmp	r0, #100	; 0x64
 8002ea2:	d9f6      	bls.n	8002e92 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	e173      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002eb0:	d1a6      	bne.n	8002e00 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f013 0f02 	tst.w	r3, #2
 8002eba:	d003      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x14c>
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 8163 	bne.w	800318a <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4a48      	ldr	r2, [pc, #288]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	6921      	ldr	r1, [r4, #16]
 8002eca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ece:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ed2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f013 0f08 	tst.w	r3, #8
 8002eda:	d046      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	b383      	cbz	r3, 8002f42 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7ff fa05 	bl	80022f8 <HAL_GetTick>
 8002eee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef0:	4e3d      	ldr	r6, [pc, #244]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002ef4:	f013 0f02 	tst.w	r3, #2
 8002ef8:	d137      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7ff f9fd 	bl	80022f8 <HAL_GetTick>
 8002efe:	1b40      	subs	r0, r0, r5
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d9f6      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002f04:	2003      	movs	r0, #3
 8002f06:	e143      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	6921      	ldr	r1, [r4, #16]
 8002f0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e7dc      	b.n	8002ed4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f24:	f7ff f9e8 	bl	80022f8 <HAL_GetTick>
 8002f28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4e2f      	ldr	r6, [pc, #188]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	f013 0f02 	tst.w	r3, #2
 8002f32:	d0cf      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7ff f9e0 	bl	80022f8 <HAL_GetTick>
 8002f38:	1b40      	subs	r0, r0, r5
 8002f3a:	2802      	cmp	r0, #2
 8002f3c:	d9f6      	bls.n	8002f2c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002f3e:	2003      	movs	r0, #3
 8002f40:	e126      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f42:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f44:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7ff f9d4 	bl	80022f8 <HAL_GetTick>
 8002f50:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f52:	4e25      	ldr	r6, [pc, #148]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f54:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002f56:	f013 0f02 	tst.w	r3, #2
 8002f5a:	d006      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7ff f9cc 	bl	80022f8 <HAL_GetTick>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d9f6      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e112      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	f013 0f04 	tst.w	r3, #4
 8002f70:	d07e      	beq.n	8003070 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f7a:	d11e      	bne.n	8002fba <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f90:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	68a3      	ldr	r3, [r4, #8]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d026      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x278>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13c      	bne.n	8003020 <HAL_RCC_OscConfig+0x2a8>
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	671a      	str	r2, [r3, #112]	; 0x70
 8002fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb2:	f022 0204 	bic.w	r2, r2, #4
 8002fb6:	671a      	str	r2, [r3, #112]	; 0x70
 8002fb8:	e01f      	b.n	8002ffa <HAL_RCC_OscConfig+0x282>
  FlagStatus pwrclkchanged = RESET;
 8002fba:	2500      	movs	r5, #0
 8002fbc:	e7e9      	b.n	8002f92 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fc0:	6813      	ldr	r3, [r2, #0]
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002fc8:	f7ff f996 	bl	80022f8 <HAL_GetTick>
 8002fcc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fce:	4f07      	ldr	r7, [pc, #28]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fd6:	d1e1      	bne.n	8002f9c <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd8:	f7ff f98e 	bl	80022f8 <HAL_GetTick>
 8002fdc:	1b80      	subs	r0, r0, r6
 8002fde:	2864      	cmp	r0, #100	; 0x64
 8002fe0:	d9f6      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	e0d4      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 8002ff2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffa:	68a3      	ldr	r3, [r4, #8]
 8002ffc:	b333      	cbz	r3, 800304c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7ff f97b 	bl	80022f8 <HAL_GetTick>
 8003002:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	4f69      	ldr	r7, [pc, #420]	; (80031ac <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800300c:	f013 0f02 	tst.w	r3, #2
 8003010:	d12d      	bne.n	800306e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7ff f971 	bl	80022f8 <HAL_GetTick>
 8003016:	1b80      	subs	r0, r0, r6
 8003018:	4540      	cmp	r0, r8
 800301a:	d9f6      	bls.n	800300a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800301c:	2003      	movs	r0, #3
 800301e:	e0b7      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	2b05      	cmp	r3, #5
 8003022:	d009      	beq.n	8003038 <HAL_RCC_OscConfig+0x2c0>
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 8003026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	671a      	str	r2, [r3, #112]	; 0x70
 800302e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	671a      	str	r2, [r3, #112]	; 0x70
 8003036:	e7e0      	b.n	8002ffa <HAL_RCC_OscConfig+0x282>
 8003038:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 800303a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800303c:	f042 0204 	orr.w	r2, r2, #4
 8003040:	671a      	str	r2, [r3, #112]	; 0x70
 8003042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	671a      	str	r2, [r3, #112]	; 0x70
 800304a:	e7d6      	b.n	8002ffa <HAL_RCC_OscConfig+0x282>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7ff f954 	bl	80022f8 <HAL_GetTick>
 8003050:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	4f56      	ldr	r7, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305a:	f013 0f02 	tst.w	r3, #2
 800305e:	d006      	beq.n	800306e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff f94a 	bl	80022f8 <HAL_GetTick>
 8003064:	1b80      	subs	r0, r0, r6
 8003066:	4540      	cmp	r0, r8
 8003068:	d9f6      	bls.n	8003058 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 800306a:	2003      	movs	r0, #3
 800306c:	e090      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306e:	b9fd      	cbnz	r5, 80030b0 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	69a3      	ldr	r3, [r4, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 808b 	beq.w	800318e <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	f002 020c 	and.w	r2, r2, #12
 8003080:	2a08      	cmp	r2, #8
 8003082:	d058      	beq.n	8003136 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003084:	2b02      	cmp	r3, #2
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7ff f931 	bl	80022f8 <HAL_GetTick>
 8003096:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	4d44      	ldr	r5, [pc, #272]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 800309a:	682b      	ldr	r3, [r5, #0]
 800309c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030a0:	d047      	beq.n	8003132 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7ff f929 	bl	80022f8 <HAL_GetTick>
 80030a6:	1b00      	subs	r0, r0, r4
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d9f6      	bls.n	800309a <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 80030ac:	2003      	movs	r0, #3
 80030ae:	e06f      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4a3e      	ldr	r2, [pc, #248]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 80030b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	e7d9      	b.n	8003070 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030c6:	f7ff f917 	bl	80022f8 <HAL_GetTick>
 80030ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	4e37      	ldr	r6, [pc, #220]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 80030ce:	6833      	ldr	r3, [r6, #0]
 80030d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030d4:	d006      	beq.n	80030e4 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7ff f90f 	bl	80022f8 <HAL_GetTick>
 80030da:	1b40      	subs	r0, r0, r5
 80030dc:	2802      	cmp	r0, #2
 80030de:	d9f6      	bls.n	80030ce <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80030e0:	2003      	movs	r0, #3
 80030e2:	e055      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	69e3      	ldr	r3, [r4, #28]
 80030ec:	6a21      	ldr	r1, [r4, #32]
 80030ee:	430b      	orrs	r3, r1
 80030f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80030fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003104:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 8003106:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003110:	f7ff f8f2 	bl	80022f8 <HAL_GetTick>
 8003114:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4d25      	ldr	r5, [pc, #148]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff f8ea 	bl	80022f8 <HAL_GetTick>
 8003124:	1b00      	subs	r0, r0, r4
 8003126:	2802      	cmp	r0, #2
 8003128:	d9f6      	bls.n	8003118 <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 800312a:	2003      	movs	r0, #3
 800312c:	e030      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800312e:	2000      	movs	r0, #0
 8003130:	e02e      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 8003132:	2000      	movs	r0, #0
 8003134:	e02c      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
      pll_config = RCC->PLLCFGR;
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x434>)
 8003138:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	2b01      	cmp	r3, #1
 800313c:	d02b      	beq.n	8003196 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	69e1      	ldr	r1, [r4, #28]
 8003144:	428b      	cmp	r3, r1
 8003146:	d128      	bne.n	800319a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003148:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	6a21      	ldr	r1, [r4, #32]
 800314e:	428b      	cmp	r3, r1
 8003150:	d125      	bne.n	800319e <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003152:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800315e:	d120      	bne.n	80031a2 <HAL_RCC_OscConfig+0x42a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003160:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8003164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800316e:	d11a      	bne.n	80031a6 <HAL_RCC_OscConfig+0x42e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003172:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003176:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 800317a:	bf14      	ite	ne
 800317c:	2001      	movne	r0, #1
 800317e:	2000      	moveq	r0, #0
 8003180:	e006      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
    return HAL_ERROR;
 8003182:	2001      	movs	r0, #1
}
 8003184:	4770      	bx	lr
        return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
 8003188:	e002      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
        return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
 800318c:	e000      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
  return HAL_OK;
 800318e:	2000      	movs	r0, #0
}
 8003190:	b002      	add	sp, #8
 8003192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	e7fa      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 800319a:	2001      	movs	r0, #1
 800319c:	e7f8      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 800319e:	2001      	movs	r0, #1
 80031a0:	e7f6      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 80031a2:	2001      	movs	r0, #1
 80031a4:	e7f4      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 80031a6:	2001      	movs	r0, #1
 80031a8:	e7f2      	b.n	8003190 <HAL_RCC_OscConfig+0x418>
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d03f      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x8e>
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d13f      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80031d0:	d012      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80031da:	481c      	ldr	r0, [pc, #112]	; (800324c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	fba1 0100 	umull	r0, r1, r1, r0
 80031e2:	f7fd fd61 	bl	8000ca8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80031f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80031f6:	e025      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003200:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003204:	ebb1 000c 	subs.w	r0, r1, ip
 8003208:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800320c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003214:	0181      	lsls	r1, r0, #6
 8003216:	1a09      	subs	r1, r1, r0
 8003218:	eb63 030e 	sbc.w	r3, r3, lr
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003222:	00c9      	lsls	r1, r1, #3
 8003224:	eb11 0c0c 	adds.w	ip, r1, ip
 8003228:	f143 0300 	adc.w	r3, r3, #0
 800322c:	0299      	lsls	r1, r3, #10
 800322e:	2300      	movs	r3, #0
 8003230:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003234:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003238:	f7fd fd36 	bl	8000ca8 <__aeabi_uldivmod>
 800323c:	e7d3      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323e:	4803      	ldr	r0, [pc, #12]	; (800324c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003240:	e000      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x94>
      sysclockfreq = HSI_VALUE;
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003244:	bd08      	pop	{r3, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	017d7840 	.word	0x017d7840
 8003250:	00f42400 	.word	0x00f42400

08003254 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003254:	2800      	cmp	r0, #0
 8003256:	f000 80a2 	beq.w	800339e <HAL_RCC_ClockConfig+0x14a>
{
 800325a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	460d      	mov	r5, r1
 8003260:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003262:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x15c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	428b      	cmp	r3, r1
 800326c:	d20b      	bcs.n	8003286 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4a50      	ldr	r2, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x15c>)
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	430b      	orrs	r3, r1
 8003278:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	428b      	cmp	r3, r1
 8003282:	f040 808e 	bne.w	80033a2 <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	f013 0f02 	tst.w	r3, #2
 800328c:	d017      	beq.n	80032be <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328e:	f013 0f04 	tst.w	r3, #4
 8003292:	d004      	beq.n	800329e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4a47      	ldr	r2, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 8003296:	6893      	ldr	r3, [r2, #8]
 8003298:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	f013 0f08 	tst.w	r3, #8
 80032a4:	d004      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 80032a8:	6893      	ldr	r3, [r2, #8]
 80032aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 80032b2:	6893      	ldr	r3, [r2, #8]
 80032b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b8:	68a1      	ldr	r1, [r4, #8]
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f013 0f01 	tst.w	r3, #1
 80032c4:	d031      	beq.n	800332a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	6862      	ldr	r2, [r4, #4]
 80032c8:	2a01      	cmp	r2, #1
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032cc:	2a02      	cmp	r2, #2
 80032ce:	d025      	beq.n	800331c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f013 0f02 	tst.w	r3, #2
 80032d8:	d065      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032da:	4936      	ldr	r1, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 80032dc:	688b      	ldr	r3, [r1, #8]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80032e6:	f7ff f807 	bl	80022f8 <HAL_GetTick>
 80032ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ec:	4f31      	ldr	r7, [pc, #196]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ee:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	6862      	ldr	r2, [r4, #4]
 80032fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032fe:	d014      	beq.n	800332a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe fffa 	bl	80022f8 <HAL_GetTick>
 8003304:	1b80      	subs	r0, r0, r6
 8003306:	4540      	cmp	r0, r8
 8003308:	d9f3      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800330a:	2003      	movs	r0, #3
 800330c:	e045      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003316:	d1e0      	bne.n	80032da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003318:	2001      	movs	r0, #1
 800331a:	e03e      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003324:	d1d9      	bne.n	80032da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003326:	2001      	movs	r0, #1
 8003328:	e037      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_ClockConfig+0x15c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	42ab      	cmp	r3, r5
 8003334:	d90a      	bls.n	800334c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_RCC_ClockConfig+0x15c>)
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	432b      	orrs	r3, r5
 8003340:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	42ab      	cmp	r3, r5
 800334a:	d12e      	bne.n	80033aa <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f013 0f04 	tst.w	r3, #4
 8003352:	d006      	beq.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 8003356:	6893      	ldr	r3, [r2, #8]
 8003358:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800335c:	68e1      	ldr	r1, [r4, #12]
 800335e:	430b      	orrs	r3, r1
 8003360:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	f013 0f08 	tst.w	r3, #8
 8003368:	d007      	beq.n	800337a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 800336c:	6893      	ldr	r3, [r2, #8]
 800336e:	6921      	ldr	r1, [r4, #16]
 8003370:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003374:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003378:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f7ff ff19 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCC_ClockConfig+0x160>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <HAL_RCC_ClockConfig+0x164>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	40d8      	lsrs	r0, r3
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x168>)
 800338e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x16c>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	f7fe ff6a 	bl	800226c <HAL_InitTick>
  return HAL_OK;
 8003398:	2000      	movs	r0, #0
}
 800339a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800339e:	2001      	movs	r0, #1
}
 80033a0:	4770      	bx	lr
      return HAL_ERROR;
 80033a2:	2001      	movs	r0, #1
 80033a4:	e7f9      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80033a6:	2001      	movs	r0, #1
 80033a8:	e7f7      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 80033aa:	2001      	movs	r0, #1
 80033ac:	e7f5      	b.n	800339a <HAL_RCC_ClockConfig+0x146>
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08008e34 	.word	0x08008e34
 80033bc:	20000008 	.word	0x20000008
 80033c0:	20000010 	.word	0x20000010

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033d2:	6810      	ldr	r0, [r2, #0]
}
 80033d4:	40d8      	lsrs	r0, r3
 80033d6:	4770      	bx	lr
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08008e44 	.word	0x08008e44
 80033e0:	20000008 	.word	0x20000008

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80033ec:	4a03      	ldr	r2, [pc, #12]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033f2:	6810      	ldr	r0, [r2, #0]
}
 80033f4:	40d8      	lsrs	r0, r3
 80033f6:	4770      	bx	lr
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08008e44 	.word	0x08008e44
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003408:	b083      	sub	sp, #12
 800340a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800340c:	6806      	ldr	r6, [r0, #0]
 800340e:	f016 0601 	ands.w	r6, r6, #1
 8003412:	d00c      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003414:	4bb3      	ldr	r3, [pc, #716]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003426:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003428:	fab6 f686 	clz	r6, r6
 800342c:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800342e:	6825      	ldr	r5, [r4, #0]
 8003430:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8003434:	d010      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003436:	4aab      	ldr	r2, [pc, #684]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003438:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800343c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003440:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003442:	430b      	orrs	r3, r1
 8003444:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003448:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1;
 800344a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800344e:	bf08      	it	eq
 8003450:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003452:	fab5 f585 	clz	r5, r5
 8003456:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800345e:	d010      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003460:	4aa0      	ldr	r2, [pc, #640]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003462:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003466:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800346a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800346c:	430b      	orrs	r3, r1
 800346e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	f000 8112 	beq.w	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf08      	it	eq
 8003480:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003482:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8003484:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003488:	bf18      	it	ne
 800348a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348c:	f013 0f20 	tst.w	r3, #32
 8003490:	f040 8108 	bne.w	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	f013 0f10 	tst.w	r3, #16
 800349a:	d00c      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800349c:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800349e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034a2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80034a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80034aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034b0:	430a      	orrs	r2, r1
 80034b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80034bc:	d008      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034be:	4a89      	ldr	r2, [pc, #548]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80034ca:	430b      	orrs	r3, r1
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d8:	4a82      	ldr	r2, [pc, #520]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034de:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80034e2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80034e4:	430b      	orrs	r3, r1
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f2:	4a7c      	ldr	r2, [pc, #496]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80034fc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80034fe:	430b      	orrs	r3, r1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800350c:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800350e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003512:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003516:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003518:	430b      	orrs	r3, r1
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003526:	4a6f      	ldr	r2, [pc, #444]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003528:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800352c:	f023 0303 	bic.w	r3, r3, #3
 8003530:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003532:	430b      	orrs	r3, r1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003540:	4a68      	ldr	r2, [pc, #416]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003542:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003546:	f023 030c 	bic.w	r3, r3, #12
 800354a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800354c:	430b      	orrs	r3, r1
 800354e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003558:	d008      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355a:	4a62      	ldr	r2, [pc, #392]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800355c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003560:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003564:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003566:	430b      	orrs	r3, r1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003572:	d008      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003574:	4a5b      	ldr	r2, [pc, #364]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003576:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800357a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800357e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003580:	430b      	orrs	r3, r1
 8003582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800358e:	4a55      	ldr	r2, [pc, #340]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003590:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003598:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800359a:	430b      	orrs	r3, r1
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035a8:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80035b4:	430b      	orrs	r3, r1
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035c2:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035dc:	4a41      	ldr	r2, [pc, #260]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80035e8:	430b      	orrs	r3, r1
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003600:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003602:	430b      	orrs	r3, r1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003610:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003612:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003616:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800361a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800361c:	430b      	orrs	r3, r1
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003622:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1;
 8003624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003628:	bf08      	it	eq
 800362a:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362c:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 800362e:	f013 0f08 	tst.w	r3, #8
 8003632:	bf18      	it	ne
 8003634:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003636:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800363e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003642:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003646:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003648:	430b      	orrs	r3, r1
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003654:	d009      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003656:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003658:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003664:	430b      	orrs	r3, r1
 8003666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800366a:	2e01      	cmp	r6, #1
 800366c:	d004      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003674:	f000 8102 	beq.w	800387c <HAL_RCCEx_PeriphCLKConfig+0x478>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003678:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003682:	f7fe fe39 	bl	80022f8 <HAL_GetTick>
 8003686:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003688:	4f16      	ldr	r7, [pc, #88]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003690:	d076      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003692:	f7fe fe31 	bl	80022f8 <HAL_GetTick>
 8003696:	1b80      	subs	r0, r0, r6
 8003698:	2864      	cmp	r0, #100	; 0x64
 800369a:	d9f6      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x286>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369c:	2003      	movs	r0, #3
 800369e:	e0f0      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      plli2sused = 1;
 80036a0:	2601      	movs	r6, #1
 80036a2:	e6ee      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036c2:	f7fe fe19 	bl	80022f8 <HAL_GetTick>
 80036c6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036c8:	f8df 801c 	ldr.w	r8, [pc, #28]	; 80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80036cc:	f8d8 3000 	ldr.w	r3, [r8]
 80036d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036d4:	d10a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7fe fe0f 	bl	80022f8 <HAL_GetTick>
 80036da:	1bc0      	subs	r0, r0, r7
 80036dc:	2864      	cmp	r0, #100	; 0x64
 80036de:	d9f5      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        return HAL_TIMEOUT;
 80036e0:	2003      	movs	r0, #3
 80036e2:	e0ce      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ec:	4bab      	ldr	r3, [pc, #684]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80036f4:	d015      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80036f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d010      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003700:	4ba6      	ldr	r3, [pc, #664]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003704:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003708:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800370a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800370e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003710:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003712:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003716:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003718:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f013 0f01 	tst.w	r3, #1
 8003720:	d112      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003724:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003728:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800372c:	d01f      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800372e:	4a9b      	ldr	r2, [pc, #620]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003730:	6893      	ldr	r3, [r2, #8]
 8003732:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	4a98      	ldr	r2, [pc, #608]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800373a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800373c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800373e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003742:	430b      	orrs	r3, r1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	e6a5      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8003748:	f7fe fdd6 	bl	80022f8 <HAL_GetTick>
 800374c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800399c <HAL_RCCEx_PeriphCLKConfig+0x598>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800375a:	f013 0f02 	tst.w	r3, #2
 800375e:	d1e0      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x31e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fdca 	bl	80022f8 <HAL_GetTick>
 8003764:	1bc0      	subs	r0, r0, r7
 8003766:	4548      	cmp	r0, r9
 8003768:	d9f5      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 800376a:	2003      	movs	r0, #3
 800376c:	e089      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376e:	488b      	ldr	r0, [pc, #556]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003770:	6882      	ldr	r2, [r0, #8]
 8003772:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003776:	498a      	ldr	r1, [pc, #552]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003778:	4019      	ands	r1, r3
 800377a:	430a      	orrs	r2, r1
 800377c:	6082      	str	r2, [r0, #8]
 800377e:	e7db      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x334>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	f013 0f01 	tst.w	r3, #1
 8003786:	d013      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800378a:	b98b      	cbnz	r3, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800378c:	4a83      	ldr	r2, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800378e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003792:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800379a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800379e:	430b      	orrs	r3, r1
 80037a0:	6861      	ldr	r1, [r4, #4]
 80037a2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80037a6:	68a1      	ldr	r1, [r4, #8]
 80037a8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80037ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80037b6:	d003      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037ba:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80037be:	d006      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80037c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80037c4:	d01e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x400>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037cc:	d11a      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x400>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037ce:	4a73      	ldr	r2, [pc, #460]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80037d0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037d4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037dc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6861      	ldr	r1, [r4, #4]
 80037e4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80037e8:	68e1      	ldr	r1, [r4, #12]
 80037ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80037ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037f2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80037f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037f8:	3b01      	subs	r3, #1
 80037fa:	f021 011f 	bic.w	r1, r1, #31
 80037fe:	430b      	orrs	r3, r1
 8003800:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800380a:	d011      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800380c:	4a63      	ldr	r2, [pc, #396]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800380e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003812:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003816:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800381a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800381e:	430b      	orrs	r3, r1
 8003820:	6861      	ldr	r1, [r4, #4]
 8003822:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003826:	6921      	ldr	r1, [r4, #16]
 8003828:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800382c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003836:	d00d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003838:	6862      	ldr	r2, [r4, #4]
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003842:	68e2      	ldr	r2, [r4, #12]
 8003844:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003848:	68a2      	ldr	r2, [r4, #8]
 800384a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800384e:	4a53      	ldr	r2, [pc, #332]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003850:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003854:	4a51      	ldr	r2, [pc, #324]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385e:	f7fe fd4b 	bl	80022f8 <HAL_GetTick>
 8003862:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003864:	4f4d      	ldr	r7, [pc, #308]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800386c:	d106      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x478>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800386e:	f7fe fd43 	bl	80022f8 <HAL_GetTick>
 8003872:	1b80      	subs	r0, r0, r6
 8003874:	2864      	cmp	r0, #100	; 0x64
 8003876:	d9f6      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800387c:	2d01      	cmp	r5, #1
 800387e:	d003      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x484>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
}
 8003882:	b003      	add	sp, #12
 8003884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003888:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003892:	f7fe fd31 	bl	80022f8 <HAL_GetTick>
 8003896:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003898:	4e40      	ldr	r6, [pc, #256]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800389a:	6833      	ldr	r3, [r6, #0]
 800389c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80038a0:	d006      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038a2:	f7fe fd29 	bl	80022f8 <HAL_GetTick>
 80038a6:	1b40      	subs	r0, r0, r5
 80038a8:	2864      	cmp	r0, #100	; 0x64
 80038aa:	d9f6      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 80038ac:	2003      	movs	r0, #3
 80038ae:	e7e8      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80038b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038ba:	b122      	cbz	r2, 80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80038bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80038c0:	d01d      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038c4:	b9db      	cbnz	r3, 80038fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038c6:	4a35      	ldr	r2, [pc, #212]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80038c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038cc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80038d8:	430b      	orrs	r3, r1
 80038da:	6961      	ldr	r1, [r4, #20]
 80038dc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80038e0:	69a1      	ldr	r1, [r4, #24]
 80038e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80038e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80038ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80038f0:	3901      	subs	r1, #1
 80038f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80038f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003906:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d031      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f013 0f08 	tst.w	r3, #8
 8003914:	d019      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x546>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003916:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003918:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800391c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003924:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003928:	430b      	orrs	r3, r1
 800392a:	6961      	ldr	r1, [r4, #20]
 800392c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003930:	69e1      	ldr	r1, [r4, #28]
 8003932:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003936:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800393a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800393e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003942:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003944:	430b      	orrs	r3, r1
 8003946:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003954:	f7fe fcd0 	bl	80022f8 <HAL_GetTick>
 8003958:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800395a:	4d10      	ldr	r5, [pc, #64]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003962:	d119      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x594>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003964:	f7fe fcc8 	bl	80022f8 <HAL_GetTick>
 8003968:	1b00      	subs	r0, r0, r4
 800396a:	2864      	cmp	r0, #100	; 0x64
 800396c:	d9f6      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x558>
        return HAL_TIMEOUT;
 800396e:	2003      	movs	r0, #3
 8003970:	e787      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003974:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003978:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800397c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003980:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003984:	430b      	orrs	r3, r1
 8003986:	6961      	ldr	r1, [r4, #20]
 8003988:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800398c:	6a21      	ldr	r1, [r4, #32]
 800398e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003996:	e7ba      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  return HAL_OK;
 8003998:	2000      	movs	r0, #0
 800399a:	e772      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800399c:	40023800 	.word	0x40023800
 80039a0:	0ffffcff 	.word	0x0ffffcff

080039a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	4681      	mov	r9, r0
 80039ac:	460f      	mov	r7, r1
 80039ae:	4616      	mov	r6, r2
 80039b0:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039b2:	f7fe fca1 	bl	80022f8 <HAL_GetTick>
 80039b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b8:	442b      	add	r3, r5
 80039ba:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80039be:	f7fe fc9b 	bl	80022f8 <HAL_GetTick>
 80039c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80039cc:	fb08 f303 	mul.w	r3, r8, r3
 80039d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	f8d9 3000 	ldr.w	r3, [r9]
 80039d6:	689c      	ldr	r4, [r3, #8]
 80039d8:	ea37 0204 	bics.w	r2, r7, r4
 80039dc:	bf0c      	ite	eq
 80039de:	f04f 0c01 	moveq.w	ip, #1
 80039e2:	f04f 0c00 	movne.w	ip, #0
 80039e6:	45b4      	cmp	ip, r6
 80039e8:	d044      	beq.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039ee:	d0f2      	beq.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f0:	f7fe fc82 	bl	80022f8 <HAL_GetTick>
 80039f4:	eba0 000a 	sub.w	r0, r0, sl
 80039f8:	4540      	cmp	r0, r8
 80039fa:	d207      	bcs.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039fc:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf08      	it	eq
 8003a02:	4698      	moveq	r8, r3
      }
      count--;
 8003a04:	9b01      	ldr	r3, [sp, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	e7e2      	b.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a10:	6853      	ldr	r3, [r2, #4]
 8003a12:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003a16:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a20:	d00c      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a22:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d016      	beq.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003a32:	2300      	movs	r3, #0
 8003a34:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003a38:	2003      	movs	r0, #3
 8003a3a:	e01c      	b.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a44:	d002      	beq.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0xa8>
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d1ea      	bne.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e7e3      	b.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8003a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	f8d9 2000 	ldr.w	r2, [r9]
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e7db      	b.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	b002      	add	sp, #8
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	20000008 	.word	0x20000008

08003a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	4681      	mov	r9, r0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	4615      	mov	r5, r2
 8003a8c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a94:	f7fe fc30 	bl	80022f8 <HAL_GetTick>
 8003a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a9a:	4433      	add	r3, r6
 8003a9c:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003aa0:	f7fe fc2a 	bl	80022f8 <HAL_GetTick>
 8003aa4:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003aa6:	f8d9 7000 	ldr.w	r7, [r9]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003aaa:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ab2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003ab6:	0d1b      	lsrs	r3, r3, #20
 8003ab8:	fb08 f303 	mul.w	r3, r8, r3
 8003abc:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003abe:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac2:	e008      	b.n	8003ad6 <SPI_WaitFifoStateUntilTimeout+0x56>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ac4:	7b3b      	ldrb	r3, [r7, #12]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003acc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ad0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003ad4:	d10a      	bne.n	8003aec <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003ad6:	6893      	ldr	r3, [r2, #8]
 8003ad8:	ea03 0c04 	and.w	ip, r3, r4
 8003adc:	45ac      	cmp	ip, r5
 8003ade:	d047      	beq.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ae0:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003ae4:	d1f4      	bne.n	8003ad0 <SPI_WaitFifoStateUntilTimeout+0x50>
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	d0ec      	beq.n	8003ac4 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003aea:	e7f1      	b.n	8003ad0 <SPI_WaitFifoStateUntilTimeout+0x50>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aec:	f7fe fc04 	bl	80022f8 <HAL_GetTick>
 8003af0:	eba0 000a 	sub.w	r0, r0, sl
 8003af4:	4540      	cmp	r0, r8
 8003af6:	d207      	bcs.n	8003b08 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf08      	it	eq
 8003afe:	4698      	moveq	r8, r3
      }
      count--;
 8003b00:	9b01      	ldr	r3, [sp, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	e7da      	b.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x3e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b08:	f8d9 2000 	ldr.w	r2, [r9]
 8003b0c:	6853      	ldr	r3, [r2, #4]
 8003b0e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003b12:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1c:	d00c      	beq.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b26:	d016      	beq.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003b34:	2003      	movs	r0, #3
 8003b36:	e01c      	b.n	8003b72 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b38:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	d002      	beq.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0xc8>
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d1ea      	bne.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8003b48:	f8d9 2000 	ldr.w	r2, [r9]
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e7e3      	b.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8003b56:	f8d9 2000 	ldr.w	r2, [r9]
 8003b5a:	6813      	ldr	r3, [r2, #0]
 8003b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	f8d9 2000 	ldr.w	r2, [r9]
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e7db      	b.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003b70:	2000      	movs	r0, #0
}
 8003b72:	b002      	add	sp, #8
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b78:	20000008 	.word	0x20000008

08003b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	4604      	mov	r4, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b86:	9200      	str	r2, [sp, #0]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b90:	f7ff ff76 	bl	8003a80 <SPI_WaitFifoStateUntilTimeout>
 8003b94:	bb18      	cbnz	r0, 8003bde <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <SPI_EndRxTxTransaction+0x98>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <SPI_EndRxTxTransaction+0x9c>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0d5b      	lsrs	r3, r3, #21
 8003ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d01a      	beq.n	8003bea <SPI_EndRxTxTransaction+0x6e>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	b13b      	cbz	r3, 8003bc8 <SPI_EndRxTxTransaction+0x4c>
      {
        break;
      }
      count--;
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bc6:	d1f5      	bne.n	8003bb4 <SPI_EndRxTxTransaction+0x38>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bc8:	9600      	str	r6, [sp, #0]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff ff54 	bl	8003a80 <SPI_WaitFifoStateUntilTimeout>
 8003bd8:	b9b0      	cbnz	r0, 8003c08 <SPI_EndRxTxTransaction+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003be0:	f043 0320 	orr.w	r3, r3, #32
 8003be4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be6:	2003      	movs	r0, #3
 8003be8:	e7f7      	b.n	8003bda <SPI_EndRxTxTransaction+0x5e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bea:	9600      	str	r6, [sp, #0]
 8003bec:	462b      	mov	r3, r5
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff fed6 	bl	80039a4 <SPI_WaitFlagStateUntilTimeout>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d0e5      	beq.n	8003bc8 <SPI_EndRxTxTransaction+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bfe:	f043 0320 	orr.w	r3, r3, #32
 8003c02:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c04:	2003      	movs	r0, #3
 8003c06:	e7e8      	b.n	8003bda <SPI_EndRxTxTransaction+0x5e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c0a:	f043 0320 	orr.w	r3, r3, #32
 8003c0e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c10:	2003      	movs	r0, #3
 8003c12:	e7e2      	b.n	8003bda <SPI_EndRxTxTransaction+0x5e>
 8003c14:	20000008 	.word	0x20000008
 8003c18:	165e9f81 	.word	0x165e9f81

08003c1c <HAL_SPI_Init>:
  if (hspi == NULL)
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	d06d      	beq.n	8003cfc <HAL_SPI_Init+0xe0>
{
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c26:	b933      	cbnz	r3, 8003c36 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c28:	6843      	ldr	r3, [r0, #4]
 8003c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2e:	d005      	beq.n	8003c3c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61c3      	str	r3, [r0, #28]
 8003c34:	e002      	b.n	8003c3c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c3a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c40:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d053      	beq.n	8003cf0 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003c4e:	6822      	ldr	r2, [r4, #0]
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c58:	68e3      	ldr	r3, [r4, #12]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c5e:	bf8c      	ite	hi
 8003c60:	2100      	movhi	r1, #0
 8003c62:	f44f 5180 	movls.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c6e:	d001      	beq.n	8003c74 <HAL_SPI_Init+0x58>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	6863      	ldr	r3, [r4, #4]
 8003c78:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003c7c:	68a0      	ldr	r0, [r4, #8]
 8003c7e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003c82:	4303      	orrs	r3, r0
 8003c84:	6920      	ldr	r0, [r4, #16]
 8003c86:	f000 0002 	and.w	r0, r0, #2
 8003c8a:	4303      	orrs	r3, r0
 8003c8c:	6960      	ldr	r0, [r4, #20]
 8003c8e:	f000 0001 	and.w	r0, r0, #1
 8003c92:	4303      	orrs	r3, r0
 8003c94:	69a0      	ldr	r0, [r4, #24]
 8003c96:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8003c9a:	4303      	orrs	r3, r0
 8003c9c:	69e0      	ldr	r0, [r4, #28]
 8003c9e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003ca2:	4303      	orrs	r3, r0
 8003ca4:	6a20      	ldr	r0, [r4, #32]
 8003ca6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003caa:	4303      	orrs	r3, r0
 8003cac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cae:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cc0:	f000 0008 	and.w	r0, r0, #8
 8003cc4:	4303      	orrs	r3, r0
 8003cc6:	68e0      	ldr	r0, [r4, #12]
 8003cc8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8003ccc:	4303      	orrs	r3, r0
 8003cce:	8b60      	ldrh	r0, [r4, #26]
 8003cd0:	f000 0004 	and.w	r0, r0, #4
 8003cd4:	4303      	orrs	r3, r0
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	69d3      	ldr	r3, [r2, #28]
 8003cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003cee:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003cf0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fe f8b7 	bl	8001e68 <HAL_SPI_MspInit>
 8003cfa:	e7a5      	b.n	8003c48 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003cfc:	2001      	movs	r0, #1
}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_SPI_Transmit>:
{
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003d08:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f000 80ee 	beq.w	8003eee <HAL_SPI_Transmit+0x1ee>
 8003d12:	4604      	mov	r4, r0
 8003d14:	4688      	mov	r8, r1
 8003d16:	4617      	mov	r7, r2
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003d1e:	f7fe faeb 	bl	80022f8 <HAL_GetTick>
 8003d22:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d24:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003d28:	b2c0      	uxtb	r0, r0
 8003d2a:	2801      	cmp	r0, #1
 8003d2c:	f040 80cd 	bne.w	8003eca <HAL_SPI_Transmit+0x1ca>
  if ((pData == NULL) || (Size == 0U))
 8003d30:	f1b8 0f00 	cmp.w	r8, #0
 8003d34:	f000 80ca 	beq.w	8003ecc <HAL_SPI_Transmit+0x1cc>
 8003d38:	2f00      	cmp	r7, #0
 8003d3a:	f000 80c7 	beq.w	8003ecc <HAL_SPI_Transmit+0x1cc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d48:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d4c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d4e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d50:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d52:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d56:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d5a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d5c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68a3      	ldr	r3, [r4, #8]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d035      	beq.n	8003dd2 <HAL_SPI_Transmit+0xd2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d6e:	d103      	bne.n	8003d78 <HAL_SPI_Transmit+0x78>
    __HAL_SPI_ENABLE(hspi);
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d76:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d7e:	d955      	bls.n	8003e2c <HAL_SPI_Transmit+0x12c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	b10b      	cbz	r3, 8003d88 <HAL_SPI_Transmit+0x88>
 8003d84:	2f01      	cmp	r7, #1
 8003d86:	d10a      	bne.n	8003d9e <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d92:	3302      	adds	r3, #2
 8003d94:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003d9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d12e      	bne.n	8003e04 <HAL_SPI_Transmit+0x104>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da6:	4632      	mov	r2, r6
 8003da8:	4629      	mov	r1, r5
 8003daa:	4620      	mov	r0, r4
 8003dac:	f7ff fee6 	bl	8003b7c <SPI_EndRxTxTransaction>
 8003db0:	b108      	cbz	r0, 8003db6 <HAL_SPI_Transmit+0xb6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db2:	2320      	movs	r3, #32
 8003db4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db6:	68a3      	ldr	r3, [r4, #8]
 8003db8:	b933      	cbnz	r3, 8003dc8 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	9201      	str	r2, [sp, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003dca:	3800      	subs	r0, #0
 8003dcc:	bf18      	it	ne
 8003dce:	2001      	movne	r0, #1
error:
 8003dd0:	e07c      	b.n	8003ecc <HAL_SPI_Transmit+0x1cc>
    __HAL_SPI_DISABLE(hspi);
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	6813      	ldr	r3, [r2, #0]
 8003dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dda:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e7be      	b.n	8003d66 <HAL_SPI_Transmit+0x66>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de8:	f7fe fa86 	bl	80022f8 <HAL_GetTick>
 8003dec:	1b80      	subs	r0, r0, r6
 8003dee:	42a8      	cmp	r0, r5
 8003df0:	d302      	bcc.n	8003df8 <HAL_SPI_Transmit+0xf8>
 8003df2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003df6:	d172      	bne.n	8003ede <HAL_SPI_Transmit+0x1de>
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	d072      	beq.n	8003ee2 <HAL_SPI_Transmit+0x1e2>
    while (hspi->TxXferCount > 0U)
 8003dfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0d0      	beq.n	8003da6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	f012 0f02 	tst.w	r2, #2
 8003e0c:	d0ec      	beq.n	8003de8 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e10:	8812      	ldrh	r2, [r2, #0]
 8003e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e16:	3302      	adds	r3, #2
 8003e18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e1a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e22:	fa1f fc8c 	uxth.w	ip, ip
 8003e26:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003e2a:	e7e7      	b.n	8003dfc <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	b10b      	cbz	r3, 8003e34 <HAL_SPI_Transmit+0x134>
 8003e30:	2f01      	cmp	r7, #1
 8003e32:	d10e      	bne.n	8003e52 <HAL_SPI_Transmit+0x152>
      if (hspi->TxXferCount > 1U)
 8003e34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d90e      	bls.n	8003e5a <HAL_SPI_Transmit+0x15a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e40:	8812      	ldrh	r2, [r2, #0]
 8003e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e46:	3302      	adds	r3, #2
 8003e48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003e52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	bb23      	cbnz	r3, 8003ea2 <HAL_SPI_Transmit+0x1a2>
 8003e58:	e7a5      	b.n	8003da6 <HAL_SPI_Transmit+0xa6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e64:	3301      	adds	r3, #1
 8003e66:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e70:	e7ef      	b.n	8003e52 <HAL_SPI_Transmit+0x152>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003e7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e86:	e008      	b.n	8003e9a <HAL_SPI_Transmit+0x19a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e88:	f7fe fa36 	bl	80022f8 <HAL_GetTick>
 8003e8c:	1b80      	subs	r0, r0, r6
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	d302      	bcc.n	8003e98 <HAL_SPI_Transmit+0x198>
 8003e92:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e96:	d126      	bne.n	8003ee6 <HAL_SPI_Transmit+0x1e6>
 8003e98:	b33d      	cbz	r5, 8003eea <HAL_SPI_Transmit+0x1ea>
    while (hspi->TxXferCount > 0U)
 8003e9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003e9c:	b289      	uxth	r1, r1
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d081      	beq.n	8003da6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	6893      	ldr	r3, [r2, #8]
 8003ea6:	f013 0f02 	tst.w	r3, #2
 8003eaa:	d0ed      	beq.n	8003e88 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 8003eac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d9de      	bls.n	8003e72 <HAL_SPI_Transmit+0x172>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ec0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ec2:	3b02      	subs	r3, #2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003ec8:	e7e7      	b.n	8003e9a <HAL_SPI_Transmit+0x19a>
    errorcode = HAL_BUSY;
 8003eca:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003ed8:	b002      	add	sp, #8
 8003eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8003ede:	2003      	movs	r0, #3
 8003ee0:	e7f4      	b.n	8003ecc <HAL_SPI_Transmit+0x1cc>
 8003ee2:	2003      	movs	r0, #3
 8003ee4:	e7f2      	b.n	8003ecc <HAL_SPI_Transmit+0x1cc>
          errorcode = HAL_TIMEOUT;
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	e7f0      	b.n	8003ecc <HAL_SPI_Transmit+0x1cc>
 8003eea:	2003      	movs	r0, #3
 8003eec:	e7ee      	b.n	8003ecc <HAL_SPI_Transmit+0x1cc>
  __HAL_LOCK(hspi);
 8003eee:	2002      	movs	r0, #2
 8003ef0:	e7f2      	b.n	8003ed8 <HAL_SPI_Transmit+0x1d8>
	...

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b410      	push	{r4}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	4a34      	ldr	r2, [pc, #208]	; (8003fcc <TIM_Base_SetConfig+0xd8>)
 8003efa:	4290      	cmp	r0, r2
 8003efc:	bf14      	ite	ne
 8003efe:	2200      	movne	r2, #0
 8003f00:	2201      	moveq	r2, #1
 8003f02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f06:	d044      	beq.n	8003f92 <TIM_Base_SetConfig+0x9e>
 8003f08:	2a00      	cmp	r2, #0
 8003f0a:	d142      	bne.n	8003f92 <TIM_Base_SetConfig+0x9e>
 8003f0c:	4c30      	ldr	r4, [pc, #192]	; (8003fd0 <TIM_Base_SetConfig+0xdc>)
 8003f0e:	42a0      	cmp	r0, r4
 8003f10:	d00b      	beq.n	8003f2a <TIM_Base_SetConfig+0x36>
 8003f12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f16:	42a0      	cmp	r0, r4
 8003f18:	d007      	beq.n	8003f2a <TIM_Base_SetConfig+0x36>
 8003f1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f1e:	42a0      	cmp	r0, r4
 8003f20:	d003      	beq.n	8003f2a <TIM_Base_SetConfig+0x36>
 8003f22:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003f26:	42a0      	cmp	r0, r4
 8003f28:	d10a      	bne.n	8003f40 <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f2e:	684c      	ldr	r4, [r1, #4]
 8003f30:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f32:	4c27      	ldr	r4, [pc, #156]	; (8003fd0 <TIM_Base_SetConfig+0xdc>)
 8003f34:	42a0      	cmp	r0, r4
 8003f36:	d030      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d02c      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f40:	4c24      	ldr	r4, [pc, #144]	; (8003fd4 <TIM_Base_SetConfig+0xe0>)
 8003f42:	42a0      	cmp	r0, r4
 8003f44:	d029      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f46:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003f4a:	42a0      	cmp	r0, r4
 8003f4c:	d025      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f4e:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003f52:	42a0      	cmp	r0, r4
 8003f54:	d021      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f5a:	42a0      	cmp	r0, r4
 8003f5c:	d01d      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f62:	42a0      	cmp	r0, r4
 8003f64:	d019      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f66:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8003f6a:	42a0      	cmp	r0, r4
 8003f6c:	d015      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f72:	42a0      	cmp	r0, r4
 8003f74:	d011      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
 8003f76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f7a:	42a0      	cmp	r0, r4
 8003f7c:	d00d      	beq.n	8003f9a <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f82:	694a      	ldr	r2, [r1, #20]
 8003f84:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003f86:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	688b      	ldr	r3, [r1, #8]
 8003f8a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	680b      	ldr	r3, [r1, #0]
 8003f8e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f90:	e016      	b.n	8003fc0 <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f96:	684c      	ldr	r4, [r1, #4]
 8003f98:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9e:	68cc      	ldr	r4, [r1, #12]
 8003fa0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa6:	694c      	ldr	r4, [r1, #20]
 8003fa8:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8003faa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	688b      	ldr	r3, [r1, #8]
 8003fae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	680b      	ldr	r3, [r1, #0]
 8003fb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003fb6:	4298      	cmp	r0, r3
 8003fb8:	d000      	beq.n	8003fbc <TIM_Base_SetConfig+0xc8>
 8003fba:	b10a      	cbz	r2, 8003fc0 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fbc:	690b      	ldr	r3, [r1, #16]
 8003fbe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6143      	str	r3, [r0, #20]
}
 8003fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003fdc:	b360      	cbz	r0, 8004038 <HAL_TIM_Base_Init+0x5c>
{
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fe6:	b313      	cbz	r3, 800402e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fee:	4621      	mov	r1, r4
 8003ff0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ff4:	f7ff ff7e 	bl	8003ef4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004002:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004006:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800400a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800400e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800401a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004022:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004026:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800402a:	2000      	movs	r0, #0
}
 800402c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800402e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004032:	f7fe f8db 	bl	80021ec <HAL_TIM_Base_MspInit>
 8004036:	e7d7      	b.n	8003fe8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004038:	2001      	movs	r0, #1
}
 800403a:	4770      	bx	lr

0800403c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800403c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004044:	430a      	orrs	r2, r1
 8004046:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800404a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	6082      	str	r2, [r0, #8]
}
 8004050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004058:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	f000 80ac 	beq.w	80041ba <HAL_TIM_ConfigClockSource+0x162>
{
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004066:	2301      	movs	r3, #1
 8004068:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004072:	6802      	ldr	r2, [r0, #0]
 8004074:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004076:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_TIM_ConfigClockSource+0x168>)
 8004078:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800407a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	2b60      	cmp	r3, #96	; 0x60
 8004080:	d060      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xec>
 8004082:	d83d      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0xa8>
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d079      	beq.n	800417c <HAL_TIM_ConfigClockSource+0x124>
 8004088:	d91c      	bls.n	80040c4 <HAL_TIM_ConfigClockSource+0x6c>
 800408a:	2b50      	cmp	r3, #80	; 0x50
 800408c:	d136      	bne.n	80040fc <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	6848      	ldr	r0, [r1, #4]
 8004092:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004094:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80040ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80040b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80040be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	e012      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d002      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x76>
 80040c8:	d90b      	bls.n	80040e2 <HAL_TIM_ConfigClockSource+0x8a>
 80040ca:	2b30      	cmp	r3, #48	; 0x30
 80040cc:	d114      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ce:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80040d0:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80040dc:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2000      	movs	r0, #0
}
 80040e0:	e003      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80040e2:	f033 0210 	bics.w	r2, r3, #16
 80040e6:	d0f2      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x76>
 80040e8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040f0:	2300      	movs	r3, #0
 80040f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7f6      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7f4      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004104:	d055      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15a>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d10c      	bne.n	8004126 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	68cb      	ldr	r3, [r1, #12]
 800410e:	684a      	ldr	r2, [r1, #4]
 8004110:	6889      	ldr	r1, [r1, #8]
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	f7ff ff92 	bl	800403c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	6893      	ldr	r3, [r2, #8]
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2000      	movs	r0, #0
      break;
 8004124:	e7e1      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004126:	2b70      	cmp	r3, #112	; 0x70
 8004128:	d145      	bne.n	80041b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	68cb      	ldr	r3, [r1, #12]
 800412c:	684a      	ldr	r2, [r1, #4]
 800412e:	6889      	ldr	r1, [r1, #8]
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	f7ff ff83 	bl	800403c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800413e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2000      	movs	r0, #0
      break;
 8004142:	e7d2      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	684d      	ldr	r5, [r1, #4]
 8004148:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414a:	6a18      	ldr	r0, [r3, #32]
 800414c:	f020 0010 	bic.w	r0, r0, #16
 8004150:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004154:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004156:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800415a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004162:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004166:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800416c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004172:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004176:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2000      	movs	r0, #0
}
 800417a:	e7b6      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	6848      	ldr	r0, [r1, #4]
 8004180:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004182:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004192:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800419a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800419c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80041a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80041ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2000      	movs	r0, #0
}
 80041b0:	e79b      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2000      	movs	r0, #0
 80041b4:	e799      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80041b6:	2001      	movs	r0, #1
 80041b8:	e797      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 80041ba:	2002      	movs	r0, #2
}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	fffe0088 	.word	0xfffe0088

080041c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d051      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80041cc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80041ce:	2301      	movs	r3, #1
 80041d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041da:	6802      	ldr	r2, [r0, #0]
 80041dc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041de:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041e0:	4d24      	ldr	r5, [pc, #144]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041e2:	42aa      	cmp	r2, r5
 80041e4:	d003      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80041e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041ea:	42aa      	cmp	r2, r5
 80041ec:	d103      	bne.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041f2:	684d      	ldr	r5, [r1, #4]
 80041f4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fa:	680d      	ldr	r5, [r1, #0]
 80041fc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004200:	6802      	ldr	r2, [r0, #0]
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004204:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004208:	bf18      	it	ne
 800420a:	429a      	cmpne	r2, r3
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	4d19      	ldr	r5, [pc, #100]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004214:	42aa      	cmp	r2, r5
 8004216:	bf08      	it	eq
 8004218:	f043 0301 	orreq.w	r3, r3, #1
 800421c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004220:	42aa      	cmp	r2, r5
 8004222:	bf08      	it	eq
 8004224:	f043 0301 	orreq.w	r3, r3, #1
 8004228:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800422c:	42aa      	cmp	r2, r5
 800422e:	bf08      	it	eq
 8004230:	f043 0301 	orreq.w	r3, r3, #1
 8004234:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8004238:	42aa      	cmp	r2, r5
 800423a:	bf08      	it	eq
 800423c:	f043 0301 	orreq.w	r3, r3, #1
 8004240:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8004244:	42aa      	cmp	r2, r5
 8004246:	bf08      	it	eq
 8004248:	f043 0301 	orreq.w	r3, r3, #1
 800424c:	b913      	cbnz	r3, 8004254 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004250:	429a      	cmp	r2, r3
 8004252:	d104      	bne.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004254:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004258:	688b      	ldr	r3, [r1, #8]
 800425a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800425e:	2301      	movs	r3, #1
 8004260:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004264:	2300      	movs	r3, #0
 8004266:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800426a:	4618      	mov	r0, r3
}
 800426c:	bc30      	pop	{r4, r5}
 800426e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004270:	2002      	movs	r0, #2
}
 8004272:	4770      	bx	lr
 8004274:	40010000 	.word	0x40010000
 8004278:	40000400 	.word	0x40000400
 800427c:	40001800 	.word	0x40001800

08004280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	6801      	ldr	r1, [r0, #0]
 8004286:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	6922      	ldr	r2, [r4, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	6962      	ldr	r2, [r4, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	69e2      	ldr	r2, [r4, #28]
 8004294:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004296:	4aa0      	ldr	r2, [pc, #640]	; (8004518 <UART_SetConfig+0x298>)
 8004298:	4002      	ands	r2, r0
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	6853      	ldr	r3, [r2, #4]
 80042a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042a6:	68e1      	ldr	r1, [r4, #12]
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ac:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80042b2:	6a20      	ldr	r0, [r4, #32]
 80042b4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042b6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	4a96      	ldr	r2, [pc, #600]	; (800451c <UART_SetConfig+0x29c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d019      	beq.n	80042fa <UART_SetConfig+0x7a>
 80042c6:	4a96      	ldr	r2, [pc, #600]	; (8004520 <UART_SetConfig+0x2a0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d024      	beq.n	8004316 <UART_SetConfig+0x96>
 80042cc:	4a95      	ldr	r2, [pc, #596]	; (8004524 <UART_SetConfig+0x2a4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d038      	beq.n	8004344 <UART_SetConfig+0xc4>
 80042d2:	4a95      	ldr	r2, [pc, #596]	; (8004528 <UART_SetConfig+0x2a8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d058      	beq.n	800438a <UART_SetConfig+0x10a>
 80042d8:	4a94      	ldr	r2, [pc, #592]	; (800452c <UART_SetConfig+0x2ac>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d069      	beq.n	80043b2 <UART_SetConfig+0x132>
 80042de:	4a94      	ldr	r2, [pc, #592]	; (8004530 <UART_SetConfig+0x2b0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	f000 808b 	beq.w	80043fc <UART_SetConfig+0x17c>
 80042e6:	4a93      	ldr	r2, [pc, #588]	; (8004534 <UART_SetConfig+0x2b4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	f000 809e 	beq.w	800442a <UART_SetConfig+0x1aa>
 80042ee:	4a92      	ldr	r2, [pc, #584]	; (8004538 <UART_SetConfig+0x2b8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f000 80b1 	beq.w	8004458 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
 80042f8:	e14e      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042fa:	4b90      	ldr	r3, [pc, #576]	; (800453c <UART_SetConfig+0x2bc>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b03      	cmp	r3, #3
 8004306:	f200 8138 	bhi.w	800457a <UART_SetConfig+0x2fa>
 800430a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800430e:	00bc      	.short	0x00bc
 8004310:	01490029 	.word	0x01490029
 8004314:	0034      	.short	0x0034
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <UART_SetConfig+0x2bc>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b0c      	cmp	r3, #12
 8004322:	f200 812c 	bhi.w	800457e <UART_SetConfig+0x2fe>
 8004326:	e8df f013 	tbh	[pc, r3, lsl #1]
 800432a:	00cb      	.short	0x00cb
 800432c:	012a012a 	.word	0x012a012a
 8004330:	001b012a 	.word	0x001b012a
 8004334:	012a012a 	.word	0x012a012a
 8004338:	013b012a 	.word	0x013b012a
 800433c:	012a012a 	.word	0x012a012a
 8004340:	0026012a 	.word	0x0026012a
 8004344:	4b7d      	ldr	r3, [pc, #500]	; (800453c <UART_SetConfig+0x2bc>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434e:	2b20      	cmp	r3, #32
 8004350:	f000 8126 	beq.w	80045a0 <UART_SetConfig+0x320>
 8004354:	d80d      	bhi.n	8004372 <UART_SetConfig+0xf2>
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 812e 	beq.w	80045b8 <UART_SetConfig+0x338>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d106      	bne.n	800436e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004360:	69e3      	ldr	r3, [r4, #28]
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004366:	d038      	beq.n	80043da <UART_SetConfig+0x15a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004368:	f7fe ff22 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
        break;
 800436c:	e0ec      	b.n	8004548 <UART_SetConfig+0x2c8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800436e:	2001      	movs	r0, #1
 8004370:	e112      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004372:	2b30      	cmp	r3, #48	; 0x30
 8004374:	d107      	bne.n	8004386 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	69e3      	ldr	r3, [r4, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	f000 80c8 	beq.w	8004510 <UART_SetConfig+0x290>
        pclk = (uint32_t) LSE_VALUE;
 8004380:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004384:	e0e1      	b.n	800454a <UART_SetConfig+0x2ca>
        ret = HAL_ERROR;
 8004386:	2001      	movs	r0, #1
 8004388:	e106      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438a:	4b6c      	ldr	r3, [pc, #432]	; (800453c <UART_SetConfig+0x2bc>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	f000 8103 	beq.w	80045a0 <UART_SetConfig+0x320>
 800439a:	d806      	bhi.n	80043aa <UART_SetConfig+0x12a>
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 810b 	beq.w	80045b8 <UART_SetConfig+0x338>
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d0dc      	beq.n	8004360 <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
 80043a8:	e0f6      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043aa:	2bc0      	cmp	r3, #192	; 0xc0
 80043ac:	d0e3      	beq.n	8004376 <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 80043ae:	2001      	movs	r0, #1
 80043b0:	e0f2      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <UART_SetConfig+0x2bc>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	f000 80f4 	beq.w	80045ac <UART_SetConfig+0x32c>
 80043c4:	d80e      	bhi.n	80043e4 <UART_SetConfig+0x164>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80f6 	beq.w	80045b8 <UART_SetConfig+0x338>
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d0:	d106      	bne.n	80043e0 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d2:	69e3      	ldr	r3, [r4, #28]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d8:	d1c6      	bne.n	8004368 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe fee9 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
        break;
 80043de:	e076      	b.n	80044ce <UART_SetConfig+0x24e>
        ret = HAL_ERROR;
 80043e0:	2001      	movs	r0, #1
 80043e2:	e0d9      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d106      	bne.n	80043f8 <UART_SetConfig+0x178>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ea:	69e0      	ldr	r0, [r4, #28]
 80043ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80043f0:	d06f      	beq.n	80044d2 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043f6:	e0a8      	b.n	800454a <UART_SetConfig+0x2ca>
        ret = HAL_ERROR;
 80043f8:	2001      	movs	r0, #1
 80043fa:	e0cd      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fc:	4b4f      	ldr	r3, [pc, #316]	; (800453c <UART_SetConfig+0x2bc>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440a:	f000 80cf 	beq.w	80045ac <UART_SetConfig+0x32c>
 800440e:	d807      	bhi.n	8004420 <UART_SetConfig+0x1a0>
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80ed 	beq.w	80045f0 <UART_SetConfig+0x370>
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d0da      	beq.n	80043d2 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800441c:	2001      	movs	r0, #1
 800441e:	e0bb      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004424:	d0e1      	beq.n	80043ea <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004426:	2001      	movs	r0, #1
 8004428:	e0b6      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442a:	4b44      	ldr	r3, [pc, #272]	; (800453c <UART_SetConfig+0x2bc>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004438:	f000 80b8 	beq.w	80045ac <UART_SetConfig+0x32c>
 800443c:	d807      	bhi.n	800444e <UART_SetConfig+0x1ce>
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80ba 	beq.w	80045b8 <UART_SetConfig+0x338>
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004448:	d0c3      	beq.n	80043d2 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800444a:	2001      	movs	r0, #1
 800444c:	e0a4      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004452:	d0ca      	beq.n	80043ea <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004454:	2001      	movs	r0, #1
 8004456:	e09f      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <UART_SetConfig+0x2bc>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004466:	f000 80a1 	beq.w	80045ac <UART_SetConfig+0x32c>
 800446a:	d807      	bhi.n	800447c <UART_SetConfig+0x1fc>
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a3 	beq.w	80045b8 <UART_SetConfig+0x338>
 8004472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004476:	d0ac      	beq.n	80043d2 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8004478:	2001      	movs	r0, #1
 800447a:	e08d      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800447c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004480:	d0b3      	beq.n	80043ea <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004482:	2001      	movs	r0, #1
 8004484:	e088      	b.n	8004598 <UART_SetConfig+0x318>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004486:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004488:	69e2      	ldr	r2, [r4, #28]
 800448a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800448e:	f040 8098 	bne.w	80045c2 <UART_SetConfig+0x342>
    switch (clocksource)
 8004492:	2b08      	cmp	r3, #8
 8004494:	d875      	bhi.n	8004582 <UART_SetConfig+0x302>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x21c>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044ff 	.word	0x080044ff
 80044a4:	08004505 	.word	0x08004505
 80044a8:	08004583 	.word	0x08004583
 80044ac:	080043db 	.word	0x080043db
 80044b0:	08004583 	.word	0x08004583
 80044b4:	08004583 	.word	0x08004583
 80044b8:	08004583 	.word	0x08004583
 80044bc:	080044c5 	.word	0x080044c5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c0:	2300      	movs	r3, #0
 80044c2:	e7e1      	b.n	8004488 <UART_SetConfig+0x208>
        pclk = (uint32_t) LSE_VALUE;
 80044c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044c8:	e003      	b.n	80044d2 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ca:	f7fe ff7b 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d059      	beq.n	8004586 <UART_SetConfig+0x306>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	6862      	ldr	r2, [r4, #4]
 80044d4:	0853      	lsrs	r3, r2, #1
 80044d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80044da:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	f1a3 0110 	sub.w	r1, r3, #16
 80044e2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80044e6:	4291      	cmp	r1, r2
 80044e8:	d84f      	bhi.n	800458a <UART_SetConfig+0x30a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	f023 020f 	bic.w	r2, r3, #15
 80044ee:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80044f0:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
 80044fa:	2000      	movs	r0, #0
 80044fc:	e04c      	b.n	8004598 <UART_SetConfig+0x318>
        pclk = HAL_RCC_GetPCLK2Freq();
 80044fe:	f7fe ff71 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004502:	e7e4      	b.n	80044ce <UART_SetConfig+0x24e>
    switch (clocksource)
 8004504:	480e      	ldr	r0, [pc, #56]	; (8004540 <UART_SetConfig+0x2c0>)
 8004506:	e7e4      	b.n	80044d2 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004508:	480d      	ldr	r0, [pc, #52]	; (8004540 <UART_SetConfig+0x2c0>)
 800450a:	e7e2      	b.n	80044d2 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 800450c:	480c      	ldr	r0, [pc, #48]	; (8004540 <UART_SetConfig+0x2c0>)
 800450e:	e7e0      	b.n	80044d2 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8004510:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004514:	e7dd      	b.n	80044d2 <UART_SetConfig+0x252>
 8004516:	bf00      	nop
 8004518:	efff69f3 	.word	0xefff69f3
 800451c:	40011000 	.word	0x40011000
 8004520:	40004400 	.word	0x40004400
 8004524:	40004800 	.word	0x40004800
 8004528:	40004c00 	.word	0x40004c00
 800452c:	40005000 	.word	0x40005000
 8004530:	40011400 	.word	0x40011400
 8004534:	40007800 	.word	0x40007800
 8004538:	40007c00 	.word	0x40007c00
 800453c:	40023800 	.word	0x40023800
 8004540:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe ff3e 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
        break;
    }

    if (pclk != 0U)
 8004548:	b318      	cbz	r0, 8004592 <UART_SetConfig+0x312>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004550:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004554:	f1a0 0210 	sub.w	r2, r0, #16
 8004558:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800455c:	429a      	cmp	r2, r3
 800455e:	d81a      	bhi.n	8004596 <UART_SetConfig+0x316>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	b280      	uxth	r0, r0
 8004564:	60d8      	str	r0, [r3, #12]
 8004566:	2000      	movs	r0, #0
 8004568:	e016      	b.n	8004598 <UART_SetConfig+0x318>
        pclk = HAL_RCC_GetPCLK2Freq();
 800456a:	f7fe ff3b 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
        break;
 800456e:	e7eb      	b.n	8004548 <UART_SetConfig+0x2c8>
        pclk = (uint32_t) LSE_VALUE;
 8004570:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004574:	e7e9      	b.n	800454a <UART_SetConfig+0x2ca>
    switch (clocksource)
 8004576:	4821      	ldr	r0, [pc, #132]	; (80045fc <UART_SetConfig+0x37c>)
 8004578:	e7e7      	b.n	800454a <UART_SetConfig+0x2ca>
        ret = HAL_ERROR;
 800457a:	2001      	movs	r0, #1
 800457c:	e00c      	b.n	8004598 <UART_SetConfig+0x318>
 800457e:	2001      	movs	r0, #1
 8004580:	e00a      	b.n	8004598 <UART_SetConfig+0x318>
    switch (clocksource)
 8004582:	2001      	movs	r0, #1
 8004584:	e008      	b.n	8004598 <UART_SetConfig+0x318>
 8004586:	2000      	movs	r0, #0
 8004588:	e006      	b.n	8004598 <UART_SetConfig+0x318>
        ret = HAL_ERROR;
 800458a:	2001      	movs	r0, #1
 800458c:	e004      	b.n	8004598 <UART_SetConfig+0x318>
    switch (clocksource)
 800458e:	2001      	movs	r0, #1
 8004590:	e002      	b.n	8004598 <UART_SetConfig+0x318>
 8004592:	2000      	movs	r0, #0
 8004594:	e000      	b.n	8004598 <UART_SetConfig+0x318>
      }
      else
      {
        ret = HAL_ERROR;
 8004596:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800459c:	66e3      	str	r3, [r4, #108]	; 0x6c

  return ret;
}
 800459e:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a0:	69e3      	ldr	r3, [r4, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d0af      	beq.n	8004508 <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 80045a8:	4814      	ldr	r0, [pc, #80]	; (80045fc <UART_SetConfig+0x37c>)
 80045aa:	e7ce      	b.n	800454a <UART_SetConfig+0x2ca>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ac:	69e3      	ldr	r3, [r4, #28]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b2:	d0ab      	beq.n	800450c <UART_SetConfig+0x28c>
 80045b4:	4811      	ldr	r0, [pc, #68]	; (80045fc <UART_SetConfig+0x37c>)
 80045b6:	e7c8      	b.n	800454a <UART_SetConfig+0x2ca>
 80045b8:	69e3      	ldr	r3, [r4, #28]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045be:	d084      	beq.n	80044ca <UART_SetConfig+0x24a>
 80045c0:	2300      	movs	r3, #0
    switch (clocksource)
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d8e3      	bhi.n	800458e <UART_SetConfig+0x30e>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x34c>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004545 	.word	0x08004545
 80045d0:	0800456b 	.word	0x0800456b
 80045d4:	08004577 	.word	0x08004577
 80045d8:	0800458f 	.word	0x0800458f
 80045dc:	08004369 	.word	0x08004369
 80045e0:	0800458f 	.word	0x0800458f
 80045e4:	0800458f 	.word	0x0800458f
 80045e8:	0800458f 	.word	0x0800458f
 80045ec:	08004571 	.word	0x08004571
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f0:	69e3      	ldr	r3, [r4, #28]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f6:	d082      	beq.n	80044fe <UART_SetConfig+0x27e>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e7e2      	b.n	80045c2 <UART_SetConfig+0x342>
 80045fc:	00f42400 	.word	0x00f42400

08004600 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004602:	f013 0f01 	tst.w	r3, #1
 8004606:	d006      	beq.n	8004616 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004608:	6802      	ldr	r2, [r0, #0]
 800460a:	6853      	ldr	r3, [r2, #4]
 800460c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004610:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004612:	430b      	orrs	r3, r1
 8004614:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004616:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004618:	f013 0f02 	tst.w	r3, #2
 800461c:	d006      	beq.n	800462c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461e:	6802      	ldr	r2, [r0, #0]
 8004620:	6853      	ldr	r3, [r2, #4]
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004628:	430b      	orrs	r3, r1
 800462a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800462e:	f013 0f04 	tst.w	r3, #4
 8004632:	d006      	beq.n	8004642 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004634:	6802      	ldr	r2, [r0, #0]
 8004636:	6853      	ldr	r3, [r2, #4]
 8004638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800463e:	430b      	orrs	r3, r1
 8004640:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004642:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004644:	f013 0f08 	tst.w	r3, #8
 8004648:	d006      	beq.n	8004658 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800464a:	6802      	ldr	r2, [r0, #0]
 800464c:	6853      	ldr	r3, [r2, #4]
 800464e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004652:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004654:	430b      	orrs	r3, r1
 8004656:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004658:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800465a:	f013 0f10 	tst.w	r3, #16
 800465e:	d006      	beq.n	800466e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004660:	6802      	ldr	r2, [r0, #0]
 8004662:	6893      	ldr	r3, [r2, #8]
 8004664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004668:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800466a:	430b      	orrs	r3, r1
 800466c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004670:	f013 0f20 	tst.w	r3, #32
 8004674:	d006      	beq.n	8004684 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	6802      	ldr	r2, [r0, #0]
 8004678:	6893      	ldr	r3, [r2, #8]
 800467a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004680:	430b      	orrs	r3, r1
 8004682:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004684:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004686:	f013 0f40 	tst.w	r3, #64	; 0x40
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800468c:	6802      	ldr	r2, [r0, #0]
 800468e:	6853      	ldr	r3, [r2, #4]
 8004690:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004694:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004696:	430b      	orrs	r3, r1
 8004698:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a0:	d00b      	beq.n	80046ba <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046a8:	d006      	beq.n	80046b8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046aa:	6802      	ldr	r2, [r0, #0]
 80046ac:	6853      	ldr	r3, [r2, #4]
 80046ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80046b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6053      	str	r3, [r2, #4]
  }
}
 80046b8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ba:	6802      	ldr	r2, [r0, #0]
 80046bc:	6853      	ldr	r3, [r2, #4]
 80046be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046c2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6053      	str	r3, [r2, #4]
 80046c8:	e7eb      	b.n	80046a2 <UART_AdvFeatureConfig+0xa2>

080046ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ce:	4680      	mov	r8, r0
 80046d0:	460e      	mov	r6, r1
 80046d2:	4615      	mov	r5, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	f8d8 2000 	ldr.w	r2, [r8]
 80046dc:	69d4      	ldr	r4, [r2, #28]
 80046de:	ea36 0304 	bics.w	r3, r6, r4
 80046e2:	bf0c      	ite	eq
 80046e4:	f04f 0c01 	moveq.w	ip, #1
 80046e8:	f04f 0c00 	movne.w	ip, #0
 80046ec:	45ac      	cmp	ip, r5
 80046ee:	d15a      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xdc>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80046f4:	d0f2      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd fdff 	bl	80022f8 <HAL_GetTick>
 80046fa:	eba0 0009 	sub.w	r0, r0, r9
 80046fe:	42b8      	cmp	r0, r7
 8004700:	d830      	bhi.n	8004764 <UART_WaitOnFlagUntilTimeout+0x9a>
 8004702:	b37f      	cbz	r7, 8004764 <UART_WaitOnFlagUntilTimeout+0x9a>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004704:	f8d8 3000 	ldr.w	r3, [r8]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f012 0f04 	tst.w	r2, #4
 800470e:	d0e3      	beq.n	80046d8 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004716:	d0df      	beq.n	80046d8 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800471c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800471e:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	e852 3f00 	ldrex	r3, [r2]
 8004726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	e842 3100 	strex	r1, r3, [r2]
 800472e:	2900      	cmp	r1, #0
 8004730:	d1f5      	bne.n	800471e <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	f102 0308 	add.w	r3, r2, #8
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	3208      	adds	r2, #8
 8004744:	e842 3100 	strex	r1, r3, [r2]
 8004748:	2900      	cmp	r1, #0
 800474a:	d1f2      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800474c:	2320      	movs	r3, #32
 800474e:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004752:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004756:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475a:	2300      	movs	r3, #0
 800475c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78

          return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
 8004762:	e021      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004764:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	e852 3f00 	ldrex	r3, [r2]
 800476c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	e842 3100 	strex	r1, r3, [r2]
 8004774:	2900      	cmp	r1, #0
 8004776:	d1f5      	bne.n	8004764 <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004778:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	f102 0308 	add.w	r3, r2, #8
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	3208      	adds	r2, #8
 800478a:	e842 3100 	strex	r1, r3, [r2]
 800478e:	2900      	cmp	r1, #0
 8004790:	d1f2      	bne.n	8004778 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8004792:	2320      	movs	r3, #32
 8004794:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004798:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
        __HAL_UNLOCK(huart);
 800479c:	2300      	movs	r3, #0
 800479e:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
        return HAL_TIMEOUT;
 80047a2:	2003      	movs	r0, #3
 80047a4:	e000      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xde>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2000      	movs	r0, #0
}
 80047a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080047ac <HAL_UART_Transmit>:
{
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80047b4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d153      	bne.n	8004862 <HAL_UART_Transmit+0xb6>
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1
 80047be:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80047c0:	2900      	cmp	r1, #0
 80047c2:	d052      	beq.n	800486a <HAL_UART_Transmit+0xbe>
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	d050      	beq.n	800486a <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	2321      	movs	r3, #33	; 0x21
 80047d0:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80047d2:	f7fd fd91 	bl	80022f8 <HAL_GetTick>
 80047d6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80047d8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80047dc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68a3      	ldr	r3, [r4, #8]
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d00a      	beq.n	80047fe <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80047e8:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80047ec:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	b35b      	cbz	r3, 800484c <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f4:	f04f 0900 	mov.w	r9, #0
 80047f8:	f04f 0880 	mov.w	r8, #128	; 0x80
 80047fc:	e017      	b.n	800482e <HAL_UART_Transmit+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	b913      	cbnz	r3, 8004808 <HAL_UART_Transmit+0x5c>
      pdata16bits = (const uint16_t *) pData;
 8004802:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004804:	2500      	movs	r5, #0
 8004806:	e7f1      	b.n	80047ec <HAL_UART_Transmit+0x40>
      pdata16bits = NULL;
 8004808:	f04f 0a00 	mov.w	sl, #0
 800480c:	e7ee      	b.n	80047ec <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800481a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800481e:	3a01      	subs	r2, #1
 8004820:	b292      	uxth	r2, r2
 8004822:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004826:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800482a:	b29b      	uxth	r3, r3
 800482c:	b173      	cbz	r3, 800484c <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	9600      	str	r6, [sp, #0]
 8004830:	463b      	mov	r3, r7
 8004832:	464a      	mov	r2, r9
 8004834:	4641      	mov	r1, r8
 8004836:	4620      	mov	r0, r4
 8004838:	f7ff ff47 	bl	80046ca <UART_WaitOnFlagUntilTimeout>
 800483c:	b9b8      	cbnz	r0, 800486e <HAL_UART_Transmit+0xc2>
      if (pdata8bits == NULL)
 800483e:	2d00      	cmp	r5, #0
 8004840:	d0e5      	beq.n	800480e <HAL_UART_Transmit+0x62>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800484a:	e7e6      	b.n	800481a <HAL_UART_Transmit+0x6e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484c:	9600      	str	r6, [sp, #0]
 800484e:	463b      	mov	r3, r7
 8004850:	2200      	movs	r2, #0
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff ff38 	bl	80046ca <UART_WaitOnFlagUntilTimeout>
 800485a:	b950      	cbnz	r0, 8004872 <HAL_UART_Transmit+0xc6>
    huart->gState = HAL_UART_STATE_READY;
 800485c:	2320      	movs	r3, #32
 800485e:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004860:	e000      	b.n	8004864 <HAL_UART_Transmit+0xb8>
    return HAL_BUSY;
 8004862:	2002      	movs	r0, #2
}
 8004864:	b002      	add	sp, #8
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	e7fa      	b.n	8004864 <HAL_UART_Transmit+0xb8>
        return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
 8004870:	e7f8      	b.n	8004864 <HAL_UART_Transmit+0xb8>
      return HAL_TIMEOUT;
 8004872:	2003      	movs	r0, #3
 8004874:	e7f6      	b.n	8004864 <HAL_UART_Transmit+0xb8>

08004876 <UART_CheckIdleState>:
{
 8004876:	b510      	push	{r4, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	2300      	movs	r3, #0
 800487e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004882:	f7fd fd39 	bl	80022f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f013 0f08 	tst.w	r3, #8
 800488e:	d10a      	bne.n	80048a6 <UART_CheckIdleState+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8004890:	2320      	movs	r3, #32
 8004892:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004898:	2000      	movs	r0, #0
 800489a:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489c:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800489e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 80048a2:	b002      	add	sp, #8
 80048a4:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4603      	mov	r3, r0
 80048ae:	2200      	movs	r2, #0
 80048b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff ff08 	bl	80046ca <UART_WaitOnFlagUntilTimeout>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0e8      	beq.n	8004890 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e7ef      	b.n	80048a2 <UART_CheckIdleState+0x2c>

080048c2 <HAL_UART_Init>:
  if (huart == NULL)
 80048c2:	b368      	cbz	r0, 8004920 <HAL_UART_Init+0x5e>
{
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80048c8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80048ca:	b303      	cbz	r3, 800490e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	2324      	movs	r3, #36	; 0x24
 80048ce:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80048d0:	6822      	ldr	r2, [r4, #0]
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff fcd0 	bl	8004280 <UART_SetConfig>
 80048e0:	2801      	cmp	r0, #1
 80048e2:	d013      	beq.n	800490c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e6:	b9bb      	cbnz	r3, 8004918 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	6853      	ldr	r3, [r2, #4]
 80048ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80048f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	6893      	ldr	r3, [r2, #8]
 80048f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80048fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff ffb5 	bl	8004876 <UART_CheckIdleState>
}
 800490c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800490e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004912:	f7fd fb7b 	bl	800200c <HAL_UART_MspInit>
 8004916:	e7d9      	b.n	80048cc <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff fe71 	bl	8004600 <UART_AdvFeatureConfig>
 800491e:	e7e3      	b.n	80048e8 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
}
 8004922:	4770      	bx	lr

08004924 <arm_rfft_fast_init_f32>:
 8004924:	084b      	lsrs	r3, r1, #1
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	b430      	push	{r4, r5}
 800492a:	8201      	strh	r1, [r0, #16]
 800492c:	8003      	strh	r3, [r0, #0]
 800492e:	d06f      	beq.n	8004a10 <arm_rfft_fast_init_f32+0xec>
 8004930:	d916      	bls.n	8004960 <arm_rfft_fast_init_f32+0x3c>
 8004932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004936:	d05e      	beq.n	80049f6 <arm_rfft_fast_init_f32+0xd2>
 8004938:	d935      	bls.n	80049a6 <arm_rfft_fast_init_f32+0x82>
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d025      	beq.n	800498c <arm_rfft_fast_init_f32+0x68>
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d112      	bne.n	800496c <arm_rfft_fast_init_f32+0x48>
 8004946:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800494a:	4c37      	ldr	r4, [pc, #220]	; (8004a28 <arm_rfft_fast_init_f32+0x104>)
 800494c:	4937      	ldr	r1, [pc, #220]	; (8004a2c <arm_rfft_fast_init_f32+0x108>)
 800494e:	2300      	movs	r3, #0
 8004950:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <arm_rfft_fast_init_f32+0x10c>)
 8004952:	8185      	strh	r5, [r0, #12]
 8004954:	6084      	str	r4, [r0, #8]
 8004956:	6041      	str	r1, [r0, #4]
 8004958:	6142      	str	r2, [r0, #20]
 800495a:	b258      	sxtb	r0, r3
 800495c:	bc30      	pop	{r4, r5}
 800495e:	4770      	bx	lr
 8004960:	2b20      	cmp	r3, #32
 8004962:	d030      	beq.n	80049c6 <arm_rfft_fast_init_f32+0xa2>
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d005      	beq.n	8004974 <arm_rfft_fast_init_f32+0x50>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d038      	beq.n	80049de <arm_rfft_fast_init_f32+0xba>
 800496c:	23ff      	movs	r3, #255	; 0xff
 800496e:	bc30      	pop	{r4, r5}
 8004970:	b258      	sxtb	r0, r3
 8004972:	4770      	bx	lr
 8004974:	2538      	movs	r5, #56	; 0x38
 8004976:	4c2f      	ldr	r4, [pc, #188]	; (8004a34 <arm_rfft_fast_init_f32+0x110>)
 8004978:	492f      	ldr	r1, [pc, #188]	; (8004a38 <arm_rfft_fast_init_f32+0x114>)
 800497a:	2300      	movs	r3, #0
 800497c:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <arm_rfft_fast_init_f32+0x118>)
 800497e:	8185      	strh	r5, [r0, #12]
 8004980:	6084      	str	r4, [r0, #8]
 8004982:	6041      	str	r1, [r0, #4]
 8004984:	6142      	str	r2, [r0, #20]
 8004986:	b258      	sxtb	r0, r3
 8004988:	bc30      	pop	{r4, r5}
 800498a:	4770      	bx	lr
 800498c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8004990:	4c2b      	ldr	r4, [pc, #172]	; (8004a40 <arm_rfft_fast_init_f32+0x11c>)
 8004992:	492c      	ldr	r1, [pc, #176]	; (8004a44 <arm_rfft_fast_init_f32+0x120>)
 8004994:	2300      	movs	r3, #0
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <arm_rfft_fast_init_f32+0x124>)
 8004998:	8185      	strh	r5, [r0, #12]
 800499a:	6084      	str	r4, [r0, #8]
 800499c:	6041      	str	r1, [r0, #4]
 800499e:	6142      	str	r2, [r0, #20]
 80049a0:	b258      	sxtb	r0, r3
 80049a2:	bc30      	pop	{r4, r5}
 80049a4:	4770      	bx	lr
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	d1df      	bne.n	800496c <arm_rfft_fast_init_f32+0x48>
 80049ac:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80049b0:	4c26      	ldr	r4, [pc, #152]	; (8004a4c <arm_rfft_fast_init_f32+0x128>)
 80049b2:	4927      	ldr	r1, [pc, #156]	; (8004a50 <arm_rfft_fast_init_f32+0x12c>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <arm_rfft_fast_init_f32+0x130>)
 80049b8:	8185      	strh	r5, [r0, #12]
 80049ba:	6084      	str	r4, [r0, #8]
 80049bc:	6041      	str	r1, [r0, #4]
 80049be:	6142      	str	r2, [r0, #20]
 80049c0:	b258      	sxtb	r0, r3
 80049c2:	bc30      	pop	{r4, r5}
 80049c4:	4770      	bx	lr
 80049c6:	2530      	movs	r5, #48	; 0x30
 80049c8:	4c23      	ldr	r4, [pc, #140]	; (8004a58 <arm_rfft_fast_init_f32+0x134>)
 80049ca:	4924      	ldr	r1, [pc, #144]	; (8004a5c <arm_rfft_fast_init_f32+0x138>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <arm_rfft_fast_init_f32+0x13c>)
 80049d0:	8185      	strh	r5, [r0, #12]
 80049d2:	6084      	str	r4, [r0, #8]
 80049d4:	6041      	str	r1, [r0, #4]
 80049d6:	6142      	str	r2, [r0, #20]
 80049d8:	b258      	sxtb	r0, r3
 80049da:	bc30      	pop	{r4, r5}
 80049dc:	4770      	bx	lr
 80049de:	2514      	movs	r5, #20
 80049e0:	4c20      	ldr	r4, [pc, #128]	; (8004a64 <arm_rfft_fast_init_f32+0x140>)
 80049e2:	4921      	ldr	r1, [pc, #132]	; (8004a68 <arm_rfft_fast_init_f32+0x144>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <arm_rfft_fast_init_f32+0x148>)
 80049e8:	8185      	strh	r5, [r0, #12]
 80049ea:	6084      	str	r4, [r0, #8]
 80049ec:	6041      	str	r1, [r0, #4]
 80049ee:	6142      	str	r2, [r0, #20]
 80049f0:	b258      	sxtb	r0, r3
 80049f2:	bc30      	pop	{r4, r5}
 80049f4:	4770      	bx	lr
 80049f6:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80049fa:	4c1d      	ldr	r4, [pc, #116]	; (8004a70 <arm_rfft_fast_init_f32+0x14c>)
 80049fc:	491d      	ldr	r1, [pc, #116]	; (8004a74 <arm_rfft_fast_init_f32+0x150>)
 80049fe:	2300      	movs	r3, #0
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <arm_rfft_fast_init_f32+0x154>)
 8004a02:	8185      	strh	r5, [r0, #12]
 8004a04:	6084      	str	r4, [r0, #8]
 8004a06:	6041      	str	r1, [r0, #4]
 8004a08:	6142      	str	r2, [r0, #20]
 8004a0a:	b258      	sxtb	r0, r3
 8004a0c:	bc30      	pop	{r4, r5}
 8004a0e:	4770      	bx	lr
 8004a10:	25d0      	movs	r5, #208	; 0xd0
 8004a12:	4c1a      	ldr	r4, [pc, #104]	; (8004a7c <arm_rfft_fast_init_f32+0x158>)
 8004a14:	491a      	ldr	r1, [pc, #104]	; (8004a80 <arm_rfft_fast_init_f32+0x15c>)
 8004a16:	2300      	movs	r3, #0
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <arm_rfft_fast_init_f32+0x160>)
 8004a1a:	8185      	strh	r5, [r0, #12]
 8004a1c:	6084      	str	r4, [r0, #8]
 8004a1e:	6041      	str	r1, [r0, #4]
 8004a20:	6142      	str	r2, [r0, #20]
 8004a22:	b258      	sxtb	r0, r3
 8004a24:	bc30      	pop	{r4, r5}
 8004a26:	4770      	bx	lr
 8004a28:	08017c5c 	.word	0x08017c5c
 8004a2c:	08008e54 	.word	0x08008e54
 8004a30:	0800efc4 	.word	0x0800efc4
 8004a34:	0800cf54 	.word	0x0800cf54
 8004a38:	08019a1c 	.word	0x08019a1c
 8004a3c:	0801bf0c 	.word	0x0801bf0c
 8004a40:	08015944 	.word	0x08015944
 8004a44:	08013844 	.word	0x08013844
 8004a48:	0800cfc4 	.word	0x0800cfc4
 8004a4c:	0801bb9c 	.word	0x0801bb9c
 8004a50:	08012fc4 	.word	0x08012fc4
 8004a54:	08019c1c 	.word	0x08019c1c
 8004a58:	080167fc 	.word	0x080167fc
 8004a5c:	08015844 	.word	0x08015844
 8004a60:	0800ce54 	.word	0x0800ce54
 8004a64:	08016754 	.word	0x08016754
 8004a68:	080137c4 	.word	0x080137c4
 8004a6c:	0801677c 	.word	0x0801677c
 8004a70:	0801a41c 	.word	0x0801a41c
 8004a74:	08016c5c 	.word	0x08016c5c
 8004a78:	0801a79c 	.word	0x0801a79c
 8004a7c:	0801c10c 	.word	0x0801c10c
 8004a80:	0801685c 	.word	0x0801685c
 8004a84:	0801b79c 	.word	0x0801b79c

08004a88 <arm_rfft_fast_f32>:
 8004a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8c:	8a05      	ldrh	r5, [r0, #16]
 8004a8e:	4606      	mov	r6, r0
 8004a90:	4690      	mov	r8, r2
 8004a92:	460c      	mov	r4, r1
 8004a94:	086d      	lsrs	r5, r5, #1
 8004a96:	8005      	strh	r5, [r0, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d15e      	bne.n	8004b5a <arm_rfft_fast_f32+0xd2>
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f000 fbe0 	bl	8005264 <arm_cfft_f32>
 8004aa4:	edd4 7a00 	vldr	s15, [r4]
 8004aa8:	ed94 7a01 	vldr	s14, [r4, #4]
 8004aac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004ab0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004ab4:	8837      	ldrh	r7, [r6, #0]
 8004ab6:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004aba:	6975      	ldr	r5, [r6, #20]
 8004abc:	3f01      	subs	r7, #1
 8004abe:	eef0 3a46 	vmov.f32	s7, s12
 8004ac2:	3510      	adds	r5, #16
 8004ac4:	f108 0610 	add.w	r6, r8, #16
 8004ac8:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004acc:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8004ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ad4:	f104 0310 	add.w	r3, r4, #16
 8004ad8:	3808      	subs	r0, #8
 8004ada:	ee26 7a86 	vmul.f32	s14, s13, s12
 8004ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ae2:	ed88 7a00 	vstr	s14, [r8]
 8004ae6:	edc8 7a01 	vstr	s15, [r8, #4]
 8004aea:	edd0 6a02 	vldr	s13, [r0, #8]
 8004aee:	3f01      	subs	r7, #1
 8004af0:	ed13 5a02 	vldr	s10, [r3, #-8]
 8004af4:	f1a0 0008 	sub.w	r0, r0, #8
 8004af8:	ed13 7a01 	vldr	s14, [r3, #-4]
 8004afc:	f105 0508 	add.w	r5, r5, #8
 8004b00:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8004b04:	ed15 6a04 	vldr	s12, [r5, #-16]
 8004b08:	edd0 5a05 	vldr	s11, [r0, #20]
 8004b0c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8004b10:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004b14:	f103 0308 	add.w	r3, r3, #8
 8004b18:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004b1c:	f106 0608 	add.w	r6, r6, #8
 8004b20:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004b24:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004b28:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004b2c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8004b30:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004b34:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004b38:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004b3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004b40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004b44:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004b48:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004b4c:	ed46 6a04 	vstr	s13, [r6, #-16]
 8004b50:	ed46 7a03 	vstr	s15, [r6, #-12]
 8004b54:	d1c9      	bne.n	8004aea <arm_rfft_fast_f32+0x62>
 8004b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5a:	edd1 7a00 	vldr	s15, [r1]
 8004b5e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004b62:	edd1 6a01 	vldr	s13, [r1, #4]
 8004b66:	1e68      	subs	r0, r5, #1
 8004b68:	6975      	ldr	r5, [r6, #20]
 8004b6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004b6e:	00c1      	lsls	r1, r0, #3
 8004b70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b74:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004b78:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004b7c:	ed82 7a00 	vstr	s14, [r2]
 8004b80:	edc2 7a01 	vstr	s15, [r2, #4]
 8004b84:	b3e0      	cbz	r0, 8004c00 <arm_rfft_fast_f32+0x178>
 8004b86:	3908      	subs	r1, #8
 8004b88:	f104 0210 	add.w	r2, r4, #16
 8004b8c:	3510      	adds	r5, #16
 8004b8e:	440c      	add	r4, r1
 8004b90:	f108 0110 	add.w	r1, r8, #16
 8004b94:	ed94 7a02 	vldr	s14, [r4, #8]
 8004b98:	3801      	subs	r0, #1
 8004b9a:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004b9e:	f1a4 0408 	sub.w	r4, r4, #8
 8004ba2:	ed15 6a02 	vldr	s12, [r5, #-8]
 8004ba6:	f102 0208 	add.w	r2, r2, #8
 8004baa:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004bae:	ed94 4a05 	vldr	s8, [r4, #20]
 8004bb2:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004bb6:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004bba:	ed55 5a01 	vldr	s11, [r5, #-4]
 8004bbe:	f101 0108 	add.w	r1, r1, #8
 8004bc2:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004bc6:	f105 0508 	add.w	r5, r5, #8
 8004bca:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004bce:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004bd2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004bd6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004bda:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004bde:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004be2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004be6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004bea:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004bee:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004bf2:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004bf6:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004bfa:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004bfe:	d1c9      	bne.n	8004b94 <arm_rfft_fast_f32+0x10c>
 8004c00:	4630      	mov	r0, r6
 8004c02:	4641      	mov	r1, r8
 8004c04:	461a      	mov	r2, r3
 8004c06:	2301      	movs	r3, #1
 8004c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0c:	f000 bb2a 	b.w	8005264 <arm_cfft_f32>

08004c10 <arm_cfft_radix8by2_f32>:
 8004c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c14:	ed2d 8b06 	vpush	{d8-d10}
 8004c18:	f8b0 e000 	ldrh.w	lr, [r0]
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	6842      	ldr	r2, [r0, #4]
 8004c20:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004c24:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004c28:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004c2c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004c30:	f000 80af 	beq.w	8004d92 <arm_cfft_radix8by2_f32+0x182>
 8004c34:	3310      	adds	r3, #16
 8004c36:	3210      	adds	r2, #16
 8004c38:	f101 0610 	add.w	r6, r1, #16
 8004c3c:	f108 0510 	add.w	r5, r8, #16
 8004c40:	18cc      	adds	r4, r1, r3
 8004c42:	4443      	add	r3, r8
 8004c44:	ed55 6a04 	vldr	s13, [r5, #-16]
 8004c48:	f1be 0e01 	subs.w	lr, lr, #1
 8004c4c:	ed56 4a04 	vldr	s9, [r6, #-16]
 8004c50:	f104 0410 	add.w	r4, r4, #16
 8004c54:	ed55 7a02 	vldr	s15, [r5, #-8]
 8004c58:	f106 0610 	add.w	r6, r6, #16
 8004c5c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8004c60:	ed53 0a04 	vldr	s1, [r3, #-16]
 8004c64:	ed13 5a03 	vldr	s10, [r3, #-12]
 8004c68:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004c6c:	ed13 3a02 	vldr	s6, [r3, #-8]
 8004c70:	f102 0210 	add.w	r2, r2, #16
 8004c74:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004c78:	f103 0310 	add.w	r3, r3, #16
 8004c7c:	ed55 2a01 	vldr	s5, [r5, #-4]
 8004c80:	f105 0510 	add.w	r5, r5, #16
 8004c84:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8004c88:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8004c8c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8004c90:	ee33 8a83 	vadd.f32	s16, s7, s6
 8004c94:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8004c98:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8004c9c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8004ca0:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8004ca4:	ee76 aa87 	vadd.f32	s21, s13, s14
 8004ca8:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8004cac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004cb0:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8004cb4:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8004cb8:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8004cbc:	ee71 8a05 	vadd.f32	s17, s2, s10
 8004cc0:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8004cc4:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8004cc8:	ee72 9a22 	vadd.f32	s19, s4, s5
 8004ccc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004cd0:	ee35 5a41 	vsub.f32	s10, s10, s2
 8004cd4:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8004cd8:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8004cdc:	ee36 6a44 	vsub.f32	s12, s12, s8
 8004ce0:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8004ce4:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8004ce8:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8004cec:	ee72 7a62 	vsub.f32	s15, s4, s5
 8004cf0:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8004cf4:	ee73 2a63 	vsub.f32	s5, s6, s7
 8004cf8:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8004cfc:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8004d00:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8004d04:	ee24 3a84 	vmul.f32	s6, s9, s8
 8004d08:	ee27 2a26 	vmul.f32	s4, s14, s13
 8004d0c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8004d10:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8004d14:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004d18:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004d1c:	ee65 6a26 	vmul.f32	s13, s10, s13
 8004d20:	ee25 5a04 	vmul.f32	s10, s10, s8
 8004d24:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004d28:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004d2c:	ee33 4a02 	vadd.f32	s8, s6, s4
 8004d30:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004d34:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8004d38:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8004d3c:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8004d40:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8004d44:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8004d48:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8004d4c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8004d50:	ee27 4a87 	vmul.f32	s8, s15, s14
 8004d54:	ee61 5a87 	vmul.f32	s11, s3, s14
 8004d58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d5c:	ee22 5a87 	vmul.f32	s10, s5, s14
 8004d60:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004d64:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004d68:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8004d6c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004d70:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004d74:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004d78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004d7c:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8004d80:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8004d84:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8004d88:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8004d8c:	f47f af5a 	bne.w	8004c44 <arm_cfft_radix8by2_f32+0x34>
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	fa1f f48c 	uxth.w	r4, ip
 8004d96:	4608      	mov	r0, r1
 8004d98:	2302      	movs	r3, #2
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	f000 fada 	bl	8005354 <arm_radix8_butterfly_f32>
 8004da0:	4640      	mov	r0, r8
 8004da2:	4621      	mov	r1, r4
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	2302      	movs	r3, #2
 8004da8:	ecbd 8b06 	vpop	{d8-d10}
 8004dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db0:	f000 bad0 	b.w	8005354 <arm_radix8_butterfly_f32>

08004db4 <arm_cfft_radix8by4_f32>:
 8004db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db8:	ed2d 8b06 	vpush	{d8-d10}
 8004dbc:	8804      	ldrh	r4, [r0, #0]
 8004dbe:	b08f      	sub	sp, #60	; 0x3c
 8004dc0:	ed91 6a00 	vldr	s12, [r1]
 8004dc4:	460a      	mov	r2, r1
 8004dc6:	0864      	lsrs	r4, r4, #1
 8004dc8:	ed91 7a01 	vldr	s14, [r1, #4]
 8004dcc:	9101      	str	r1, [sp, #4]
 8004dce:	00a3      	lsls	r3, r4, #2
 8004dd0:	9104      	str	r1, [sp, #16]
 8004dd2:	0864      	lsrs	r4, r4, #1
 8004dd4:	6841      	ldr	r1, [r0, #4]
 8004dd6:	900c      	str	r0, [sp, #48]	; 0x30
 8004dd8:	4625      	mov	r5, r4
 8004dda:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ddc:	f101 0408 	add.w	r4, r1, #8
 8004de0:	f101 0610 	add.w	r6, r1, #16
 8004de4:	9406      	str	r4, [sp, #24]
 8004de6:	18d4      	adds	r4, r2, r3
 8004de8:	1eaa      	subs	r2, r5, #2
 8004dea:	f101 0518 	add.w	r5, r1, #24
 8004dee:	18e0      	adds	r0, r4, r3
 8004df0:	ed94 4a00 	vldr	s8, [r4]
 8004df4:	edd4 3a01 	vldr	s7, [r4, #4]
 8004df8:	46a6      	mov	lr, r4
 8004dfa:	edd0 6a00 	vldr	s13, [r0]
 8004dfe:	18c7      	adds	r7, r0, r3
 8004e00:	edd0 7a01 	vldr	s15, [r0, #4]
 8004e04:	46a0      	mov	r8, r4
 8004e06:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004e0a:	edd7 4a00 	vldr	s9, [r7]
 8004e0e:	9402      	str	r4, [sp, #8]
 8004e10:	4604      	mov	r4, r0
 8004e12:	9507      	str	r5, [sp, #28]
 8004e14:	4605      	mov	r5, r0
 8004e16:	ee75 2a84 	vadd.f32	s5, s11, s8
 8004e1a:	900a      	str	r0, [sp, #40]	; 0x28
 8004e1c:	9801      	ldr	r0, [sp, #4]
 8004e1e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004e22:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004e26:	ed97 5a01 	vldr	s10, [r7, #4]
 8004e2a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004e2e:	46bc      	mov	ip, r7
 8004e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e34:	9605      	str	r6, [sp, #20]
 8004e36:	ee36 7a63 	vsub.f32	s14, s12, s7
 8004e3a:	9703      	str	r7, [sp, #12]
 8004e3c:	ee12 9a90 	vmov	r9, s5
 8004e40:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8004e44:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004e48:	1f3e      	subs	r6, r7, #4
 8004e4a:	f840 9b08 	str.w	r9, [r0], #8
 8004e4e:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8004e52:	edde 2a01 	vldr	s5, [lr, #4]
 8004e56:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8004e5a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004e5e:	ed9c 4a01 	vldr	s8, [ip, #4]
 8004e62:	ee36 6a22 	vadd.f32	s12, s12, s5
 8004e66:	9001      	str	r0, [sp, #4]
 8004e68:	ee37 7a45 	vsub.f32	s14, s14, s10
 8004e6c:	9804      	ldr	r0, [sp, #16]
 8004e6e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004e72:	f1ae 0704 	sub.w	r7, lr, #4
 8004e76:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004e7a:	ee33 4a45 	vsub.f32	s8, s6, s10
 8004e7e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004e82:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8004e86:	ed80 6a01 	vstr	s12, [r0, #4]
 8004e8a:	ee14 9a10 	vmov	r9, s8
 8004e8e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004e92:	f848 9b08 	str.w	r9, [r8], #8
 8004e96:	ed8e 5a01 	vstr	s10, [lr, #4]
 8004e9a:	ee15 ea90 	vmov	lr, s11
 8004e9e:	f844 eb08 	str.w	lr, [r4], #8
 8004ea2:	ee16 ea90 	vmov	lr, s13
 8004ea6:	9408      	str	r4, [sp, #32]
 8004ea8:	462c      	mov	r4, r5
 8004eaa:	ed85 7a01 	vstr	s14, [r5, #4]
 8004eae:	9d03      	ldr	r5, [sp, #12]
 8004eb0:	f84c eb08 	str.w	lr, [ip], #8
 8004eb4:	edc5 7a01 	vstr	s15, [r5, #4]
 8004eb8:	0855      	lsrs	r5, r2, #1
 8004eba:	9509      	str	r5, [sp, #36]	; 0x24
 8004ebc:	f000 8130 	beq.w	8005120 <arm_cfft_radix8by4_f32+0x36c>
 8004ec0:	9804      	ldr	r0, [sp, #16]
 8004ec2:	3b08      	subs	r3, #8
 8004ec4:	46ab      	mov	fp, r5
 8004ec6:	f1a4 020c 	sub.w	r2, r4, #12
 8004eca:	f100 0510 	add.w	r5, r0, #16
 8004ece:	f101 0920 	add.w	r9, r1, #32
 8004ed2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8004ed6:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004eda:	4433      	add	r3, r6
 8004edc:	3410      	adds	r4, #16
 8004ede:	4660      	mov	r0, ip
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8004ee6:	ed54 6a02 	vldr	s13, [r4, #-8]
 8004eea:	f1bb 0b01 	subs.w	fp, fp, #1
 8004eee:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004ef2:	f10a 0a08 	add.w	sl, sl, #8
 8004ef6:	edd1 7a00 	vldr	s15, [r1]
 8004efa:	f105 0508 	add.w	r5, r5, #8
 8004efe:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8004f02:	edd0 2a00 	vldr	s5, [r0]
 8004f06:	ed14 7a01 	vldr	s14, [r4, #-4]
 8004f0a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8004f0e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004f12:	f1a2 0208 	sub.w	r2, r2, #8
 8004f16:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8004f1a:	ed90 2a01 	vldr	s4, [r0, #4]
 8004f1e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004f22:	ed91 6a01 	vldr	s12, [r1, #4]
 8004f26:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004f2a:	f109 0910 	add.w	r9, r9, #16
 8004f2e:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8004f32:	f104 0408 	add.w	r4, r4, #8
 8004f36:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8004f3a:	f10e 0e18 	add.w	lr, lr, #24
 8004f3e:	ee37 3a67 	vsub.f32	s6, s14, s15
 8004f42:	f1a3 0308 	sub.w	r3, r3, #8
 8004f46:	ed45 6a04 	vstr	s13, [r5, #-16]
 8004f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4e:	edd1 6a01 	vldr	s13, [r1, #4]
 8004f52:	ee76 1a25 	vadd.f32	s3, s12, s11
 8004f56:	edd0 4a01 	vldr	s9, [r0, #4]
 8004f5a:	ee33 3a22 	vadd.f32	s6, s6, s5
 8004f5e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004f62:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004f66:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004f6a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004f6e:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8004f72:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004f76:	ed45 6a03 	vstr	s13, [r5, #-12]
 8004f7a:	ee32 2a06 	vadd.f32	s4, s4, s12
 8004f7e:	edd6 7a00 	vldr	s15, [r6]
 8004f82:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004f86:	ed97 1a00 	vldr	s2, [r7]
 8004f8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8004f8e:	ed92 8a04 	vldr	s16, [r2, #16]
 8004f92:	ee71 8a27 	vadd.f32	s17, s2, s15
 8004f96:	ed93 aa04 	vldr	s20, [r3, #16]
 8004f9a:	ed16 7a01 	vldr	s14, [r6, #-4]
 8004f9e:	ee71 7a67 	vsub.f32	s15, s2, s15
 8004fa2:	ed57 0a01 	vldr	s1, [r7, #-4]
 8004fa6:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8004faa:	ee38 6a88 	vadd.f32	s12, s17, s16
 8004fae:	edd3 9a03 	vldr	s19, [r3, #12]
 8004fb2:	ee30 0a87 	vadd.f32	s0, s1, s14
 8004fb6:	ed92 9a03 	vldr	s18, [r2, #12]
 8004fba:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8004fbe:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8004fc2:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8004fc6:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8004fca:	ee16 ca10 	vmov	ip, s12
 8004fce:	ee30 6a49 	vsub.f32	s12, s0, s18
 8004fd2:	ee71 4a07 	vadd.f32	s9, s2, s14
 8004fd6:	f847 c908 	str.w	ip, [r7], #-8
 8004fda:	ee34 4a29 	vadd.f32	s8, s8, s19
 8004fde:	edd2 8a03 	vldr	s17, [r2, #12]
 8004fe2:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8004fe6:	ed93 8a03 	vldr	s16, [r3, #12]
 8004fea:	ee71 0a47 	vsub.f32	s1, s2, s14
 8004fee:	ee30 0a28 	vadd.f32	s0, s0, s17
 8004ff2:	ee39 1a67 	vsub.f32	s2, s18, s15
 8004ff6:	ee36 6a69 	vsub.f32	s12, s12, s19
 8004ffa:	ee30 0a08 	vadd.f32	s0, s0, s16
 8004ffe:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005002:	ed87 0a01 	vstr	s0, [r7, #4]
 8005006:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800500a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800500e:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005012:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005016:	ee64 7a26 	vmul.f32	s15, s8, s13
 800501a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800501e:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005022:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005026:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800502a:	ee24 0a80 	vmul.f32	s0, s9, s0
 800502e:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005032:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005036:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800503a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800503e:	ee17 ca10 	vmov	ip, s14
 8005042:	f841 cb08 	str.w	ip, [r1], #8
 8005046:	ed01 3a01 	vstr	s6, [r1, #-4]
 800504a:	ed82 0a04 	vstr	s0, [r2, #16]
 800504e:	edc2 6a03 	vstr	s13, [r2, #12]
 8005052:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8005056:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800505a:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800505e:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005062:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005066:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800506a:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800506e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005072:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005076:	ee66 6a26 	vmul.f32	s13, s12, s13
 800507a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800507e:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005082:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005086:	ee35 5a63 	vsub.f32	s10, s10, s7
 800508a:	ee17 ca90 	vmov	ip, s15
 800508e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005092:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005096:	f846 c908 	str.w	ip, [r6], #-8
 800509a:	edc6 6a01 	vstr	s13, [r6, #4]
 800509e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 80050a2:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 80050a6:	ee62 5a27 	vmul.f32	s11, s4, s15
 80050aa:	ee22 6a87 	vmul.f32	s12, s5, s14
 80050ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 80050b2:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80050b6:	ee61 6a07 	vmul.f32	s13, s2, s14
 80050ba:	ee20 7a87 	vmul.f32	s14, s1, s14
 80050be:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80050c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80050c6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80050ca:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80050ce:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80050d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d6:	ee16 ca10 	vmov	ip, s12
 80050da:	f840 cb08 	str.w	ip, [r0], #8
 80050de:	ed40 2a01 	vstr	s5, [r0, #-4]
 80050e2:	edc3 0a04 	vstr	s1, [r3, #16]
 80050e6:	edc3 7a03 	vstr	s15, [r3, #12]
 80050ea:	f47f aefc 	bne.w	8004ee6 <arm_cfft_radix8by4_f32+0x132>
 80050ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f0:	9805      	ldr	r0, [sp, #20]
 80050f2:	00cb      	lsls	r3, r1, #3
 80050f4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80050f8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80050fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005100:	4498      	add	r8, r3
 8005102:	449c      	add	ip, r3
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	9901      	ldr	r1, [sp, #4]
 8005108:	4419      	add	r1, r3
 800510a:	9101      	str	r1, [sp, #4]
 800510c:	9906      	ldr	r1, [sp, #24]
 800510e:	4419      	add	r1, r3
 8005110:	9106      	str	r1, [sp, #24]
 8005112:	9908      	ldr	r1, [sp, #32]
 8005114:	4419      	add	r1, r3
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800511c:	9108      	str	r1, [sp, #32]
 800511e:	9307      	str	r3, [sp, #28]
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	2304      	movs	r3, #4
 8005124:	9e08      	ldr	r6, [sp, #32]
 8005126:	edd2 6a00 	vldr	s13, [r2]
 800512a:	ed96 4a00 	vldr	s8, [r6]
 800512e:	edd8 7a00 	vldr	s15, [r8]
 8005132:	ee36 6a84 	vadd.f32	s12, s13, s8
 8005136:	eddc 2a00 	vldr	s5, [ip]
 800513a:	ed96 7a01 	vldr	s14, [r6, #4]
 800513e:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8005142:	edd2 6a01 	vldr	s13, [r2, #4]
 8005146:	ee76 4a27 	vadd.f32	s9, s12, s15
 800514a:	ed98 2a01 	vldr	s4, [r8, #4]
 800514e:	ee76 5a87 	vadd.f32	s11, s13, s14
 8005152:	ed9c 5a01 	vldr	s10, [ip, #4]
 8005156:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800515a:	9d05      	ldr	r5, [sp, #20]
 800515c:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005160:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005164:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005168:	9804      	ldr	r0, [sp, #16]
 800516a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800516e:	4621      	mov	r1, r4
 8005170:	edc2 6a00 	vstr	s13, [r2]
 8005174:	ee76 6a67 	vsub.f32	s13, s12, s15
 8005178:	ed98 3a01 	vldr	s6, [r8, #4]
 800517c:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8005180:	eddc 1a01 	vldr	s3, [ip, #4]
 8005184:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8005188:	ee35 3a83 	vadd.f32	s6, s11, s6
 800518c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005190:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005194:	ee73 5a21 	vadd.f32	s11, s6, s3
 8005198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800519c:	ee36 6a45 	vsub.f32	s12, s12, s10
 80051a0:	edc2 5a01 	vstr	s11, [r2, #4]
 80051a4:	ee35 5a04 	vadd.f32	s10, s10, s8
 80051a8:	9a06      	ldr	r2, [sp, #24]
 80051aa:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80051ae:	edd2 7a00 	vldr	s15, [r2]
 80051b2:	edd2 5a01 	vldr	s11, [r2, #4]
 80051b6:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80051ba:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80051be:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80051c2:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80051c6:	ee77 7a62 	vsub.f32	s15, s14, s5
 80051ca:	ee74 5a25 	vadd.f32	s11, s8, s11
 80051ce:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80051d2:	edc8 5a00 	vstr	s11, [r8]
 80051d6:	edc8 4a01 	vstr	s9, [r8, #4]
 80051da:	edd5 4a01 	vldr	s9, [r5, #4]
 80051de:	ed95 7a00 	vldr	s14, [r5]
 80051e2:	9d07      	ldr	r5, [sp, #28]
 80051e4:	ee66 5a87 	vmul.f32	s11, s13, s14
 80051e8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80051ec:	ee26 7a07 	vmul.f32	s14, s12, s14
 80051f0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80051f4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80051f8:	ee35 6a86 	vadd.f32	s12, s11, s12
 80051fc:	edc6 6a01 	vstr	s13, [r6, #4]
 8005200:	ed86 6a00 	vstr	s12, [r6]
 8005204:	ed95 6a01 	vldr	s12, [r5, #4]
 8005208:	ed95 7a00 	vldr	s14, [r5]
 800520c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800520e:	ee65 6a07 	vmul.f32	s13, s10, s14
 8005212:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005216:	ee25 5a06 	vmul.f32	s10, s10, s12
 800521a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800521e:	ee37 5a45 	vsub.f32	s10, s14, s10
 8005222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005226:	ed8c 5a01 	vstr	s10, [ip, #4]
 800522a:	edcc 7a00 	vstr	s15, [ip]
 800522e:	6872      	ldr	r2, [r6, #4]
 8005230:	f000 f890 	bl	8005354 <arm_radix8_butterfly_f32>
 8005234:	9802      	ldr	r0, [sp, #8]
 8005236:	4621      	mov	r1, r4
 8005238:	6872      	ldr	r2, [r6, #4]
 800523a:	2304      	movs	r3, #4
 800523c:	f000 f88a 	bl	8005354 <arm_radix8_butterfly_f32>
 8005240:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005242:	4621      	mov	r1, r4
 8005244:	6872      	ldr	r2, [r6, #4]
 8005246:	2304      	movs	r3, #4
 8005248:	f000 f884 	bl	8005354 <arm_radix8_butterfly_f32>
 800524c:	9803      	ldr	r0, [sp, #12]
 800524e:	4621      	mov	r1, r4
 8005250:	6872      	ldr	r2, [r6, #4]
 8005252:	2304      	movs	r3, #4
 8005254:	b00f      	add	sp, #60	; 0x3c
 8005256:	ecbd 8b06 	vpop	{d8-d10}
 800525a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525e:	f000 b879 	b.w	8005354 <arm_radix8_butterfly_f32>
 8005262:	bf00      	nop

08005264 <arm_cfft_f32>:
 8005264:	2a01      	cmp	r2, #1
 8005266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	4606      	mov	r6, r0
 800526c:	4617      	mov	r7, r2
 800526e:	460c      	mov	r4, r1
 8005270:	4698      	mov	r8, r3
 8005272:	8805      	ldrh	r5, [r0, #0]
 8005274:	d053      	beq.n	800531e <arm_cfft_f32+0xba>
 8005276:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800527a:	d04b      	beq.n	8005314 <arm_cfft_f32+0xb0>
 800527c:	d916      	bls.n	80052ac <arm_cfft_f32+0x48>
 800527e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005282:	d01a      	beq.n	80052ba <arm_cfft_f32+0x56>
 8005284:	d95a      	bls.n	800533c <arm_cfft_f32+0xd8>
 8005286:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800528a:	d043      	beq.n	8005314 <arm_cfft_f32+0xb0>
 800528c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005290:	d105      	bne.n	800529e <arm_cfft_f32+0x3a>
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	6872      	ldr	r2, [r6, #4]
 8005298:	2301      	movs	r3, #1
 800529a:	f000 f85b 	bl	8005354 <arm_radix8_butterfly_f32>
 800529e:	f1b8 0f00 	cmp.w	r8, #0
 80052a2:	d111      	bne.n	80052c8 <arm_cfft_f32+0x64>
 80052a4:	2f01      	cmp	r7, #1
 80052a6:	d016      	beq.n	80052d6 <arm_cfft_f32+0x72>
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	2d20      	cmp	r5, #32
 80052ae:	d031      	beq.n	8005314 <arm_cfft_f32+0xb0>
 80052b0:	d948      	bls.n	8005344 <arm_cfft_f32+0xe0>
 80052b2:	2d40      	cmp	r5, #64	; 0x40
 80052b4:	d0ed      	beq.n	8005292 <arm_cfft_f32+0x2e>
 80052b6:	2d80      	cmp	r5, #128	; 0x80
 80052b8:	d1f1      	bne.n	800529e <arm_cfft_f32+0x3a>
 80052ba:	4630      	mov	r0, r6
 80052bc:	4621      	mov	r1, r4
 80052be:	f7ff fca7 	bl	8004c10 <arm_cfft_radix8by2_f32>
 80052c2:	f1b8 0f00 	cmp.w	r8, #0
 80052c6:	d0ed      	beq.n	80052a4 <arm_cfft_f32+0x40>
 80052c8:	4620      	mov	r0, r4
 80052ca:	89b1      	ldrh	r1, [r6, #12]
 80052cc:	68b2      	ldr	r2, [r6, #8]
 80052ce:	f7fa ff9f 	bl	8000210 <arm_bitreversal_32>
 80052d2:	2f01      	cmp	r7, #1
 80052d4:	d1e8      	bne.n	80052a8 <arm_cfft_f32+0x44>
 80052d6:	ee07 5a90 	vmov	s15, r5
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80052e2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	d0de      	beq.n	80052a8 <arm_cfft_f32+0x44>
 80052ea:	f104 0108 	add.w	r1, r4, #8
 80052ee:	2300      	movs	r3, #0
 80052f0:	ed11 7a02 	vldr	s14, [r1, #-8]
 80052f4:	3301      	adds	r3, #1
 80052f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80052fa:	3108      	adds	r1, #8
 80052fc:	429d      	cmp	r5, r3
 80052fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005302:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005306:	ed01 7a04 	vstr	s14, [r1, #-16]
 800530a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800530e:	d1ef      	bne.n	80052f0 <arm_cfft_f32+0x8c>
 8005310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005314:	4630      	mov	r0, r6
 8005316:	4621      	mov	r1, r4
 8005318:	f7ff fd4c 	bl	8004db4 <arm_cfft_radix8by4_f32>
 800531c:	e7bf      	b.n	800529e <arm_cfft_f32+0x3a>
 800531e:	b1a5      	cbz	r5, 800534a <arm_cfft_f32+0xe6>
 8005320:	f101 030c 	add.w	r3, r1, #12
 8005324:	2200      	movs	r2, #0
 8005326:	ed53 7a02 	vldr	s15, [r3, #-8]
 800532a:	3201      	adds	r2, #1
 800532c:	3308      	adds	r3, #8
 800532e:	eef1 7a67 	vneg.f32	s15, s15
 8005332:	4295      	cmp	r5, r2
 8005334:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005338:	d1f5      	bne.n	8005326 <arm_cfft_f32+0xc2>
 800533a:	e79c      	b.n	8005276 <arm_cfft_f32+0x12>
 800533c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005340:	d0a7      	beq.n	8005292 <arm_cfft_f32+0x2e>
 8005342:	e7ac      	b.n	800529e <arm_cfft_f32+0x3a>
 8005344:	2d10      	cmp	r5, #16
 8005346:	d0b8      	beq.n	80052ba <arm_cfft_f32+0x56>
 8005348:	e7a9      	b.n	800529e <arm_cfft_f32+0x3a>
 800534a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800534e:	d896      	bhi.n	800527e <arm_cfft_f32+0x1a>
 8005350:	e7ac      	b.n	80052ac <arm_cfft_f32+0x48>
 8005352:	bf00      	nop

08005354 <arm_radix8_butterfly_f32>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	469e      	mov	lr, r3
 800535a:	1d03      	adds	r3, r0, #4
 800535c:	4683      	mov	fp, r0
 800535e:	468a      	mov	sl, r1
 8005360:	4688      	mov	r8, r1
 8005362:	469c      	mov	ip, r3
 8005364:	ed2d 8b10 	vpush	{d8-d15}
 8005368:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 800567c <arm_radix8_butterfly_f32+0x328>
 800536c:	b09f      	sub	sp, #124	; 0x7c
 800536e:	921c      	str	r2, [sp, #112]	; 0x70
 8005370:	931d      	str	r3, [sp, #116]	; 0x74
 8005372:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8005376:	f04f 0900 	mov.w	r9, #0
 800537a:	461a      	mov	r2, r3
 800537c:	930e      	str	r3, [sp, #56]	; 0x38
 800537e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005382:	0051      	lsls	r1, r2, #1
 8005384:	4608      	mov	r0, r1
 8005386:	9103      	str	r1, [sp, #12]
 8005388:	00d1      	lsls	r1, r2, #3
 800538a:	1885      	adds	r5, r0, r2
 800538c:	0110      	lsls	r0, r2, #4
 800538e:	eb0b 0601 	add.w	r6, fp, r1
 8005392:	9101      	str	r1, [sp, #4]
 8005394:	18ac      	adds	r4, r5, r2
 8005396:	9002      	str	r0, [sp, #8]
 8005398:	1877      	adds	r7, r6, r1
 800539a:	4611      	mov	r1, r2
 800539c:	4422      	add	r2, r4
 800539e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80053a2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80053a6:	1850      	adds	r0, r2, r1
 80053a8:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80053ac:	4401      	add	r1, r0
 80053ae:	3204      	adds	r2, #4
 80053b0:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80053b4:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80053b8:	3104      	adds	r1, #4
 80053ba:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80053be:	44c1      	add	r9, r8
 80053c0:	edd4 6a00 	vldr	s13, [r4]
 80053c4:	ed97 6a00 	vldr	s12, [r7]
 80053c8:	45ca      	cmp	sl, r9
 80053ca:	edd0 7a00 	vldr	s15, [r0]
 80053ce:	ee37 5a66 	vsub.f32	s10, s14, s13
 80053d2:	edd6 5a00 	vldr	s11, [r6]
 80053d6:	ee37 2a26 	vadd.f32	s4, s14, s13
 80053da:	ee76 2a67 	vsub.f32	s5, s12, s15
 80053de:	edd5 6a00 	vldr	s13, [r5]
 80053e2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80053e6:	ee76 4a27 	vadd.f32	s9, s12, s15
 80053ea:	ed11 6a01 	vldr	s12, [r1, #-4]
 80053ee:	ee75 1a87 	vadd.f32	s3, s11, s14
 80053f2:	ee36 4a86 	vadd.f32	s8, s13, s12
 80053f6:	ee72 7a24 	vadd.f32	s15, s4, s9
 80053fa:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80053fe:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8005402:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005406:	ee32 2a64 	vsub.f32	s4, s4, s9
 800540a:	ee77 6a65 	vsub.f32	s13, s14, s11
 800540e:	ee77 4a86 	vadd.f32	s9, s15, s12
 8005412:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005416:	ee37 7a25 	vadd.f32	s14, s14, s11
 800541a:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800541e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8005422:	edc4 7a00 	vstr	s15, [r4]
 8005426:	ee66 6a89 	vmul.f32	s13, s13, s18
 800542a:	edd6 5a01 	vldr	s11, [r6, #4]
 800542e:	ee27 6a09 	vmul.f32	s12, s14, s18
 8005432:	edd5 3a01 	vldr	s7, [r5, #4]
 8005436:	ed92 4a00 	vldr	s8, [r2]
 800543a:	ee35 1a26 	vadd.f32	s2, s10, s13
 800543e:	edd1 4a00 	vldr	s9, [r1]
 8005442:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005446:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800544a:	ed94 0a01 	vldr	s0, [r4, #4]
 800544e:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8005452:	ed9c 7a00 	vldr	s14, [ip]
 8005456:	edd0 0a01 	vldr	s1, [r0, #4]
 800545a:	ee35 4a84 	vadd.f32	s8, s11, s8
 800545e:	ed97 5a01 	vldr	s10, [r7, #4]
 8005462:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8005466:	ee73 5a27 	vadd.f32	s11, s6, s15
 800546a:	ee77 3a00 	vadd.f32	s7, s14, s0
 800546e:	ee33 3a67 	vsub.f32	s6, s6, s15
 8005472:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005476:	ee35 0a20 	vadd.f32	s0, s10, s1
 800547a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800547e:	ee35 5a60 	vsub.f32	s10, s10, s1
 8005482:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005486:	ee74 0a24 	vadd.f32	s1, s8, s9
 800548a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800548e:	ee74 4a64 	vsub.f32	s9, s8, s9
 8005492:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8005496:	ee75 3a25 	vadd.f32	s7, s10, s11
 800549a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800549e:	ee37 5a27 	vadd.f32	s10, s14, s15
 80054a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a6:	ee32 7a86 	vadd.f32	s14, s5, s12
 80054aa:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80054ae:	ee73 2a20 	vadd.f32	s5, s6, s1
 80054b2:	ee33 3a60 	vsub.f32	s6, s6, s1
 80054b6:	ee72 0a24 	vadd.f32	s1, s4, s9
 80054ba:	edcc 2a00 	vstr	s5, [ip]
 80054be:	ee72 4a64 	vsub.f32	s9, s4, s9
 80054c2:	ed84 3a01 	vstr	s6, [r4, #4]
 80054c6:	ee74 2a61 	vsub.f32	s5, s8, s3
 80054ca:	ee31 3a23 	vadd.f32	s6, s2, s7
 80054ce:	edc7 0a00 	vstr	s1, [r7]
 80054d2:	ee31 1a63 	vsub.f32	s2, s2, s7
 80054d6:	edc0 4a00 	vstr	s9, [r0]
 80054da:	ee76 3aa5 	vadd.f32	s7, s13, s11
 80054de:	edc7 2a01 	vstr	s5, [r7, #4]
 80054e2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80054e6:	441c      	add	r4, r3
 80054e8:	ee75 5a47 	vsub.f32	s11, s10, s14
 80054ec:	449c      	add	ip, r3
 80054ee:	ee35 5a07 	vadd.f32	s10, s10, s14
 80054f2:	441f      	add	r7, r3
 80054f4:	ee37 7ac6 	vsub.f32	s14, s15, s12
 80054f8:	ee34 4a21 	vadd.f32	s8, s8, s3
 80054fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005500:	ed80 4a01 	vstr	s8, [r0, #4]
 8005504:	4418      	add	r0, r3
 8005506:	ed86 3a00 	vstr	s6, [r6]
 800550a:	ed01 1a01 	vstr	s2, [r1, #-4]
 800550e:	ed42 3a01 	vstr	s7, [r2, #-4]
 8005512:	edc5 6a00 	vstr	s13, [r5]
 8005516:	edc6 5a01 	vstr	s11, [r6, #4]
 800551a:	441e      	add	r6, r3
 800551c:	ed81 5a00 	vstr	s10, [r1]
 8005520:	4419      	add	r1, r3
 8005522:	ed82 7a00 	vstr	s14, [r2]
 8005526:	441a      	add	r2, r3
 8005528:	edc5 7a01 	vstr	s15, [r5, #4]
 800552c:	441d      	add	r5, r3
 800552e:	f63f af44 	bhi.w	80053ba <arm_radix8_butterfly_f32+0x66>
 8005532:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005534:	2f07      	cmp	r7, #7
 8005536:	f240 81e8 	bls.w	800590a <arm_radix8_butterfly_f32+0x5b6>
 800553a:	9903      	ldr	r1, [sp, #12]
 800553c:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8005540:	9e01      	ldr	r6, [sp, #4]
 8005542:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8005546:	19ca      	adds	r2, r1, r7
 8005548:	1c4c      	adds	r4, r1, #1
 800554a:	eb05 010e 	add.w	r1, r5, lr
 800554e:	00ed      	lsls	r5, r5, #3
 8005550:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8005554:	3608      	adds	r6, #8
 8005556:	950f      	str	r5, [sp, #60]	; 0x3c
 8005558:	eb01 050e 	add.w	r5, r1, lr
 800555c:	00c9      	lsls	r1, r1, #3
 800555e:	443c      	add	r4, r7
 8005560:	9618      	str	r6, [sp, #96]	; 0x60
 8005562:	00ee      	lsls	r6, r5, #3
 8005564:	460f      	mov	r7, r1
 8005566:	9114      	str	r1, [sp, #80]	; 0x50
 8005568:	9902      	ldr	r1, [sp, #8]
 800556a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800556e:	9611      	str	r6, [sp, #68]	; 0x44
 8005570:	00c0      	lsls	r0, r0, #3
 8005572:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8005574:	3108      	adds	r1, #8
 8005576:	3404      	adds	r4, #4
 8005578:	f04f 0901 	mov.w	r9, #1
 800557c:	9119      	str	r1, [sp, #100]	; 0x64
 800557e:	eb05 010e 	add.w	r1, r5, lr
 8005582:	4635      	mov	r5, r6
 8005584:	940b      	str	r4, [sp, #44]	; 0x2c
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	443d      	add	r5, r7
 800558a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800558c:	9507      	str	r5, [sp, #28]
 800558e:	eb01 050e 	add.w	r5, r1, lr
 8005592:	00c9      	lsls	r1, r1, #3
 8005594:	19f7      	adds	r7, r6, r7
 8005596:	00ed      	lsls	r5, r5, #3
 8005598:	9110      	str	r1, [sp, #64]	; 0x40
 800559a:	00d1      	lsls	r1, r2, #3
 800559c:	970a      	str	r7, [sp, #40]	; 0x28
 800559e:	462f      	mov	r7, r5
 80055a0:	9515      	str	r5, [sp, #84]	; 0x54
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055a6:	19f4      	adds	r4, r6, r7
 80055a8:	320c      	adds	r2, #12
 80055aa:	3108      	adds	r1, #8
 80055ac:	1975      	adds	r5, r6, r5
 80055ae:	9408      	str	r4, [sp, #32]
 80055b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80055b2:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80055b6:	9509      	str	r5, [sp, #36]	; 0x24
 80055b8:	f100 020c 	add.w	r2, r0, #12
 80055bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80055c0:	1975      	adds	r5, r6, r5
 80055c2:	9216      	str	r2, [sp, #88]	; 0x58
 80055c4:	1932      	adds	r2, r6, r4
 80055c6:	911b      	str	r1, [sp, #108]	; 0x6c
 80055c8:	9505      	str	r5, [sp, #20]
 80055ca:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80055ce:	0179      	lsls	r1, r7, #5
 80055d0:	9204      	str	r2, [sp, #16]
 80055d2:	1972      	adds	r2, r6, r5
 80055d4:	9412      	str	r4, [sp, #72]	; 0x48
 80055d6:	9513      	str	r5, [sp, #76]	; 0x4c
 80055d8:	9206      	str	r2, [sp, #24]
 80055da:	f101 0208 	add.w	r2, r1, #8
 80055de:	921a      	str	r2, [sp, #104]	; 0x68
 80055e0:	2200      	movs	r2, #0
 80055e2:	f102 0108 	add.w	r1, r2, #8
 80055e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055e8:	46cc      	mov	ip, r9
 80055ea:	460f      	mov	r7, r1
 80055ec:	910c      	str	r1, [sp, #48]	; 0x30
 80055ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055f0:	eb0b 0e07 	add.w	lr, fp, r7
 80055f4:	9f04      	ldr	r7, [sp, #16]
 80055f6:	188e      	adds	r6, r1, r2
 80055f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055fa:	edd7 fa00 	vldr	s31, [r7]
 80055fe:	9f06      	ldr	r7, [sp, #24]
 8005600:	188d      	adds	r5, r1, r2
 8005602:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005604:	445e      	add	r6, fp
 8005606:	ed97 fa00 	vldr	s30, [r7]
 800560a:	445d      	add	r5, fp
 800560c:	9f05      	ldr	r7, [sp, #20]
 800560e:	188c      	adds	r4, r1, r2
 8005610:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005612:	edd7 ea00 	vldr	s29, [r7]
 8005616:	445c      	add	r4, fp
 8005618:	9f07      	ldr	r7, [sp, #28]
 800561a:	1888      	adds	r0, r1, r2
 800561c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800561e:	ed97 ea00 	vldr	s28, [r7]
 8005622:	4458      	add	r0, fp
 8005624:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005626:	4411      	add	r1, r2
 8005628:	441a      	add	r2, r3
 800562a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800562c:	edd7 da00 	vldr	s27, [r7]
 8005630:	4459      	add	r1, fp
 8005632:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005634:	445a      	add	r2, fp
 8005636:	930d      	str	r3, [sp, #52]	; 0x34
 8005638:	ed97 da00 	vldr	s26, [r7]
 800563c:	9f08      	ldr	r7, [sp, #32]
 800563e:	edd7 ca00 	vldr	s25, [r7]
 8005642:	9f04      	ldr	r7, [sp, #16]
 8005644:	ed97 ca01 	vldr	s24, [r7, #4]
 8005648:	9f06      	ldr	r7, [sp, #24]
 800564a:	edd7 ba01 	vldr	s23, [r7, #4]
 800564e:	9f05      	ldr	r7, [sp, #20]
 8005650:	ed97 ba01 	vldr	s22, [r7, #4]
 8005654:	9f07      	ldr	r7, [sp, #28]
 8005656:	edd7 aa01 	vldr	s21, [r7, #4]
 800565a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800565c:	ed97 aa01 	vldr	s20, [r7, #4]
 8005660:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	edd7 7a01 	vldr	s15, [r7, #4]
 8005668:	9f08      	ldr	r7, [sp, #32]
 800566a:	edcd 7a02 	vstr	s15, [sp, #8]
 800566e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005672:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005674:	edcd 7a03 	vstr	s15, [sp, #12]
 8005678:	e002      	b.n	8005680 <arm_radix8_butterfly_f32+0x32c>
 800567a:	bf00      	nop
 800567c:	3f3504f3 	.word	0x3f3504f3
 8005680:	ed90 2a00 	vldr	s4, [r0]
 8005684:	44c4      	add	ip, r8
 8005686:	ed96 7a00 	vldr	s14, [r6]
 800568a:	ed94 8a00 	vldr	s16, [r4]
 800568e:	45e2      	cmp	sl, ip
 8005690:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005694:	ed95 5a00 	vldr	s10, [r5]
 8005698:	ed51 5a01 	vldr	s11, [r1, #-4]
 800569c:	ee38 6a27 	vadd.f32	s12, s16, s15
 80056a0:	ed9e 1a00 	vldr	s2, [lr]
 80056a4:	ee78 2a67 	vsub.f32	s5, s16, s15
 80056a8:	ed17 4a01 	vldr	s8, [r7, #-4]
 80056ac:	ee75 3a25 	vadd.f32	s7, s10, s11
 80056b0:	ee31 3a07 	vadd.f32	s6, s2, s14
 80056b4:	edde 4a01 	vldr	s9, [lr, #4]
 80056b8:	ee72 6a04 	vadd.f32	s13, s4, s8
 80056bc:	ee75 5a65 	vsub.f32	s11, s10, s11
 80056c0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80056c4:	ee33 5aa6 	vadd.f32	s10, s7, s13
 80056c8:	ee32 4a44 	vsub.f32	s8, s4, s8
 80056cc:	ee31 1a47 	vsub.f32	s2, s2, s14
 80056d0:	ee31 7a85 	vadd.f32	s14, s3, s10
 80056d4:	ee75 7a84 	vadd.f32	s15, s11, s8
 80056d8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80056dc:	ed8e 7a00 	vstr	s14, [lr]
 80056e0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80056e4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80056e8:	ed90 2a01 	vldr	s4, [r0, #4]
 80056ec:	ed95 7a01 	vldr	s14, [r5, #4]
 80056f0:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80056f4:	ed91 6a00 	vldr	s12, [r1]
 80056f8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80056fc:	edd7 8a00 	vldr	s17, [r7]
 8005700:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8005704:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8005708:	edd2 0a00 	vldr	s1, [r2]
 800570c:	ee72 6a68 	vsub.f32	s13, s4, s17
 8005710:	edd6 7a01 	vldr	s15, [r6, #4]
 8005714:	ee77 2a46 	vsub.f32	s5, s14, s12
 8005718:	ee37 0a06 	vadd.f32	s0, s14, s12
 800571c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005720:	ee32 6a28 	vadd.f32	s12, s4, s17
 8005724:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8005728:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800572c:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8005730:	ee77 6a20 	vadd.f32	s13, s14, s1
 8005734:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8005738:	ee37 7a60 	vsub.f32	s14, s14, s1
 800573c:	ee24 4a09 	vmul.f32	s8, s8, s18
 8005740:	ee70 0a06 	vadd.f32	s1, s0, s12
 8005744:	ee69 7a89 	vmul.f32	s15, s19, s18
 8005748:	ee62 2a89 	vmul.f32	s5, s5, s18
 800574c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005750:	ee32 0a26 	vadd.f32	s0, s4, s13
 8005754:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005758:	ee77 8a62 	vsub.f32	s17, s14, s5
 800575c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8005760:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8005764:	ee77 4a22 	vadd.f32	s9, s14, s5
 8005768:	ee71 2a04 	vadd.f32	s5, s2, s8
 800576c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8005770:	ee30 1a60 	vsub.f32	s2, s0, s1
 8005774:	ee73 1a06 	vadd.f32	s3, s6, s12
 8005778:	ee33 6a46 	vsub.f32	s12, s6, s12
 800577c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8005780:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8005784:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8005788:	ee77 7a88 	vadd.f32	s15, s15, s16
 800578c:	ee72 3a65 	vsub.f32	s7, s4, s11
 8005790:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8005794:	ee72 5a25 	vadd.f32	s11, s4, s11
 8005798:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800579c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80057a0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80057a4:	ee77 2a28 	vadd.f32	s5, s14, s17
 80057a8:	ee37 7a68 	vsub.f32	s14, s14, s17
 80057ac:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80057b0:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80057b4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80057b8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80057bc:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80057c0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80057c4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80057c8:	edce 0a01 	vstr	s1, [lr, #4]
 80057cc:	ee38 8a88 	vadd.f32	s16, s17, s16
 80057d0:	449e      	add	lr, r3
 80057d2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80057d6:	ee31 5a45 	vsub.f32	s10, s2, s10
 80057da:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80057de:	ed86 8a00 	vstr	s16, [r6]
 80057e2:	ee39 0a80 	vadd.f32	s0, s19, s0
 80057e6:	ee33 3a61 	vsub.f32	s6, s6, s3
 80057ea:	ed86 5a01 	vstr	s10, [r6, #4]
 80057ee:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80057f2:	edcd 3a01 	vstr	s7, [sp, #4]
 80057f6:	ed9d 5a03 	vldr	s10, [sp, #12]
 80057fa:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80057fe:	eddd 3a02 	vldr	s7, [sp, #8]
 8005802:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8005806:	ed84 0a00 	vstr	s0, [r4]
 800580a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800580e:	ed84 3a01 	vstr	s6, [r4, #4]
 8005812:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8005816:	ee23 6a86 	vmul.f32	s12, s7, s12
 800581a:	eddd 3a01 	vldr	s7, [sp, #4]
 800581e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8005822:	441e      	add	r6, r3
 8005824:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8005828:	441c      	add	r4, r3
 800582a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800582e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8005832:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8005836:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800583a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800583e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8005842:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8005846:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800584a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800584e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8005852:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8005856:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800585a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800585e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005862:	ee39 5a85 	vadd.f32	s10, s19, s10
 8005866:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800586a:	ed02 8a01 	vstr	s16, [r2, #-4]
 800586e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8005872:	ed82 6a00 	vstr	s12, [r2]
 8005876:	ee74 2a62 	vsub.f32	s5, s8, s5
 800587a:	edc5 0a00 	vstr	s1, [r5]
 800587e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8005882:	edc5 3a01 	vstr	s7, [r5, #4]
 8005886:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800588a:	ed07 5a01 	vstr	s10, [r7, #-4]
 800588e:	edc7 4a00 	vstr	s9, [r7]
 8005892:	441d      	add	r5, r3
 8005894:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005898:	441a      	add	r2, r3
 800589a:	edc1 2a00 	vstr	s5, [r1]
 800589e:	441f      	add	r7, r3
 80058a0:	ed80 3a00 	vstr	s6, [r0]
 80058a4:	4419      	add	r1, r3
 80058a6:	ed80 7a01 	vstr	s14, [r0, #4]
 80058aa:	4418      	add	r0, r3
 80058ac:	f63f aee8 	bhi.w	8005680 <arm_radix8_butterfly_f32+0x32c>
 80058b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058b2:	f109 0901 	add.w	r9, r9, #1
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	9b04      	ldr	r3, [sp, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	9b06      	ldr	r3, [sp, #24]
 80058c2:	4413      	add	r3, r2
 80058c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058c6:	9306      	str	r3, [sp, #24]
 80058c8:	9b05      	ldr	r3, [sp, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058ce:	9305      	str	r3, [sp, #20]
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058da:	4413      	add	r3, r2
 80058dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058de:	930a      	str	r3, [sp, #40]	; 0x28
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	4413      	add	r3, r2
 80058e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058e6:	9309      	str	r3, [sp, #36]	; 0x24
 80058e8:	9b08      	ldr	r3, [sp, #32]
 80058ea:	4413      	add	r3, r2
 80058ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058ee:	9308      	str	r3, [sp, #32]
 80058f0:	3208      	adds	r2, #8
 80058f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80058f6:	4599      	cmp	r9, r3
 80058f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058fa:	f47f ae72 	bne.w	80055e2 <arm_radix8_butterfly_f32+0x28e>
 80058fe:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8005902:	46c8      	mov	r8, r9
 8005904:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8005908:	e533      	b.n	8005372 <arm_radix8_butterfly_f32+0x1e>
 800590a:	b01f      	add	sp, #124	; 0x7c
 800590c:	ecbd 8b10 	vpop	{d8-d15}
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005914 <__errno>:
 8005914:	4b01      	ldr	r3, [pc, #4]	; (800591c <__errno+0x8>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000014 	.word	0x20000014

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4d0d      	ldr	r5, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2600      	movs	r6, #0
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4d0b      	ldr	r5, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f003 f944 	bl	8008bc0 <_init>
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2600      	movs	r6, #0
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	0801c68c 	.word	0x0801c68c
 800595c:	0801c68c 	.word	0x0801c68c
 8005960:	0801c68c 	.word	0x0801c68c
 8005964:	0801c690 	.word	0x0801c690

08005968 <memset>:
 8005968:	4402      	add	r2, r0
 800596a:	4603      	mov	r3, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	d100      	bne.n	8005972 <memset+0xa>
 8005970:	4770      	bx	lr
 8005972:	f803 1b01 	strb.w	r1, [r3], #1
 8005976:	e7f9      	b.n	800596c <memset+0x4>

08005978 <__cvt>:
 8005978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	ec55 4b10 	vmov	r4, r5, d0
 8005980:	2d00      	cmp	r5, #0
 8005982:	460e      	mov	r6, r1
 8005984:	4619      	mov	r1, r3
 8005986:	462b      	mov	r3, r5
 8005988:	bfbb      	ittet	lt
 800598a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800598e:	461d      	movlt	r5, r3
 8005990:	2300      	movge	r3, #0
 8005992:	232d      	movlt	r3, #45	; 0x2d
 8005994:	700b      	strb	r3, [r1, #0]
 8005996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005998:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800599c:	4691      	mov	r9, r2
 800599e:	f023 0820 	bic.w	r8, r3, #32
 80059a2:	bfbc      	itt	lt
 80059a4:	4622      	movlt	r2, r4
 80059a6:	4614      	movlt	r4, r2
 80059a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059ac:	d005      	beq.n	80059ba <__cvt+0x42>
 80059ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059b2:	d100      	bne.n	80059b6 <__cvt+0x3e>
 80059b4:	3601      	adds	r6, #1
 80059b6:	2102      	movs	r1, #2
 80059b8:	e000      	b.n	80059bc <__cvt+0x44>
 80059ba:	2103      	movs	r1, #3
 80059bc:	ab03      	add	r3, sp, #12
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	ab02      	add	r3, sp, #8
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	ec45 4b10 	vmov	d0, r4, r5
 80059c8:	4653      	mov	r3, sl
 80059ca:	4632      	mov	r2, r6
 80059cc:	f000 fd04 	bl	80063d8 <_dtoa_r>
 80059d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059d4:	4607      	mov	r7, r0
 80059d6:	d102      	bne.n	80059de <__cvt+0x66>
 80059d8:	f019 0f01 	tst.w	r9, #1
 80059dc:	d022      	beq.n	8005a24 <__cvt+0xac>
 80059de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059e2:	eb07 0906 	add.w	r9, r7, r6
 80059e6:	d110      	bne.n	8005a0a <__cvt+0x92>
 80059e8:	783b      	ldrb	r3, [r7, #0]
 80059ea:	2b30      	cmp	r3, #48	; 0x30
 80059ec:	d10a      	bne.n	8005a04 <__cvt+0x8c>
 80059ee:	2200      	movs	r2, #0
 80059f0:	2300      	movs	r3, #0
 80059f2:	4620      	mov	r0, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	f7fb f8e7 	bl	8000bc8 <__aeabi_dcmpeq>
 80059fa:	b918      	cbnz	r0, 8005a04 <__cvt+0x8c>
 80059fc:	f1c6 0601 	rsb	r6, r6, #1
 8005a00:	f8ca 6000 	str.w	r6, [sl]
 8005a04:	f8da 3000 	ldr.w	r3, [sl]
 8005a08:	4499      	add	r9, r3
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fb f8d9 	bl	8000bc8 <__aeabi_dcmpeq>
 8005a16:	b108      	cbz	r0, 8005a1c <__cvt+0xa4>
 8005a18:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a1c:	2230      	movs	r2, #48	; 0x30
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	454b      	cmp	r3, r9
 8005a22:	d307      	bcc.n	8005a34 <__cvt+0xbc>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a28:	1bdb      	subs	r3, r3, r7
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	b004      	add	sp, #16
 8005a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	9103      	str	r1, [sp, #12]
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e7f0      	b.n	8005a1e <__cvt+0xa6>

08005a3c <__exponent>:
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2900      	cmp	r1, #0
 8005a42:	bfb8      	it	lt
 8005a44:	4249      	neglt	r1, r1
 8005a46:	f803 2b02 	strb.w	r2, [r3], #2
 8005a4a:	bfb4      	ite	lt
 8005a4c:	222d      	movlt	r2, #45	; 0x2d
 8005a4e:	222b      	movge	r2, #43	; 0x2b
 8005a50:	2909      	cmp	r1, #9
 8005a52:	7042      	strb	r2, [r0, #1]
 8005a54:	dd2a      	ble.n	8005aac <__exponent+0x70>
 8005a56:	f10d 0407 	add.w	r4, sp, #7
 8005a5a:	46a4      	mov	ip, r4
 8005a5c:	270a      	movs	r7, #10
 8005a5e:	46a6      	mov	lr, r4
 8005a60:	460a      	mov	r2, r1
 8005a62:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a66:	fb07 1516 	mls	r5, r7, r6, r1
 8005a6a:	3530      	adds	r5, #48	; 0x30
 8005a6c:	2a63      	cmp	r2, #99	; 0x63
 8005a6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a76:	4631      	mov	r1, r6
 8005a78:	dcf1      	bgt.n	8005a5e <__exponent+0x22>
 8005a7a:	3130      	adds	r1, #48	; 0x30
 8005a7c:	f1ae 0502 	sub.w	r5, lr, #2
 8005a80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a84:	1c44      	adds	r4, r0, #1
 8005a86:	4629      	mov	r1, r5
 8005a88:	4561      	cmp	r1, ip
 8005a8a:	d30a      	bcc.n	8005aa2 <__exponent+0x66>
 8005a8c:	f10d 0209 	add.w	r2, sp, #9
 8005a90:	eba2 020e 	sub.w	r2, r2, lr
 8005a94:	4565      	cmp	r5, ip
 8005a96:	bf88      	it	hi
 8005a98:	2200      	movhi	r2, #0
 8005a9a:	4413      	add	r3, r2
 8005a9c:	1a18      	subs	r0, r3, r0
 8005a9e:	b003      	add	sp, #12
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005aaa:	e7ed      	b.n	8005a88 <__exponent+0x4c>
 8005aac:	2330      	movs	r3, #48	; 0x30
 8005aae:	3130      	adds	r1, #48	; 0x30
 8005ab0:	7083      	strb	r3, [r0, #2]
 8005ab2:	70c1      	strb	r1, [r0, #3]
 8005ab4:	1d03      	adds	r3, r0, #4
 8005ab6:	e7f1      	b.n	8005a9c <__exponent+0x60>

08005ab8 <_printf_float>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	ed2d 8b02 	vpush	{d8}
 8005ac0:	b08d      	sub	sp, #52	; 0x34
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ac8:	4616      	mov	r6, r2
 8005aca:	461f      	mov	r7, r3
 8005acc:	4605      	mov	r5, r0
 8005ace:	f001 fb67 	bl	80071a0 <_localeconv_r>
 8005ad2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	f7fa fbfa 	bl	80002d0 <strlen>
 8005adc:	2300      	movs	r3, #0
 8005ade:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	9305      	str	r3, [sp, #20]
 8005ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005aec:	3307      	adds	r3, #7
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	f103 0208 	add.w	r2, r3, #8
 8005af6:	f8c8 2000 	str.w	r2, [r8]
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b0a:	9307      	str	r3, [sp, #28]
 8005b0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b10:	ee08 0a10 	vmov	s16, r0
 8005b14:	4b9f      	ldr	r3, [pc, #636]	; (8005d94 <_printf_float+0x2dc>)
 8005b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1e:	f7fb f885 	bl	8000c2c <__aeabi_dcmpun>
 8005b22:	bb88      	cbnz	r0, 8005b88 <_printf_float+0xd0>
 8005b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b28:	4b9a      	ldr	r3, [pc, #616]	; (8005d94 <_printf_float+0x2dc>)
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	f7fb f85f 	bl	8000bf0 <__aeabi_dcmple>
 8005b32:	bb48      	cbnz	r0, 8005b88 <_printf_float+0xd0>
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fb f84e 	bl	8000bdc <__aeabi_dcmplt>
 8005b40:	b110      	cbz	r0, 8005b48 <_printf_float+0x90>
 8005b42:	232d      	movs	r3, #45	; 0x2d
 8005b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b48:	4b93      	ldr	r3, [pc, #588]	; (8005d98 <_printf_float+0x2e0>)
 8005b4a:	4894      	ldr	r0, [pc, #592]	; (8005d9c <_printf_float+0x2e4>)
 8005b4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b50:	bf94      	ite	ls
 8005b52:	4698      	movls	r8, r3
 8005b54:	4680      	movhi	r8, r0
 8005b56:	2303      	movs	r3, #3
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	9b05      	ldr	r3, [sp, #20]
 8005b5c:	f023 0204 	bic.w	r2, r3, #4
 8005b60:	6022      	str	r2, [r4, #0]
 8005b62:	f04f 0900 	mov.w	r9, #0
 8005b66:	9700      	str	r7, [sp, #0]
 8005b68:	4633      	mov	r3, r6
 8005b6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f9d8 	bl	8005f24 <_printf_common>
 8005b74:	3001      	adds	r0, #1
 8005b76:	f040 8090 	bne.w	8005c9a <_printf_float+0x1e2>
 8005b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7e:	b00d      	add	sp, #52	; 0x34
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4649      	mov	r1, r9
 8005b90:	f7fb f84c 	bl	8000c2c <__aeabi_dcmpun>
 8005b94:	b140      	cbz	r0, 8005ba8 <_printf_float+0xf0>
 8005b96:	464b      	mov	r3, r9
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfbc      	itt	lt
 8005b9c:	232d      	movlt	r3, #45	; 0x2d
 8005b9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ba2:	487f      	ldr	r0, [pc, #508]	; (8005da0 <_printf_float+0x2e8>)
 8005ba4:	4b7f      	ldr	r3, [pc, #508]	; (8005da4 <_printf_float+0x2ec>)
 8005ba6:	e7d1      	b.n	8005b4c <_printf_float+0x94>
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bae:	9206      	str	r2, [sp, #24]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	d13f      	bne.n	8005c34 <_printf_float+0x17c>
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	9b05      	ldr	r3, [sp, #20]
 8005bba:	6861      	ldr	r1, [r4, #4]
 8005bbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9303      	str	r3, [sp, #12]
 8005bc4:	ab0a      	add	r3, sp, #40	; 0x28
 8005bc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bca:	ab09      	add	r3, sp, #36	; 0x24
 8005bcc:	ec49 8b10 	vmov	d0, r8, r9
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7ff fecd 	bl	8005978 <__cvt>
 8005bde:	9b06      	ldr	r3, [sp, #24]
 8005be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be2:	2b47      	cmp	r3, #71	; 0x47
 8005be4:	4680      	mov	r8, r0
 8005be6:	d108      	bne.n	8005bfa <_printf_float+0x142>
 8005be8:	1cc8      	adds	r0, r1, #3
 8005bea:	db02      	blt.n	8005bf2 <_printf_float+0x13a>
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	dd41      	ble.n	8005c76 <_printf_float+0x1be>
 8005bf2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bf6:	fa5f fb8b 	uxtb.w	fp, fp
 8005bfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bfe:	d820      	bhi.n	8005c42 <_printf_float+0x18a>
 8005c00:	3901      	subs	r1, #1
 8005c02:	465a      	mov	r2, fp
 8005c04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c08:	9109      	str	r1, [sp, #36]	; 0x24
 8005c0a:	f7ff ff17 	bl	8005a3c <__exponent>
 8005c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c10:	1813      	adds	r3, r2, r0
 8005c12:	2a01      	cmp	r2, #1
 8005c14:	4681      	mov	r9, r0
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	dc02      	bgt.n	8005c20 <_printf_float+0x168>
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	07d2      	lsls	r2, r2, #31
 8005c1e:	d501      	bpl.n	8005c24 <_printf_float+0x16c>
 8005c20:	3301      	adds	r3, #1
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d09c      	beq.n	8005b66 <_printf_float+0xae>
 8005c2c:	232d      	movs	r3, #45	; 0x2d
 8005c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c32:	e798      	b.n	8005b66 <_printf_float+0xae>
 8005c34:	9a06      	ldr	r2, [sp, #24]
 8005c36:	2a47      	cmp	r2, #71	; 0x47
 8005c38:	d1be      	bne.n	8005bb8 <_printf_float+0x100>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1bc      	bne.n	8005bb8 <_printf_float+0x100>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7b9      	b.n	8005bb6 <_printf_float+0xfe>
 8005c42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c46:	d118      	bne.n	8005c7a <_printf_float+0x1c2>
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	6863      	ldr	r3, [r4, #4]
 8005c4c:	dd0b      	ble.n	8005c66 <_printf_float+0x1ae>
 8005c4e:	6121      	str	r1, [r4, #16]
 8005c50:	b913      	cbnz	r3, 8005c58 <_printf_float+0x1a0>
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	07d0      	lsls	r0, r2, #31
 8005c56:	d502      	bpl.n	8005c5e <_printf_float+0x1a6>
 8005c58:	3301      	adds	r3, #1
 8005c5a:	440b      	add	r3, r1
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c60:	f04f 0900 	mov.w	r9, #0
 8005c64:	e7de      	b.n	8005c24 <_printf_float+0x16c>
 8005c66:	b913      	cbnz	r3, 8005c6e <_printf_float+0x1b6>
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	07d2      	lsls	r2, r2, #31
 8005c6c:	d501      	bpl.n	8005c72 <_printf_float+0x1ba>
 8005c6e:	3302      	adds	r3, #2
 8005c70:	e7f4      	b.n	8005c5c <_printf_float+0x1a4>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7f2      	b.n	8005c5c <_printf_float+0x1a4>
 8005c76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c7c:	4299      	cmp	r1, r3
 8005c7e:	db05      	blt.n	8005c8c <_printf_float+0x1d4>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	6121      	str	r1, [r4, #16]
 8005c84:	07d8      	lsls	r0, r3, #31
 8005c86:	d5ea      	bpl.n	8005c5e <_printf_float+0x1a6>
 8005c88:	1c4b      	adds	r3, r1, #1
 8005c8a:	e7e7      	b.n	8005c5c <_printf_float+0x1a4>
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	bfd4      	ite	le
 8005c90:	f1c1 0202 	rsble	r2, r1, #2
 8005c94:	2201      	movgt	r2, #1
 8005c96:	4413      	add	r3, r2
 8005c98:	e7e0      	b.n	8005c5c <_printf_float+0x1a4>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	055a      	lsls	r2, r3, #21
 8005c9e:	d407      	bmi.n	8005cb0 <_printf_float+0x1f8>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d12c      	bne.n	8005d08 <_printf_float+0x250>
 8005cae:	e764      	b.n	8005b7a <_printf_float+0xc2>
 8005cb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cb4:	f240 80e0 	bls.w	8005e78 <_printf_float+0x3c0>
 8005cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f7fa ff82 	bl	8000bc8 <__aeabi_dcmpeq>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d034      	beq.n	8005d32 <_printf_float+0x27a>
 8005cc8:	4a37      	ldr	r2, [pc, #220]	; (8005da8 <_printf_float+0x2f0>)
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af51 	beq.w	8005b7a <_printf_float+0xc2>
 8005cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	db02      	blt.n	8005ce6 <_printf_float+0x22e>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	07d8      	lsls	r0, r3, #31
 8005ce4:	d510      	bpl.n	8005d08 <_printf_float+0x250>
 8005ce6:	ee18 3a10 	vmov	r3, s16
 8005cea:	4652      	mov	r2, sl
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	f43f af41 	beq.w	8005b7a <_printf_float+0xc2>
 8005cf8:	f04f 0800 	mov.w	r8, #0
 8005cfc:	f104 091a 	add.w	r9, r4, #26
 8005d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d02:	3b01      	subs	r3, #1
 8005d04:	4543      	cmp	r3, r8
 8005d06:	dc09      	bgt.n	8005d1c <_printf_float+0x264>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	079b      	lsls	r3, r3, #30
 8005d0c:	f100 8105 	bmi.w	8005f1a <_printf_float+0x462>
 8005d10:	68e0      	ldr	r0, [r4, #12]
 8005d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d14:	4298      	cmp	r0, r3
 8005d16:	bfb8      	it	lt
 8005d18:	4618      	movlt	r0, r3
 8005d1a:	e730      	b.n	8005b7e <_printf_float+0xc6>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	464a      	mov	r2, r9
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f af27 	beq.w	8005b7a <_printf_float+0xc2>
 8005d2c:	f108 0801 	add.w	r8, r8, #1
 8005d30:	e7e6      	b.n	8005d00 <_printf_float+0x248>
 8005d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dc39      	bgt.n	8005dac <_printf_float+0x2f4>
 8005d38:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <_printf_float+0x2f0>)
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f af19 	beq.w	8005b7a <_printf_float+0xc2>
 8005d48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	d102      	bne.n	8005d56 <_printf_float+0x29e>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	d5d8      	bpl.n	8005d08 <_printf_float+0x250>
 8005d56:	ee18 3a10 	vmov	r3, s16
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	f43f af09 	beq.w	8005b7a <_printf_float+0xc2>
 8005d68:	f04f 0900 	mov.w	r9, #0
 8005d6c:	f104 0a1a 	add.w	sl, r4, #26
 8005d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d72:	425b      	negs	r3, r3
 8005d74:	454b      	cmp	r3, r9
 8005d76:	dc01      	bgt.n	8005d7c <_printf_float+0x2c4>
 8005d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7a:	e792      	b.n	8005ca2 <_printf_float+0x1ea>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4652      	mov	r2, sl
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	f43f aef7 	beq.w	8005b7a <_printf_float+0xc2>
 8005d8c:	f109 0901 	add.w	r9, r9, #1
 8005d90:	e7ee      	b.n	8005d70 <_printf_float+0x2b8>
 8005d92:	bf00      	nop
 8005d94:	7fefffff 	.word	0x7fefffff
 8005d98:	0801c2b0 	.word	0x0801c2b0
 8005d9c:	0801c2b4 	.word	0x0801c2b4
 8005da0:	0801c2bc 	.word	0x0801c2bc
 8005da4:	0801c2b8 	.word	0x0801c2b8
 8005da8:	0801c2c0 	.word	0x0801c2c0
 8005dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005db0:	429a      	cmp	r2, r3
 8005db2:	bfa8      	it	ge
 8005db4:	461a      	movge	r2, r3
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	4691      	mov	r9, r2
 8005dba:	dc37      	bgt.n	8005e2c <_printf_float+0x374>
 8005dbc:	f04f 0b00 	mov.w	fp, #0
 8005dc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dc4:	f104 021a 	add.w	r2, r4, #26
 8005dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dca:	9305      	str	r3, [sp, #20]
 8005dcc:	eba3 0309 	sub.w	r3, r3, r9
 8005dd0:	455b      	cmp	r3, fp
 8005dd2:	dc33      	bgt.n	8005e3c <_printf_float+0x384>
 8005dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	db3b      	blt.n	8005e54 <_printf_float+0x39c>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	07da      	lsls	r2, r3, #31
 8005de0:	d438      	bmi.n	8005e54 <_printf_float+0x39c>
 8005de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de4:	9a05      	ldr	r2, [sp, #20]
 8005de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005de8:	1a9a      	subs	r2, r3, r2
 8005dea:	eba3 0901 	sub.w	r9, r3, r1
 8005dee:	4591      	cmp	r9, r2
 8005df0:	bfa8      	it	ge
 8005df2:	4691      	movge	r9, r2
 8005df4:	f1b9 0f00 	cmp.w	r9, #0
 8005df8:	dc35      	bgt.n	8005e66 <_printf_float+0x3ae>
 8005dfa:	f04f 0800 	mov.w	r8, #0
 8005dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e02:	f104 0a1a 	add.w	sl, r4, #26
 8005e06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	eba3 0309 	sub.w	r3, r3, r9
 8005e10:	4543      	cmp	r3, r8
 8005e12:	f77f af79 	ble.w	8005d08 <_printf_float+0x250>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4652      	mov	r2, sl
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f aeaa 	beq.w	8005b7a <_printf_float+0xc2>
 8005e26:	f108 0801 	add.w	r8, r8, #1
 8005e2a:	e7ec      	b.n	8005e06 <_printf_float+0x34e>
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4642      	mov	r2, r8
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	d1c0      	bne.n	8005dbc <_printf_float+0x304>
 8005e3a:	e69e      	b.n	8005b7a <_printf_float+0xc2>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	9205      	str	r2, [sp, #20]
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	f43f ae97 	beq.w	8005b7a <_printf_float+0xc2>
 8005e4c:	9a05      	ldr	r2, [sp, #20]
 8005e4e:	f10b 0b01 	add.w	fp, fp, #1
 8005e52:	e7b9      	b.n	8005dc8 <_printf_float+0x310>
 8005e54:	ee18 3a10 	vmov	r3, s16
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d1be      	bne.n	8005de2 <_printf_float+0x32a>
 8005e64:	e689      	b.n	8005b7a <_printf_float+0xc2>
 8005e66:	9a05      	ldr	r2, [sp, #20]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	4442      	add	r2, r8
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	d1c1      	bne.n	8005dfa <_printf_float+0x342>
 8005e76:	e680      	b.n	8005b7a <_printf_float+0xc2>
 8005e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e7a:	2a01      	cmp	r2, #1
 8005e7c:	dc01      	bgt.n	8005e82 <_printf_float+0x3ca>
 8005e7e:	07db      	lsls	r3, r3, #31
 8005e80:	d538      	bpl.n	8005ef4 <_printf_float+0x43c>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4642      	mov	r2, r8
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f ae74 	beq.w	8005b7a <_printf_float+0xc2>
 8005e92:	ee18 3a10 	vmov	r3, s16
 8005e96:	4652      	mov	r2, sl
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f ae6b 	beq.w	8005b7a <_printf_float+0xc2>
 8005ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f7fa fe8c 	bl	8000bc8 <__aeabi_dcmpeq>
 8005eb0:	b9d8      	cbnz	r0, 8005eea <_printf_float+0x432>
 8005eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb4:	f108 0201 	add.w	r2, r8, #1
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d10e      	bne.n	8005ee2 <_printf_float+0x42a>
 8005ec4:	e659      	b.n	8005b7a <_printf_float+0xc2>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4652      	mov	r2, sl
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f ae52 	beq.w	8005b7a <_printf_float+0xc2>
 8005ed6:	f108 0801 	add.w	r8, r8, #1
 8005eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4543      	cmp	r3, r8
 8005ee0:	dcf1      	bgt.n	8005ec6 <_printf_float+0x40e>
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ee8:	e6dc      	b.n	8005ca4 <_printf_float+0x1ec>
 8005eea:	f04f 0800 	mov.w	r8, #0
 8005eee:	f104 0a1a 	add.w	sl, r4, #26
 8005ef2:	e7f2      	b.n	8005eda <_printf_float+0x422>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	e7df      	b.n	8005eba <_printf_float+0x402>
 8005efa:	2301      	movs	r3, #1
 8005efc:	464a      	mov	r2, r9
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	f43f ae38 	beq.w	8005b7a <_printf_float+0xc2>
 8005f0a:	f108 0801 	add.w	r8, r8, #1
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f12:	1a5b      	subs	r3, r3, r1
 8005f14:	4543      	cmp	r3, r8
 8005f16:	dcf0      	bgt.n	8005efa <_printf_float+0x442>
 8005f18:	e6fa      	b.n	8005d10 <_printf_float+0x258>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	f104 0919 	add.w	r9, r4, #25
 8005f22:	e7f4      	b.n	8005f0e <_printf_float+0x456>

08005f24 <_printf_common>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	4616      	mov	r6, r2
 8005f2a:	4699      	mov	r9, r3
 8005f2c:	688a      	ldr	r2, [r1, #8]
 8005f2e:	690b      	ldr	r3, [r1, #16]
 8005f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bfb8      	it	lt
 8005f38:	4613      	movlt	r3, r2
 8005f3a:	6033      	str	r3, [r6, #0]
 8005f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f40:	4607      	mov	r7, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	b10a      	cbz	r2, 8005f4a <_printf_common+0x26>
 8005f46:	3301      	adds	r3, #1
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	0699      	lsls	r1, r3, #26
 8005f4e:	bf42      	ittt	mi
 8005f50:	6833      	ldrmi	r3, [r6, #0]
 8005f52:	3302      	addmi	r3, #2
 8005f54:	6033      	strmi	r3, [r6, #0]
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	f015 0506 	ands.w	r5, r5, #6
 8005f5c:	d106      	bne.n	8005f6c <_printf_common+0x48>
 8005f5e:	f104 0a19 	add.w	sl, r4, #25
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	6832      	ldr	r2, [r6, #0]
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dc26      	bgt.n	8005fba <_printf_common+0x96>
 8005f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f70:	1e13      	subs	r3, r2, #0
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	bf18      	it	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	0692      	lsls	r2, r2, #26
 8005f7a:	d42b      	bmi.n	8005fd4 <_printf_common+0xb0>
 8005f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f80:	4649      	mov	r1, r9
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c0      	blx	r8
 8005f86:	3001      	adds	r0, #1
 8005f88:	d01e      	beq.n	8005fc8 <_printf_common+0xa4>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	68e5      	ldr	r5, [r4, #12]
 8005f8e:	6832      	ldr	r2, [r6, #0]
 8005f90:	f003 0306 	and.w	r3, r3, #6
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	bf08      	it	eq
 8005f98:	1aad      	subeq	r5, r5, r2
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	6922      	ldr	r2, [r4, #16]
 8005f9e:	bf0c      	ite	eq
 8005fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa4:	2500      	movne	r5, #0
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bfc4      	itt	gt
 8005faa:	1a9b      	subgt	r3, r3, r2
 8005fac:	18ed      	addgt	r5, r5, r3
 8005fae:	2600      	movs	r6, #0
 8005fb0:	341a      	adds	r4, #26
 8005fb2:	42b5      	cmp	r5, r6
 8005fb4:	d11a      	bne.n	8005fec <_printf_common+0xc8>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e008      	b.n	8005fcc <_printf_common+0xa8>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	47c0      	blx	r8
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d103      	bne.n	8005fd0 <_printf_common+0xac>
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	e7c6      	b.n	8005f62 <_printf_common+0x3e>
 8005fd4:	18e1      	adds	r1, r4, r3
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	2030      	movs	r0, #48	; 0x30
 8005fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fde:	4422      	add	r2, r4
 8005fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fe8:	3302      	adds	r3, #2
 8005fea:	e7c7      	b.n	8005f7c <_printf_common+0x58>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4622      	mov	r2, r4
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c0      	blx	r8
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d0e6      	beq.n	8005fc8 <_printf_common+0xa4>
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7d9      	b.n	8005fb2 <_printf_common+0x8e>
	...

08006000 <_printf_i>:
 8006000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	7e0f      	ldrb	r7, [r1, #24]
 8006006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006008:	2f78      	cmp	r7, #120	; 0x78
 800600a:	4691      	mov	r9, r2
 800600c:	4680      	mov	r8, r0
 800600e:	460c      	mov	r4, r1
 8006010:	469a      	mov	sl, r3
 8006012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006016:	d807      	bhi.n	8006028 <_printf_i+0x28>
 8006018:	2f62      	cmp	r7, #98	; 0x62
 800601a:	d80a      	bhi.n	8006032 <_printf_i+0x32>
 800601c:	2f00      	cmp	r7, #0
 800601e:	f000 80d8 	beq.w	80061d2 <_printf_i+0x1d2>
 8006022:	2f58      	cmp	r7, #88	; 0x58
 8006024:	f000 80a3 	beq.w	800616e <_printf_i+0x16e>
 8006028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800602c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006030:	e03a      	b.n	80060a8 <_printf_i+0xa8>
 8006032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006036:	2b15      	cmp	r3, #21
 8006038:	d8f6      	bhi.n	8006028 <_printf_i+0x28>
 800603a:	a101      	add	r1, pc, #4	; (adr r1, 8006040 <_printf_i+0x40>)
 800603c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006040:	08006099 	.word	0x08006099
 8006044:	080060ad 	.word	0x080060ad
 8006048:	08006029 	.word	0x08006029
 800604c:	08006029 	.word	0x08006029
 8006050:	08006029 	.word	0x08006029
 8006054:	08006029 	.word	0x08006029
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08006029 	.word	0x08006029
 8006060:	08006029 	.word	0x08006029
 8006064:	08006029 	.word	0x08006029
 8006068:	08006029 	.word	0x08006029
 800606c:	080061b9 	.word	0x080061b9
 8006070:	080060dd 	.word	0x080060dd
 8006074:	0800619b 	.word	0x0800619b
 8006078:	08006029 	.word	0x08006029
 800607c:	08006029 	.word	0x08006029
 8006080:	080061db 	.word	0x080061db
 8006084:	08006029 	.word	0x08006029
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006029 	.word	0x08006029
 8006090:	08006029 	.word	0x08006029
 8006094:	080061a3 	.word	0x080061a3
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	602a      	str	r2, [r5, #0]
 80060a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0a3      	b.n	80061f4 <_printf_i+0x1f4>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	6829      	ldr	r1, [r5, #0]
 80060b0:	0606      	lsls	r6, r0, #24
 80060b2:	f101 0304 	add.w	r3, r1, #4
 80060b6:	d50a      	bpl.n	80060ce <_printf_i+0xce>
 80060b8:	680e      	ldr	r6, [r1, #0]
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	2e00      	cmp	r6, #0
 80060be:	da03      	bge.n	80060c8 <_printf_i+0xc8>
 80060c0:	232d      	movs	r3, #45	; 0x2d
 80060c2:	4276      	negs	r6, r6
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c8:	485e      	ldr	r0, [pc, #376]	; (8006244 <_printf_i+0x244>)
 80060ca:	230a      	movs	r3, #10
 80060cc:	e019      	b.n	8006102 <_printf_i+0x102>
 80060ce:	680e      	ldr	r6, [r1, #0]
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060d6:	bf18      	it	ne
 80060d8:	b236      	sxthne	r6, r6
 80060da:	e7ef      	b.n	80060bc <_printf_i+0xbc>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	1d19      	adds	r1, r3, #4
 80060e2:	6029      	str	r1, [r5, #0]
 80060e4:	0601      	lsls	r1, r0, #24
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0xec>
 80060e8:	681e      	ldr	r6, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <_printf_i+0xf2>
 80060ec:	0646      	lsls	r6, r0, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0xe8>
 80060f0:	881e      	ldrh	r6, [r3, #0]
 80060f2:	4854      	ldr	r0, [pc, #336]	; (8006244 <_printf_i+0x244>)
 80060f4:	2f6f      	cmp	r7, #111	; 0x6f
 80060f6:	bf0c      	ite	eq
 80060f8:	2308      	moveq	r3, #8
 80060fa:	230a      	movne	r3, #10
 80060fc:	2100      	movs	r1, #0
 80060fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006102:	6865      	ldr	r5, [r4, #4]
 8006104:	60a5      	str	r5, [r4, #8]
 8006106:	2d00      	cmp	r5, #0
 8006108:	bfa2      	ittt	ge
 800610a:	6821      	ldrge	r1, [r4, #0]
 800610c:	f021 0104 	bicge.w	r1, r1, #4
 8006110:	6021      	strge	r1, [r4, #0]
 8006112:	b90e      	cbnz	r6, 8006118 <_printf_i+0x118>
 8006114:	2d00      	cmp	r5, #0
 8006116:	d04d      	beq.n	80061b4 <_printf_i+0x1b4>
 8006118:	4615      	mov	r5, r2
 800611a:	fbb6 f1f3 	udiv	r1, r6, r3
 800611e:	fb03 6711 	mls	r7, r3, r1, r6
 8006122:	5dc7      	ldrb	r7, [r0, r7]
 8006124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006128:	4637      	mov	r7, r6
 800612a:	42bb      	cmp	r3, r7
 800612c:	460e      	mov	r6, r1
 800612e:	d9f4      	bls.n	800611a <_printf_i+0x11a>
 8006130:	2b08      	cmp	r3, #8
 8006132:	d10b      	bne.n	800614c <_printf_i+0x14c>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	07de      	lsls	r6, r3, #31
 8006138:	d508      	bpl.n	800614c <_printf_i+0x14c>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	6861      	ldr	r1, [r4, #4]
 800613e:	4299      	cmp	r1, r3
 8006140:	bfde      	ittt	le
 8006142:	2330      	movle	r3, #48	; 0x30
 8006144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800614c:	1b52      	subs	r2, r2, r5
 800614e:	6122      	str	r2, [r4, #16]
 8006150:	f8cd a000 	str.w	sl, [sp]
 8006154:	464b      	mov	r3, r9
 8006156:	aa03      	add	r2, sp, #12
 8006158:	4621      	mov	r1, r4
 800615a:	4640      	mov	r0, r8
 800615c:	f7ff fee2 	bl	8005f24 <_printf_common>
 8006160:	3001      	adds	r0, #1
 8006162:	d14c      	bne.n	80061fe <_printf_i+0x1fe>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	b004      	add	sp, #16
 800616a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616e:	4835      	ldr	r0, [pc, #212]	; (8006244 <_printf_i+0x244>)
 8006170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f851 6b04 	ldr.w	r6, [r1], #4
 800617c:	6029      	str	r1, [r5, #0]
 800617e:	061d      	lsls	r5, r3, #24
 8006180:	d514      	bpl.n	80061ac <_printf_i+0x1ac>
 8006182:	07df      	lsls	r7, r3, #31
 8006184:	bf44      	itt	mi
 8006186:	f043 0320 	orrmi.w	r3, r3, #32
 800618a:	6023      	strmi	r3, [r4, #0]
 800618c:	b91e      	cbnz	r6, 8006196 <_printf_i+0x196>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f023 0320 	bic.w	r3, r3, #32
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	2310      	movs	r3, #16
 8006198:	e7b0      	b.n	80060fc <_printf_i+0xfc>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	f043 0320 	orr.w	r3, r3, #32
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	2378      	movs	r3, #120	; 0x78
 80061a4:	4828      	ldr	r0, [pc, #160]	; (8006248 <_printf_i+0x248>)
 80061a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061aa:	e7e3      	b.n	8006174 <_printf_i+0x174>
 80061ac:	0659      	lsls	r1, r3, #25
 80061ae:	bf48      	it	mi
 80061b0:	b2b6      	uxthmi	r6, r6
 80061b2:	e7e6      	b.n	8006182 <_printf_i+0x182>
 80061b4:	4615      	mov	r5, r2
 80061b6:	e7bb      	b.n	8006130 <_printf_i+0x130>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	6826      	ldr	r6, [r4, #0]
 80061bc:	6961      	ldr	r1, [r4, #20]
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6028      	str	r0, [r5, #0]
 80061c2:	0635      	lsls	r5, r6, #24
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0x1cc>
 80061c8:	6019      	str	r1, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <_printf_i+0x1d2>
 80061cc:	0670      	lsls	r0, r6, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0x1c8>
 80061d0:	8019      	strh	r1, [r3, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	4615      	mov	r5, r2
 80061d8:	e7ba      	b.n	8006150 <_printf_i+0x150>
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	602a      	str	r2, [r5, #0]
 80061e0:	681d      	ldr	r5, [r3, #0]
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	2100      	movs	r1, #0
 80061e6:	4628      	mov	r0, r5
 80061e8:	f7fa f87a 	bl	80002e0 <memchr>
 80061ec:	b108      	cbz	r0, 80061f2 <_printf_i+0x1f2>
 80061ee:	1b40      	subs	r0, r0, r5
 80061f0:	6060      	str	r0, [r4, #4]
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fc:	e7a8      	b.n	8006150 <_printf_i+0x150>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	462a      	mov	r2, r5
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d0ab      	beq.n	8006164 <_printf_i+0x164>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	079b      	lsls	r3, r3, #30
 8006210:	d413      	bmi.n	800623a <_printf_i+0x23a>
 8006212:	68e0      	ldr	r0, [r4, #12]
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	4298      	cmp	r0, r3
 8006218:	bfb8      	it	lt
 800621a:	4618      	movlt	r0, r3
 800621c:	e7a4      	b.n	8006168 <_printf_i+0x168>
 800621e:	2301      	movs	r3, #1
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d09b      	beq.n	8006164 <_printf_i+0x164>
 800622c:	3501      	adds	r5, #1
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	9903      	ldr	r1, [sp, #12]
 8006232:	1a5b      	subs	r3, r3, r1
 8006234:	42ab      	cmp	r3, r5
 8006236:	dcf2      	bgt.n	800621e <_printf_i+0x21e>
 8006238:	e7eb      	b.n	8006212 <_printf_i+0x212>
 800623a:	2500      	movs	r5, #0
 800623c:	f104 0619 	add.w	r6, r4, #25
 8006240:	e7f5      	b.n	800622e <_printf_i+0x22e>
 8006242:	bf00      	nop
 8006244:	0801c2c2 	.word	0x0801c2c2
 8006248:	0801c2d3 	.word	0x0801c2d3

0800624c <iprintf>:
 800624c:	b40f      	push	{r0, r1, r2, r3}
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <iprintf+0x2c>)
 8006250:	b513      	push	{r0, r1, r4, lr}
 8006252:	681c      	ldr	r4, [r3, #0]
 8006254:	b124      	cbz	r4, 8006260 <iprintf+0x14>
 8006256:	69a3      	ldr	r3, [r4, #24]
 8006258:	b913      	cbnz	r3, 8006260 <iprintf+0x14>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 ff02 	bl	8007064 <__sinit>
 8006260:	ab05      	add	r3, sp, #20
 8006262:	9a04      	ldr	r2, [sp, #16]
 8006264:	68a1      	ldr	r1, [r4, #8]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	4620      	mov	r0, r4
 800626a:	f001 fdb7 	bl	8007ddc <_vfiprintf_r>
 800626e:	b002      	add	sp, #8
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr
 8006278:	20000014 	.word	0x20000014

0800627c <siprintf>:
 800627c:	b40e      	push	{r1, r2, r3}
 800627e:	b500      	push	{lr}
 8006280:	b09c      	sub	sp, #112	; 0x70
 8006282:	ab1d      	add	r3, sp, #116	; 0x74
 8006284:	9002      	str	r0, [sp, #8]
 8006286:	9006      	str	r0, [sp, #24]
 8006288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800628c:	4809      	ldr	r0, [pc, #36]	; (80062b4 <siprintf+0x38>)
 800628e:	9107      	str	r1, [sp, #28]
 8006290:	9104      	str	r1, [sp, #16]
 8006292:	4909      	ldr	r1, [pc, #36]	; (80062b8 <siprintf+0x3c>)
 8006294:	f853 2b04 	ldr.w	r2, [r3], #4
 8006298:	9105      	str	r1, [sp, #20]
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	a902      	add	r1, sp, #8
 80062a0:	f001 fc72 	bl	8007b88 <_svfiprintf_r>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	b01c      	add	sp, #112	; 0x70
 80062ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b0:	b003      	add	sp, #12
 80062b2:	4770      	bx	lr
 80062b4:	20000014 	.word	0x20000014
 80062b8:	ffff0208 	.word	0xffff0208

080062bc <quorem>:
 80062bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	6903      	ldr	r3, [r0, #16]
 80062c2:	690c      	ldr	r4, [r1, #16]
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	4607      	mov	r7, r0
 80062c8:	f2c0 8081 	blt.w	80063ce <quorem+0x112>
 80062cc:	3c01      	subs	r4, #1
 80062ce:	f101 0814 	add.w	r8, r1, #20
 80062d2:	f100 0514 	add.w	r5, r0, #20
 80062d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e4:	3301      	adds	r3, #1
 80062e6:	429a      	cmp	r2, r3
 80062e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80062f4:	d331      	bcc.n	800635a <quorem+0x9e>
 80062f6:	f04f 0e00 	mov.w	lr, #0
 80062fa:	4640      	mov	r0, r8
 80062fc:	46ac      	mov	ip, r5
 80062fe:	46f2      	mov	sl, lr
 8006300:	f850 2b04 	ldr.w	r2, [r0], #4
 8006304:	b293      	uxth	r3, r2
 8006306:	fb06 e303 	mla	r3, r6, r3, lr
 800630a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800630e:	b29b      	uxth	r3, r3
 8006310:	ebaa 0303 	sub.w	r3, sl, r3
 8006314:	f8dc a000 	ldr.w	sl, [ip]
 8006318:	0c12      	lsrs	r2, r2, #16
 800631a:	fa13 f38a 	uxtah	r3, r3, sl
 800631e:	fb06 e202 	mla	r2, r6, r2, lr
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	9b00      	ldr	r3, [sp, #0]
 8006326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800632a:	b292      	uxth	r2, r2
 800632c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006334:	f8bd 3000 	ldrh.w	r3, [sp]
 8006338:	4581      	cmp	r9, r0
 800633a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800633e:	f84c 3b04 	str.w	r3, [ip], #4
 8006342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006346:	d2db      	bcs.n	8006300 <quorem+0x44>
 8006348:	f855 300b 	ldr.w	r3, [r5, fp]
 800634c:	b92b      	cbnz	r3, 800635a <quorem+0x9e>
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	3b04      	subs	r3, #4
 8006352:	429d      	cmp	r5, r3
 8006354:	461a      	mov	r2, r3
 8006356:	d32e      	bcc.n	80063b6 <quorem+0xfa>
 8006358:	613c      	str	r4, [r7, #16]
 800635a:	4638      	mov	r0, r7
 800635c:	f001 f9c0 	bl	80076e0 <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	db24      	blt.n	80063ae <quorem+0xf2>
 8006364:	3601      	adds	r6, #1
 8006366:	4628      	mov	r0, r5
 8006368:	f04f 0c00 	mov.w	ip, #0
 800636c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006370:	f8d0 e000 	ldr.w	lr, [r0]
 8006374:	b293      	uxth	r3, r2
 8006376:	ebac 0303 	sub.w	r3, ip, r3
 800637a:	0c12      	lsrs	r2, r2, #16
 800637c:	fa13 f38e 	uxtah	r3, r3, lr
 8006380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800638e:	45c1      	cmp	r9, r8
 8006390:	f840 3b04 	str.w	r3, [r0], #4
 8006394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006398:	d2e8      	bcs.n	800636c <quorem+0xb0>
 800639a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800639e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063a2:	b922      	cbnz	r2, 80063ae <quorem+0xf2>
 80063a4:	3b04      	subs	r3, #4
 80063a6:	429d      	cmp	r5, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	d30a      	bcc.n	80063c2 <quorem+0x106>
 80063ac:	613c      	str	r4, [r7, #16]
 80063ae:	4630      	mov	r0, r6
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	3b04      	subs	r3, #4
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d1cc      	bne.n	8006358 <quorem+0x9c>
 80063be:	3c01      	subs	r4, #1
 80063c0:	e7c7      	b.n	8006352 <quorem+0x96>
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	3b04      	subs	r3, #4
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	d1f0      	bne.n	80063ac <quorem+0xf0>
 80063ca:	3c01      	subs	r4, #1
 80063cc:	e7eb      	b.n	80063a6 <quorem+0xea>
 80063ce:	2000      	movs	r0, #0
 80063d0:	e7ee      	b.n	80063b0 <quorem+0xf4>
 80063d2:	0000      	movs	r0, r0
 80063d4:	0000      	movs	r0, r0
	...

080063d8 <_dtoa_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b04 	vpush	{d8-d9}
 80063e0:	ec57 6b10 	vmov	r6, r7, d0
 80063e4:	b093      	sub	sp, #76	; 0x4c
 80063e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063ec:	9106      	str	r1, [sp, #24]
 80063ee:	ee10 aa10 	vmov	sl, s0
 80063f2:	4604      	mov	r4, r0
 80063f4:	9209      	str	r2, [sp, #36]	; 0x24
 80063f6:	930c      	str	r3, [sp, #48]	; 0x30
 80063f8:	46bb      	mov	fp, r7
 80063fa:	b975      	cbnz	r5, 800641a <_dtoa_r+0x42>
 80063fc:	2010      	movs	r0, #16
 80063fe:	f000 fed7 	bl	80071b0 <malloc>
 8006402:	4602      	mov	r2, r0
 8006404:	6260      	str	r0, [r4, #36]	; 0x24
 8006406:	b920      	cbnz	r0, 8006412 <_dtoa_r+0x3a>
 8006408:	4ba7      	ldr	r3, [pc, #668]	; (80066a8 <_dtoa_r+0x2d0>)
 800640a:	21ea      	movs	r1, #234	; 0xea
 800640c:	48a7      	ldr	r0, [pc, #668]	; (80066ac <_dtoa_r+0x2d4>)
 800640e:	f001 ff3b 	bl	8008288 <__assert_func>
 8006412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006416:	6005      	str	r5, [r0, #0]
 8006418:	60c5      	str	r5, [r0, #12]
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	b151      	cbz	r1, 8006436 <_dtoa_r+0x5e>
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	604a      	str	r2, [r1, #4]
 8006424:	2301      	movs	r3, #1
 8006426:	4093      	lsls	r3, r2
 8006428:	608b      	str	r3, [r1, #8]
 800642a:	4620      	mov	r0, r4
 800642c:	f000 ff16 	bl	800725c <_Bfree>
 8006430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	1e3b      	subs	r3, r7, #0
 8006438:	bfaa      	itet	ge
 800643a:	2300      	movge	r3, #0
 800643c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006440:	f8c8 3000 	strge.w	r3, [r8]
 8006444:	4b9a      	ldr	r3, [pc, #616]	; (80066b0 <_dtoa_r+0x2d8>)
 8006446:	bfbc      	itt	lt
 8006448:	2201      	movlt	r2, #1
 800644a:	f8c8 2000 	strlt.w	r2, [r8]
 800644e:	ea33 030b 	bics.w	r3, r3, fp
 8006452:	d11b      	bne.n	800648c <_dtoa_r+0xb4>
 8006454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006456:	f242 730f 	movw	r3, #9999	; 0x270f
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006460:	4333      	orrs	r3, r6
 8006462:	f000 8592 	beq.w	8006f8a <_dtoa_r+0xbb2>
 8006466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006468:	b963      	cbnz	r3, 8006484 <_dtoa_r+0xac>
 800646a:	4b92      	ldr	r3, [pc, #584]	; (80066b4 <_dtoa_r+0x2dc>)
 800646c:	e022      	b.n	80064b4 <_dtoa_r+0xdc>
 800646e:	4b92      	ldr	r3, [pc, #584]	; (80066b8 <_dtoa_r+0x2e0>)
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	3308      	adds	r3, #8
 8006474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	9801      	ldr	r0, [sp, #4]
 800647a:	b013      	add	sp, #76	; 0x4c
 800647c:	ecbd 8b04 	vpop	{d8-d9}
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	4b8b      	ldr	r3, [pc, #556]	; (80066b4 <_dtoa_r+0x2dc>)
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	3303      	adds	r3, #3
 800648a:	e7f3      	b.n	8006474 <_dtoa_r+0x9c>
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	f7fa fb98 	bl	8000bc8 <__aeabi_dcmpeq>
 8006498:	ec4b ab19 	vmov	d9, sl, fp
 800649c:	4680      	mov	r8, r0
 800649e:	b158      	cbz	r0, 80064b8 <_dtoa_r+0xe0>
 80064a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a2:	2301      	movs	r3, #1
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 856b 	beq.w	8006f84 <_dtoa_r+0xbac>
 80064ae:	4883      	ldr	r0, [pc, #524]	; (80066bc <_dtoa_r+0x2e4>)
 80064b0:	6018      	str	r0, [r3, #0]
 80064b2:	1e43      	subs	r3, r0, #1
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	e7df      	b.n	8006478 <_dtoa_r+0xa0>
 80064b8:	ec4b ab10 	vmov	d0, sl, fp
 80064bc:	aa10      	add	r2, sp, #64	; 0x40
 80064be:	a911      	add	r1, sp, #68	; 0x44
 80064c0:	4620      	mov	r0, r4
 80064c2:	f001 f9b3 	bl	800782c <__d2b>
 80064c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064ca:	ee08 0a10 	vmov	s16, r0
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	f000 8084 	beq.w	80065dc <_dtoa_r+0x204>
 80064d4:	ee19 3a90 	vmov	r3, s19
 80064d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064e0:	4656      	mov	r6, sl
 80064e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064ee:	4b74      	ldr	r3, [pc, #464]	; (80066c0 <_dtoa_r+0x2e8>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	4630      	mov	r0, r6
 80064f4:	4639      	mov	r1, r7
 80064f6:	f7f9 ff47 	bl	8000388 <__aeabi_dsub>
 80064fa:	a365      	add	r3, pc, #404	; (adr r3, 8006690 <_dtoa_r+0x2b8>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7fa f8fa 	bl	80006f8 <__aeabi_dmul>
 8006504:	a364      	add	r3, pc, #400	; (adr r3, 8006698 <_dtoa_r+0x2c0>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7f9 ff3f 	bl	800038c <__adddf3>
 800650e:	4606      	mov	r6, r0
 8006510:	4628      	mov	r0, r5
 8006512:	460f      	mov	r7, r1
 8006514:	f7fa f886 	bl	8000624 <__aeabi_i2d>
 8006518:	a361      	add	r3, pc, #388	; (adr r3, 80066a0 <_dtoa_r+0x2c8>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f8eb 	bl	80006f8 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f7f9 ff2f 	bl	800038c <__adddf3>
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	f7fa fb91 	bl	8000c58 <__aeabi_d2iz>
 8006536:	2200      	movs	r2, #0
 8006538:	9000      	str	r0, [sp, #0]
 800653a:	2300      	movs	r3, #0
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fb4c 	bl	8000bdc <__aeabi_dcmplt>
 8006544:	b150      	cbz	r0, 800655c <_dtoa_r+0x184>
 8006546:	9800      	ldr	r0, [sp, #0]
 8006548:	f7fa f86c 	bl	8000624 <__aeabi_i2d>
 800654c:	4632      	mov	r2, r6
 800654e:	463b      	mov	r3, r7
 8006550:	f7fa fb3a 	bl	8000bc8 <__aeabi_dcmpeq>
 8006554:	b910      	cbnz	r0, 800655c <_dtoa_r+0x184>
 8006556:	9b00      	ldr	r3, [sp, #0]
 8006558:	3b01      	subs	r3, #1
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	9b00      	ldr	r3, [sp, #0]
 800655e:	2b16      	cmp	r3, #22
 8006560:	d85a      	bhi.n	8006618 <_dtoa_r+0x240>
 8006562:	9a00      	ldr	r2, [sp, #0]
 8006564:	4b57      	ldr	r3, [pc, #348]	; (80066c4 <_dtoa_r+0x2ec>)
 8006566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	ec51 0b19 	vmov	r0, r1, d9
 8006572:	f7fa fb33 	bl	8000bdc <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d050      	beq.n	800661c <_dtoa_r+0x244>
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	3b01      	subs	r3, #1
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	2300      	movs	r3, #0
 8006582:	930b      	str	r3, [sp, #44]	; 0x2c
 8006584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006586:	1b5d      	subs	r5, r3, r5
 8006588:	1e6b      	subs	r3, r5, #1
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	bf45      	ittet	mi
 800658e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006592:	9304      	strmi	r3, [sp, #16]
 8006594:	2300      	movpl	r3, #0
 8006596:	2300      	movmi	r3, #0
 8006598:	bf4c      	ite	mi
 800659a:	9305      	strmi	r3, [sp, #20]
 800659c:	9304      	strpl	r3, [sp, #16]
 800659e:	9b00      	ldr	r3, [sp, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db3d      	blt.n	8006620 <_dtoa_r+0x248>
 80065a4:	9b05      	ldr	r3, [sp, #20]
 80065a6:	9a00      	ldr	r2, [sp, #0]
 80065a8:	920a      	str	r2, [sp, #40]	; 0x28
 80065aa:	4413      	add	r3, r2
 80065ac:	9305      	str	r3, [sp, #20]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9307      	str	r3, [sp, #28]
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	f200 8089 	bhi.w	80066cc <_dtoa_r+0x2f4>
 80065ba:	2b05      	cmp	r3, #5
 80065bc:	bfc4      	itt	gt
 80065be:	3b04      	subgt	r3, #4
 80065c0:	9306      	strgt	r3, [sp, #24]
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	f1a3 0302 	sub.w	r3, r3, #2
 80065c8:	bfcc      	ite	gt
 80065ca:	2500      	movgt	r5, #0
 80065cc:	2501      	movle	r5, #1
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	f200 8087 	bhi.w	80066e2 <_dtoa_r+0x30a>
 80065d4:	e8df f003 	tbb	[pc, r3]
 80065d8:	59383a2d 	.word	0x59383a2d
 80065dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065e0:	441d      	add	r5, r3
 80065e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	bfc1      	itttt	gt
 80065ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80065f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065fa:	bfda      	itte	le
 80065fc:	f1c3 0320 	rsble	r3, r3, #32
 8006600:	fa06 f003 	lslle.w	r0, r6, r3
 8006604:	4318      	orrgt	r0, r3
 8006606:	f7f9 fffd 	bl	8000604 <__aeabi_ui2d>
 800660a:	2301      	movs	r3, #1
 800660c:	4606      	mov	r6, r0
 800660e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006612:	3d01      	subs	r5, #1
 8006614:	930e      	str	r3, [sp, #56]	; 0x38
 8006616:	e76a      	b.n	80064ee <_dtoa_r+0x116>
 8006618:	2301      	movs	r3, #1
 800661a:	e7b2      	b.n	8006582 <_dtoa_r+0x1aa>
 800661c:	900b      	str	r0, [sp, #44]	; 0x2c
 800661e:	e7b1      	b.n	8006584 <_dtoa_r+0x1ac>
 8006620:	9b04      	ldr	r3, [sp, #16]
 8006622:	9a00      	ldr	r2, [sp, #0]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	4253      	negs	r3, r2
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	2300      	movs	r3, #0
 800662e:	930a      	str	r3, [sp, #40]	; 0x28
 8006630:	e7bf      	b.n	80065b2 <_dtoa_r+0x1da>
 8006632:	2300      	movs	r3, #0
 8006634:	9308      	str	r3, [sp, #32]
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc55      	bgt.n	80066e8 <_dtoa_r+0x310>
 800663c:	2301      	movs	r3, #1
 800663e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006642:	461a      	mov	r2, r3
 8006644:	9209      	str	r2, [sp, #36]	; 0x24
 8006646:	e00c      	b.n	8006662 <_dtoa_r+0x28a>
 8006648:	2301      	movs	r3, #1
 800664a:	e7f3      	b.n	8006634 <_dtoa_r+0x25c>
 800664c:	2300      	movs	r3, #0
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	9308      	str	r3, [sp, #32]
 8006652:	9b00      	ldr	r3, [sp, #0]
 8006654:	4413      	add	r3, r2
 8006656:	9302      	str	r3, [sp, #8]
 8006658:	3301      	adds	r3, #1
 800665a:	2b01      	cmp	r3, #1
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	bfb8      	it	lt
 8006660:	2301      	movlt	r3, #1
 8006662:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006664:	2200      	movs	r2, #0
 8006666:	6042      	str	r2, [r0, #4]
 8006668:	2204      	movs	r2, #4
 800666a:	f102 0614 	add.w	r6, r2, #20
 800666e:	429e      	cmp	r6, r3
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	d93d      	bls.n	80066f0 <_dtoa_r+0x318>
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fdb1 	bl	80071dc <_Balloc>
 800667a:	9001      	str	r0, [sp, #4]
 800667c:	2800      	cmp	r0, #0
 800667e:	d13b      	bne.n	80066f8 <_dtoa_r+0x320>
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <_dtoa_r+0x2f0>)
 8006682:	4602      	mov	r2, r0
 8006684:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006688:	e6c0      	b.n	800640c <_dtoa_r+0x34>
 800668a:	2301      	movs	r3, #1
 800668c:	e7df      	b.n	800664e <_dtoa_r+0x276>
 800668e:	bf00      	nop
 8006690:	636f4361 	.word	0x636f4361
 8006694:	3fd287a7 	.word	0x3fd287a7
 8006698:	8b60c8b3 	.word	0x8b60c8b3
 800669c:	3fc68a28 	.word	0x3fc68a28
 80066a0:	509f79fb 	.word	0x509f79fb
 80066a4:	3fd34413 	.word	0x3fd34413
 80066a8:	0801c2f1 	.word	0x0801c2f1
 80066ac:	0801c308 	.word	0x0801c308
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	0801c2ed 	.word	0x0801c2ed
 80066b8:	0801c2e4 	.word	0x0801c2e4
 80066bc:	0801c2c1 	.word	0x0801c2c1
 80066c0:	3ff80000 	.word	0x3ff80000
 80066c4:	0801c458 	.word	0x0801c458
 80066c8:	0801c363 	.word	0x0801c363
 80066cc:	2501      	movs	r5, #1
 80066ce:	2300      	movs	r3, #0
 80066d0:	9306      	str	r3, [sp, #24]
 80066d2:	9508      	str	r5, [sp, #32]
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	2312      	movs	r3, #18
 80066e0:	e7b0      	b.n	8006644 <_dtoa_r+0x26c>
 80066e2:	2301      	movs	r3, #1
 80066e4:	9308      	str	r3, [sp, #32]
 80066e6:	e7f5      	b.n	80066d4 <_dtoa_r+0x2fc>
 80066e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066ee:	e7b8      	b.n	8006662 <_dtoa_r+0x28a>
 80066f0:	3101      	adds	r1, #1
 80066f2:	6041      	str	r1, [r0, #4]
 80066f4:	0052      	lsls	r2, r2, #1
 80066f6:	e7b8      	b.n	800666a <_dtoa_r+0x292>
 80066f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066fa:	9a01      	ldr	r2, [sp, #4]
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	2b0e      	cmp	r3, #14
 8006702:	f200 809d 	bhi.w	8006840 <_dtoa_r+0x468>
 8006706:	2d00      	cmp	r5, #0
 8006708:	f000 809a 	beq.w	8006840 <_dtoa_r+0x468>
 800670c:	9b00      	ldr	r3, [sp, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	dd32      	ble.n	8006778 <_dtoa_r+0x3a0>
 8006712:	4ab7      	ldr	r2, [pc, #732]	; (80069f0 <_dtoa_r+0x618>)
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800671c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006720:	9b00      	ldr	r3, [sp, #0]
 8006722:	05d8      	lsls	r0, r3, #23
 8006724:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006728:	d516      	bpl.n	8006758 <_dtoa_r+0x380>
 800672a:	4bb2      	ldr	r3, [pc, #712]	; (80069f4 <_dtoa_r+0x61c>)
 800672c:	ec51 0b19 	vmov	r0, r1, d9
 8006730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006734:	f7fa f90a 	bl	800094c <__aeabi_ddiv>
 8006738:	f007 070f 	and.w	r7, r7, #15
 800673c:	4682      	mov	sl, r0
 800673e:	468b      	mov	fp, r1
 8006740:	2503      	movs	r5, #3
 8006742:	4eac      	ldr	r6, [pc, #688]	; (80069f4 <_dtoa_r+0x61c>)
 8006744:	b957      	cbnz	r7, 800675c <_dtoa_r+0x384>
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	f7fa f8fd 	bl	800094c <__aeabi_ddiv>
 8006752:	4682      	mov	sl, r0
 8006754:	468b      	mov	fp, r1
 8006756:	e028      	b.n	80067aa <_dtoa_r+0x3d2>
 8006758:	2502      	movs	r5, #2
 800675a:	e7f2      	b.n	8006742 <_dtoa_r+0x36a>
 800675c:	07f9      	lsls	r1, r7, #31
 800675e:	d508      	bpl.n	8006772 <_dtoa_r+0x39a>
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006768:	f7f9 ffc6 	bl	80006f8 <__aeabi_dmul>
 800676c:	3501      	adds	r5, #1
 800676e:	4680      	mov	r8, r0
 8006770:	4689      	mov	r9, r1
 8006772:	107f      	asrs	r7, r7, #1
 8006774:	3608      	adds	r6, #8
 8006776:	e7e5      	b.n	8006744 <_dtoa_r+0x36c>
 8006778:	f000 809b 	beq.w	80068b2 <_dtoa_r+0x4da>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	4f9d      	ldr	r7, [pc, #628]	; (80069f4 <_dtoa_r+0x61c>)
 8006780:	425e      	negs	r6, r3
 8006782:	4b9b      	ldr	r3, [pc, #620]	; (80069f0 <_dtoa_r+0x618>)
 8006784:	f006 020f 	and.w	r2, r6, #15
 8006788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	ec51 0b19 	vmov	r0, r1, d9
 8006794:	f7f9 ffb0 	bl	80006f8 <__aeabi_dmul>
 8006798:	1136      	asrs	r6, r6, #4
 800679a:	4682      	mov	sl, r0
 800679c:	468b      	mov	fp, r1
 800679e:	2300      	movs	r3, #0
 80067a0:	2502      	movs	r5, #2
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	d17a      	bne.n	800689c <_dtoa_r+0x4c4>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1d3      	bne.n	8006752 <_dtoa_r+0x37a>
 80067aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8082 	beq.w	80068b6 <_dtoa_r+0x4de>
 80067b2:	4b91      	ldr	r3, [pc, #580]	; (80069f8 <_dtoa_r+0x620>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	4650      	mov	r0, sl
 80067b8:	4659      	mov	r1, fp
 80067ba:	f7fa fa0f 	bl	8000bdc <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d079      	beq.n	80068b6 <_dtoa_r+0x4de>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d076      	beq.n	80068b6 <_dtoa_r+0x4de>
 80067c8:	9b02      	ldr	r3, [sp, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	dd36      	ble.n	800683c <_dtoa_r+0x464>
 80067ce:	9b00      	ldr	r3, [sp, #0]
 80067d0:	4650      	mov	r0, sl
 80067d2:	4659      	mov	r1, fp
 80067d4:	1e5f      	subs	r7, r3, #1
 80067d6:	2200      	movs	r2, #0
 80067d8:	4b88      	ldr	r3, [pc, #544]	; (80069fc <_dtoa_r+0x624>)
 80067da:	f7f9 ff8d 	bl	80006f8 <__aeabi_dmul>
 80067de:	9e02      	ldr	r6, [sp, #8]
 80067e0:	4682      	mov	sl, r0
 80067e2:	468b      	mov	fp, r1
 80067e4:	3501      	adds	r5, #1
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7f9 ff1c 	bl	8000624 <__aeabi_i2d>
 80067ec:	4652      	mov	r2, sl
 80067ee:	465b      	mov	r3, fp
 80067f0:	f7f9 ff82 	bl	80006f8 <__aeabi_dmul>
 80067f4:	4b82      	ldr	r3, [pc, #520]	; (8006a00 <_dtoa_r+0x628>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	f7f9 fdc8 	bl	800038c <__adddf3>
 80067fc:	46d0      	mov	r8, sl
 80067fe:	46d9      	mov	r9, fp
 8006800:	4682      	mov	sl, r0
 8006802:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006806:	2e00      	cmp	r6, #0
 8006808:	d158      	bne.n	80068bc <_dtoa_r+0x4e4>
 800680a:	4b7e      	ldr	r3, [pc, #504]	; (8006a04 <_dtoa_r+0x62c>)
 800680c:	2200      	movs	r2, #0
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7f9 fdb9 	bl	8000388 <__aeabi_dsub>
 8006816:	4652      	mov	r2, sl
 8006818:	465b      	mov	r3, fp
 800681a:	4680      	mov	r8, r0
 800681c:	4689      	mov	r9, r1
 800681e:	f7fa f9fb 	bl	8000c18 <__aeabi_dcmpgt>
 8006822:	2800      	cmp	r0, #0
 8006824:	f040 8295 	bne.w	8006d52 <_dtoa_r+0x97a>
 8006828:	4652      	mov	r2, sl
 800682a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800682e:	4640      	mov	r0, r8
 8006830:	4649      	mov	r1, r9
 8006832:	f7fa f9d3 	bl	8000bdc <__aeabi_dcmplt>
 8006836:	2800      	cmp	r0, #0
 8006838:	f040 8289 	bne.w	8006d4e <_dtoa_r+0x976>
 800683c:	ec5b ab19 	vmov	sl, fp, d9
 8006840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006842:	2b00      	cmp	r3, #0
 8006844:	f2c0 8148 	blt.w	8006ad8 <_dtoa_r+0x700>
 8006848:	9a00      	ldr	r2, [sp, #0]
 800684a:	2a0e      	cmp	r2, #14
 800684c:	f300 8144 	bgt.w	8006ad8 <_dtoa_r+0x700>
 8006850:	4b67      	ldr	r3, [pc, #412]	; (80069f0 <_dtoa_r+0x618>)
 8006852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006856:	e9d3 8900 	ldrd	r8, r9, [r3]
 800685a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	f280 80d5 	bge.w	8006a0c <_dtoa_r+0x634>
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f300 80d1 	bgt.w	8006a0c <_dtoa_r+0x634>
 800686a:	f040 826f 	bne.w	8006d4c <_dtoa_r+0x974>
 800686e:	4b65      	ldr	r3, [pc, #404]	; (8006a04 <_dtoa_r+0x62c>)
 8006870:	2200      	movs	r2, #0
 8006872:	4640      	mov	r0, r8
 8006874:	4649      	mov	r1, r9
 8006876:	f7f9 ff3f 	bl	80006f8 <__aeabi_dmul>
 800687a:	4652      	mov	r2, sl
 800687c:	465b      	mov	r3, fp
 800687e:	f7fa f9c1 	bl	8000c04 <__aeabi_dcmpge>
 8006882:	9e03      	ldr	r6, [sp, #12]
 8006884:	4637      	mov	r7, r6
 8006886:	2800      	cmp	r0, #0
 8006888:	f040 8245 	bne.w	8006d16 <_dtoa_r+0x93e>
 800688c:	9d01      	ldr	r5, [sp, #4]
 800688e:	2331      	movs	r3, #49	; 0x31
 8006890:	f805 3b01 	strb.w	r3, [r5], #1
 8006894:	9b00      	ldr	r3, [sp, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	e240      	b.n	8006d1e <_dtoa_r+0x946>
 800689c:	07f2      	lsls	r2, r6, #31
 800689e:	d505      	bpl.n	80068ac <_dtoa_r+0x4d4>
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	f7f9 ff28 	bl	80006f8 <__aeabi_dmul>
 80068a8:	3501      	adds	r5, #1
 80068aa:	2301      	movs	r3, #1
 80068ac:	1076      	asrs	r6, r6, #1
 80068ae:	3708      	adds	r7, #8
 80068b0:	e777      	b.n	80067a2 <_dtoa_r+0x3ca>
 80068b2:	2502      	movs	r5, #2
 80068b4:	e779      	b.n	80067aa <_dtoa_r+0x3d2>
 80068b6:	9f00      	ldr	r7, [sp, #0]
 80068b8:	9e03      	ldr	r6, [sp, #12]
 80068ba:	e794      	b.n	80067e6 <_dtoa_r+0x40e>
 80068bc:	9901      	ldr	r1, [sp, #4]
 80068be:	4b4c      	ldr	r3, [pc, #304]	; (80069f0 <_dtoa_r+0x618>)
 80068c0:	4431      	add	r1, r6
 80068c2:	910d      	str	r1, [sp, #52]	; 0x34
 80068c4:	9908      	ldr	r1, [sp, #32]
 80068c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068ce:	2900      	cmp	r1, #0
 80068d0:	d043      	beq.n	800695a <_dtoa_r+0x582>
 80068d2:	494d      	ldr	r1, [pc, #308]	; (8006a08 <_dtoa_r+0x630>)
 80068d4:	2000      	movs	r0, #0
 80068d6:	f7fa f839 	bl	800094c <__aeabi_ddiv>
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	f7f9 fd53 	bl	8000388 <__aeabi_dsub>
 80068e2:	9d01      	ldr	r5, [sp, #4]
 80068e4:	4682      	mov	sl, r0
 80068e6:	468b      	mov	fp, r1
 80068e8:	4649      	mov	r1, r9
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7fa f9b4 	bl	8000c58 <__aeabi_d2iz>
 80068f0:	4606      	mov	r6, r0
 80068f2:	f7f9 fe97 	bl	8000624 <__aeabi_i2d>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fd43 	bl	8000388 <__aeabi_dsub>
 8006902:	3630      	adds	r6, #48	; 0x30
 8006904:	f805 6b01 	strb.w	r6, [r5], #1
 8006908:	4652      	mov	r2, sl
 800690a:	465b      	mov	r3, fp
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	f7fa f964 	bl	8000bdc <__aeabi_dcmplt>
 8006914:	2800      	cmp	r0, #0
 8006916:	d163      	bne.n	80069e0 <_dtoa_r+0x608>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	4936      	ldr	r1, [pc, #216]	; (80069f8 <_dtoa_r+0x620>)
 800691e:	2000      	movs	r0, #0
 8006920:	f7f9 fd32 	bl	8000388 <__aeabi_dsub>
 8006924:	4652      	mov	r2, sl
 8006926:	465b      	mov	r3, fp
 8006928:	f7fa f958 	bl	8000bdc <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	f040 80b5 	bne.w	8006a9c <_dtoa_r+0x6c4>
 8006932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006934:	429d      	cmp	r5, r3
 8006936:	d081      	beq.n	800683c <_dtoa_r+0x464>
 8006938:	4b30      	ldr	r3, [pc, #192]	; (80069fc <_dtoa_r+0x624>)
 800693a:	2200      	movs	r2, #0
 800693c:	4650      	mov	r0, sl
 800693e:	4659      	mov	r1, fp
 8006940:	f7f9 feda 	bl	80006f8 <__aeabi_dmul>
 8006944:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <_dtoa_r+0x624>)
 8006946:	4682      	mov	sl, r0
 8006948:	468b      	mov	fp, r1
 800694a:	4640      	mov	r0, r8
 800694c:	4649      	mov	r1, r9
 800694e:	2200      	movs	r2, #0
 8006950:	f7f9 fed2 	bl	80006f8 <__aeabi_dmul>
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	e7c6      	b.n	80068e8 <_dtoa_r+0x510>
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	f7f9 fecb 	bl	80006f8 <__aeabi_dmul>
 8006962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006964:	9d01      	ldr	r5, [sp, #4]
 8006966:	930f      	str	r3, [sp, #60]	; 0x3c
 8006968:	4682      	mov	sl, r0
 800696a:	468b      	mov	fp, r1
 800696c:	4649      	mov	r1, r9
 800696e:	4640      	mov	r0, r8
 8006970:	f7fa f972 	bl	8000c58 <__aeabi_d2iz>
 8006974:	4606      	mov	r6, r0
 8006976:	f7f9 fe55 	bl	8000624 <__aeabi_i2d>
 800697a:	3630      	adds	r6, #48	; 0x30
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7f9 fd00 	bl	8000388 <__aeabi_dsub>
 8006988:	f805 6b01 	strb.w	r6, [r5], #1
 800698c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800698e:	429d      	cmp	r5, r3
 8006990:	4680      	mov	r8, r0
 8006992:	4689      	mov	r9, r1
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	d124      	bne.n	80069e4 <_dtoa_r+0x60c>
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <_dtoa_r+0x630>)
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fcf4 	bl	800038c <__adddf3>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7fa f934 	bl	8000c18 <__aeabi_dcmpgt>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d173      	bne.n	8006a9c <_dtoa_r+0x6c4>
 80069b4:	4652      	mov	r2, sl
 80069b6:	465b      	mov	r3, fp
 80069b8:	4913      	ldr	r1, [pc, #76]	; (8006a08 <_dtoa_r+0x630>)
 80069ba:	2000      	movs	r0, #0
 80069bc:	f7f9 fce4 	bl	8000388 <__aeabi_dsub>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4640      	mov	r0, r8
 80069c6:	4649      	mov	r1, r9
 80069c8:	f7fa f908 	bl	8000bdc <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f43f af35 	beq.w	800683c <_dtoa_r+0x464>
 80069d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069d4:	1e6b      	subs	r3, r5, #1
 80069d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069dc:	2b30      	cmp	r3, #48	; 0x30
 80069de:	d0f8      	beq.n	80069d2 <_dtoa_r+0x5fa>
 80069e0:	9700      	str	r7, [sp, #0]
 80069e2:	e049      	b.n	8006a78 <_dtoa_r+0x6a0>
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <_dtoa_r+0x624>)
 80069e6:	f7f9 fe87 	bl	80006f8 <__aeabi_dmul>
 80069ea:	4680      	mov	r8, r0
 80069ec:	4689      	mov	r9, r1
 80069ee:	e7bd      	b.n	800696c <_dtoa_r+0x594>
 80069f0:	0801c458 	.word	0x0801c458
 80069f4:	0801c430 	.word	0x0801c430
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	40240000 	.word	0x40240000
 8006a00:	401c0000 	.word	0x401c0000
 8006a04:	40140000 	.word	0x40140000
 8006a08:	3fe00000 	.word	0x3fe00000
 8006a0c:	9d01      	ldr	r5, [sp, #4]
 8006a0e:	4656      	mov	r6, sl
 8006a10:	465f      	mov	r7, fp
 8006a12:	4642      	mov	r2, r8
 8006a14:	464b      	mov	r3, r9
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 ff97 	bl	800094c <__aeabi_ddiv>
 8006a1e:	f7fa f91b 	bl	8000c58 <__aeabi_d2iz>
 8006a22:	4682      	mov	sl, r0
 8006a24:	f7f9 fdfe 	bl	8000624 <__aeabi_i2d>
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	f7f9 fe64 	bl	80006f8 <__aeabi_dmul>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a3c:	f7f9 fca4 	bl	8000388 <__aeabi_dsub>
 8006a40:	f805 6b01 	strb.w	r6, [r5], #1
 8006a44:	9e01      	ldr	r6, [sp, #4]
 8006a46:	9f03      	ldr	r7, [sp, #12]
 8006a48:	1bae      	subs	r6, r5, r6
 8006a4a:	42b7      	cmp	r7, r6
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	d135      	bne.n	8006abe <_dtoa_r+0x6e6>
 8006a52:	f7f9 fc9b 	bl	800038c <__adddf3>
 8006a56:	4642      	mov	r2, r8
 8006a58:	464b      	mov	r3, r9
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	f7fa f8db 	bl	8000c18 <__aeabi_dcmpgt>
 8006a62:	b9d0      	cbnz	r0, 8006a9a <_dtoa_r+0x6c2>
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7fa f8ac 	bl	8000bc8 <__aeabi_dcmpeq>
 8006a70:	b110      	cbz	r0, 8006a78 <_dtoa_r+0x6a0>
 8006a72:	f01a 0f01 	tst.w	sl, #1
 8006a76:	d110      	bne.n	8006a9a <_dtoa_r+0x6c2>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	ee18 1a10 	vmov	r1, s16
 8006a7e:	f000 fbed 	bl	800725c <_Bfree>
 8006a82:	2300      	movs	r3, #0
 8006a84:	9800      	ldr	r0, [sp, #0]
 8006a86:	702b      	strb	r3, [r5, #0]
 8006a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	6018      	str	r0, [r3, #0]
 8006a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f43f acf1 	beq.w	8006478 <_dtoa_r+0xa0>
 8006a96:	601d      	str	r5, [r3, #0]
 8006a98:	e4ee      	b.n	8006478 <_dtoa_r+0xa0>
 8006a9a:	9f00      	ldr	r7, [sp, #0]
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa4:	2a39      	cmp	r2, #57	; 0x39
 8006aa6:	d106      	bne.n	8006ab6 <_dtoa_r+0x6de>
 8006aa8:	9a01      	ldr	r2, [sp, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d1f7      	bne.n	8006a9e <_dtoa_r+0x6c6>
 8006aae:	9901      	ldr	r1, [sp, #4]
 8006ab0:	2230      	movs	r2, #48	; 0x30
 8006ab2:	3701      	adds	r7, #1
 8006ab4:	700a      	strb	r2, [r1, #0]
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	3201      	adds	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e790      	b.n	80069e0 <_dtoa_r+0x608>
 8006abe:	4ba6      	ldr	r3, [pc, #664]	; (8006d58 <_dtoa_r+0x980>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f7f9 fe19 	bl	80006f8 <__aeabi_dmul>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4606      	mov	r6, r0
 8006acc:	460f      	mov	r7, r1
 8006ace:	f7fa f87b 	bl	8000bc8 <__aeabi_dcmpeq>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d09d      	beq.n	8006a12 <_dtoa_r+0x63a>
 8006ad6:	e7cf      	b.n	8006a78 <_dtoa_r+0x6a0>
 8006ad8:	9a08      	ldr	r2, [sp, #32]
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	f000 80d7 	beq.w	8006c8e <_dtoa_r+0x8b6>
 8006ae0:	9a06      	ldr	r2, [sp, #24]
 8006ae2:	2a01      	cmp	r2, #1
 8006ae4:	f300 80ba 	bgt.w	8006c5c <_dtoa_r+0x884>
 8006ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	f000 80b2 	beq.w	8006c54 <_dtoa_r+0x87c>
 8006af0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006af4:	9e07      	ldr	r6, [sp, #28]
 8006af6:	9d04      	ldr	r5, [sp, #16]
 8006af8:	9a04      	ldr	r2, [sp, #16]
 8006afa:	441a      	add	r2, r3
 8006afc:	9204      	str	r2, [sp, #16]
 8006afe:	9a05      	ldr	r2, [sp, #20]
 8006b00:	2101      	movs	r1, #1
 8006b02:	441a      	add	r2, r3
 8006b04:	4620      	mov	r0, r4
 8006b06:	9205      	str	r2, [sp, #20]
 8006b08:	f000 fc60 	bl	80073cc <__i2b>
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	dd0c      	ble.n	8006b2c <_dtoa_r+0x754>
 8006b12:	9b05      	ldr	r3, [sp, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dd09      	ble.n	8006b2c <_dtoa_r+0x754>
 8006b18:	42ab      	cmp	r3, r5
 8006b1a:	9a04      	ldr	r2, [sp, #16]
 8006b1c:	bfa8      	it	ge
 8006b1e:	462b      	movge	r3, r5
 8006b20:	1ad2      	subs	r2, r2, r3
 8006b22:	9204      	str	r2, [sp, #16]
 8006b24:	9a05      	ldr	r2, [sp, #20]
 8006b26:	1aed      	subs	r5, r5, r3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	9305      	str	r3, [sp, #20]
 8006b2c:	9b07      	ldr	r3, [sp, #28]
 8006b2e:	b31b      	cbz	r3, 8006b78 <_dtoa_r+0x7a0>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80af 	beq.w	8006c96 <_dtoa_r+0x8be>
 8006b38:	2e00      	cmp	r6, #0
 8006b3a:	dd13      	ble.n	8006b64 <_dtoa_r+0x78c>
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4632      	mov	r2, r6
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fd03 	bl	800754c <__pow5mult>
 8006b46:	ee18 2a10 	vmov	r2, s16
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 fc52 	bl	80073f8 <__multiply>
 8006b54:	ee18 1a10 	vmov	r1, s16
 8006b58:	4680      	mov	r8, r0
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fb7e 	bl	800725c <_Bfree>
 8006b60:	ee08 8a10 	vmov	s16, r8
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	1b9a      	subs	r2, r3, r6
 8006b68:	d006      	beq.n	8006b78 <_dtoa_r+0x7a0>
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fcec 	bl	800754c <__pow5mult>
 8006b74:	ee08 0a10 	vmov	s16, r0
 8006b78:	2101      	movs	r1, #1
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fc26 	bl	80073cc <__i2b>
 8006b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	4606      	mov	r6, r0
 8006b86:	f340 8088 	ble.w	8006c9a <_dtoa_r+0x8c2>
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fcdc 	bl	800754c <__pow5mult>
 8006b94:	9b06      	ldr	r3, [sp, #24]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	4606      	mov	r6, r0
 8006b9a:	f340 8081 	ble.w	8006ca0 <_dtoa_r+0x8c8>
 8006b9e:	f04f 0800 	mov.w	r8, #0
 8006ba2:	6933      	ldr	r3, [r6, #16]
 8006ba4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ba8:	6918      	ldr	r0, [r3, #16]
 8006baa:	f000 fbbf 	bl	800732c <__hi0bits>
 8006bae:	f1c0 0020 	rsb	r0, r0, #32
 8006bb2:	9b05      	ldr	r3, [sp, #20]
 8006bb4:	4418      	add	r0, r3
 8006bb6:	f010 001f 	ands.w	r0, r0, #31
 8006bba:	f000 8092 	beq.w	8006ce2 <_dtoa_r+0x90a>
 8006bbe:	f1c0 0320 	rsb	r3, r0, #32
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	f340 808a 	ble.w	8006cdc <_dtoa_r+0x904>
 8006bc8:	f1c0 001c 	rsb	r0, r0, #28
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	4403      	add	r3, r0
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	4403      	add	r3, r0
 8006bd6:	4405      	add	r5, r0
 8006bd8:	9305      	str	r3, [sp, #20]
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dd07      	ble.n	8006bf0 <_dtoa_r+0x818>
 8006be0:	ee18 1a10 	vmov	r1, s16
 8006be4:	461a      	mov	r2, r3
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fd0a 	bl	8007600 <__lshift>
 8006bec:	ee08 0a10 	vmov	s16, r0
 8006bf0:	9b05      	ldr	r3, [sp, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd05      	ble.n	8006c02 <_dtoa_r+0x82a>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fd00 	bl	8007600 <__lshift>
 8006c00:	4606      	mov	r6, r0
 8006c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d06e      	beq.n	8006ce6 <_dtoa_r+0x90e>
 8006c08:	ee18 0a10 	vmov	r0, s16
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	f000 fd67 	bl	80076e0 <__mcmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	da67      	bge.n	8006ce6 <_dtoa_r+0x90e>
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	ee18 1a10 	vmov	r1, s16
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	220a      	movs	r2, #10
 8006c22:	2300      	movs	r3, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fb3b 	bl	80072a0 <__multadd>
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	ee08 0a10 	vmov	s16, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 81b1 	beq.w	8006f98 <_dtoa_r+0xbc0>
 8006c36:	2300      	movs	r3, #0
 8006c38:	4639      	mov	r1, r7
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fb2f 	bl	80072a0 <__multadd>
 8006c42:	9b02      	ldr	r3, [sp, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	4607      	mov	r7, r0
 8006c48:	f300 808e 	bgt.w	8006d68 <_dtoa_r+0x990>
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	dc51      	bgt.n	8006cf6 <_dtoa_r+0x91e>
 8006c52:	e089      	b.n	8006d68 <_dtoa_r+0x990>
 8006c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c5a:	e74b      	b.n	8006af4 <_dtoa_r+0x71c>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1e5e      	subs	r6, r3, #1
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	42b3      	cmp	r3, r6
 8006c64:	bfbf      	itttt	lt
 8006c66:	9b07      	ldrlt	r3, [sp, #28]
 8006c68:	9607      	strlt	r6, [sp, #28]
 8006c6a:	1af2      	sublt	r2, r6, r3
 8006c6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c6e:	bfb6      	itet	lt
 8006c70:	189b      	addlt	r3, r3, r2
 8006c72:	1b9e      	subge	r6, r3, r6
 8006c74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	bfb8      	it	lt
 8006c7a:	2600      	movlt	r6, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb7      	itett	lt
 8006c80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c88:	1a9d      	sublt	r5, r3, r2
 8006c8a:	2300      	movlt	r3, #0
 8006c8c:	e734      	b.n	8006af8 <_dtoa_r+0x720>
 8006c8e:	9e07      	ldr	r6, [sp, #28]
 8006c90:	9d04      	ldr	r5, [sp, #16]
 8006c92:	9f08      	ldr	r7, [sp, #32]
 8006c94:	e73b      	b.n	8006b0e <_dtoa_r+0x736>
 8006c96:	9a07      	ldr	r2, [sp, #28]
 8006c98:	e767      	b.n	8006b6a <_dtoa_r+0x792>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	dc18      	bgt.n	8006cd2 <_dtoa_r+0x8fa>
 8006ca0:	f1ba 0f00 	cmp.w	sl, #0
 8006ca4:	d115      	bne.n	8006cd2 <_dtoa_r+0x8fa>
 8006ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006caa:	b993      	cbnz	r3, 8006cd2 <_dtoa_r+0x8fa>
 8006cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cb0:	0d1b      	lsrs	r3, r3, #20
 8006cb2:	051b      	lsls	r3, r3, #20
 8006cb4:	b183      	cbz	r3, 8006cd8 <_dtoa_r+0x900>
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	9b05      	ldr	r3, [sp, #20]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	f04f 0801 	mov.w	r8, #1
 8006cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f47f af6a 	bne.w	8006ba2 <_dtoa_r+0x7ca>
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e76f      	b.n	8006bb2 <_dtoa_r+0x7da>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	e7f6      	b.n	8006cc6 <_dtoa_r+0x8ee>
 8006cd8:	4698      	mov	r8, r3
 8006cda:	e7f4      	b.n	8006cc6 <_dtoa_r+0x8ee>
 8006cdc:	f43f af7d 	beq.w	8006bda <_dtoa_r+0x802>
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	301c      	adds	r0, #28
 8006ce4:	e772      	b.n	8006bcc <_dtoa_r+0x7f4>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc37      	bgt.n	8006d5c <_dtoa_r+0x984>
 8006cec:	9b06      	ldr	r3, [sp, #24]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	dd34      	ble.n	8006d5c <_dtoa_r+0x984>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	9b02      	ldr	r3, [sp, #8]
 8006cf8:	b96b      	cbnz	r3, 8006d16 <_dtoa_r+0x93e>
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 face 	bl	80072a0 <__multadd>
 8006d04:	4601      	mov	r1, r0
 8006d06:	4606      	mov	r6, r0
 8006d08:	ee18 0a10 	vmov	r0, s16
 8006d0c:	f000 fce8 	bl	80076e0 <__mcmp>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f73f adbb 	bgt.w	800688c <_dtoa_r+0x4b4>
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	9d01      	ldr	r5, [sp, #4]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	4631      	mov	r1, r6
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fa99 	bl	800725c <_Bfree>
 8006d2a:	2f00      	cmp	r7, #0
 8006d2c:	f43f aea4 	beq.w	8006a78 <_dtoa_r+0x6a0>
 8006d30:	f1b8 0f00 	cmp.w	r8, #0
 8006d34:	d005      	beq.n	8006d42 <_dtoa_r+0x96a>
 8006d36:	45b8      	cmp	r8, r7
 8006d38:	d003      	beq.n	8006d42 <_dtoa_r+0x96a>
 8006d3a:	4641      	mov	r1, r8
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fa8d 	bl	800725c <_Bfree>
 8006d42:	4639      	mov	r1, r7
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fa89 	bl	800725c <_Bfree>
 8006d4a:	e695      	b.n	8006a78 <_dtoa_r+0x6a0>
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	4637      	mov	r7, r6
 8006d50:	e7e1      	b.n	8006d16 <_dtoa_r+0x93e>
 8006d52:	9700      	str	r7, [sp, #0]
 8006d54:	4637      	mov	r7, r6
 8006d56:	e599      	b.n	800688c <_dtoa_r+0x4b4>
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	9b08      	ldr	r3, [sp, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80ca 	beq.w	8006ef8 <_dtoa_r+0xb20>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	dd05      	ble.n	8006d78 <_dtoa_r+0x9a0>
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	462a      	mov	r2, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fc45 	bl	8007600 <__lshift>
 8006d76:	4607      	mov	r7, r0
 8006d78:	f1b8 0f00 	cmp.w	r8, #0
 8006d7c:	d05b      	beq.n	8006e36 <_dtoa_r+0xa5e>
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fa2b 	bl	80071dc <_Balloc>
 8006d86:	4605      	mov	r5, r0
 8006d88:	b928      	cbnz	r0, 8006d96 <_dtoa_r+0x9be>
 8006d8a:	4b87      	ldr	r3, [pc, #540]	; (8006fa8 <_dtoa_r+0xbd0>)
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d92:	f7ff bb3b 	b.w	800640c <_dtoa_r+0x34>
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	3202      	adds	r2, #2
 8006d9a:	0092      	lsls	r2, r2, #2
 8006d9c:	f107 010c 	add.w	r1, r7, #12
 8006da0:	300c      	adds	r0, #12
 8006da2:	f000 fa0d 	bl	80071c0 <memcpy>
 8006da6:	2201      	movs	r2, #1
 8006da8:	4629      	mov	r1, r5
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fc28 	bl	8007600 <__lshift>
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	f103 0901 	add.w	r9, r3, #1
 8006db6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	f00a 0301 	and.w	r3, sl, #1
 8006dc2:	46b8      	mov	r8, r7
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	4631      	mov	r1, r6
 8006dca:	ee18 0a10 	vmov	r0, s16
 8006dce:	f7ff fa75 	bl	80062bc <quorem>
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	9002      	str	r0, [sp, #8]
 8006dd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dda:	ee18 0a10 	vmov	r0, s16
 8006dde:	f000 fc7f 	bl	80076e0 <__mcmp>
 8006de2:	463a      	mov	r2, r7
 8006de4:	9003      	str	r0, [sp, #12]
 8006de6:	4631      	mov	r1, r6
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fc95 	bl	8007718 <__mdiff>
 8006dee:	68c2      	ldr	r2, [r0, #12]
 8006df0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006df4:	4605      	mov	r5, r0
 8006df6:	bb02      	cbnz	r2, 8006e3a <_dtoa_r+0xa62>
 8006df8:	4601      	mov	r1, r0
 8006dfa:	ee18 0a10 	vmov	r0, s16
 8006dfe:	f000 fc6f 	bl	80076e0 <__mcmp>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4629      	mov	r1, r5
 8006e06:	4620      	mov	r0, r4
 8006e08:	9207      	str	r2, [sp, #28]
 8006e0a:	f000 fa27 	bl	800725c <_Bfree>
 8006e0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e12:	ea43 0102 	orr.w	r1, r3, r2
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	464d      	mov	r5, r9
 8006e1c:	d10f      	bne.n	8006e3e <_dtoa_r+0xa66>
 8006e1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e22:	d02a      	beq.n	8006e7a <_dtoa_r+0xaa2>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd02      	ble.n	8006e30 <_dtoa_r+0xa58>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e30:	f88b a000 	strb.w	sl, [fp]
 8006e34:	e775      	b.n	8006d22 <_dtoa_r+0x94a>
 8006e36:	4638      	mov	r0, r7
 8006e38:	e7ba      	b.n	8006db0 <_dtoa_r+0x9d8>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	e7e2      	b.n	8006e04 <_dtoa_r+0xa2c>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db04      	blt.n	8006e4e <_dtoa_r+0xa76>
 8006e44:	9906      	ldr	r1, [sp, #24]
 8006e46:	430b      	orrs	r3, r1
 8006e48:	9904      	ldr	r1, [sp, #16]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	d122      	bne.n	8006e94 <_dtoa_r+0xabc>
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	ddee      	ble.n	8006e30 <_dtoa_r+0xa58>
 8006e52:	ee18 1a10 	vmov	r1, s16
 8006e56:	2201      	movs	r2, #1
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fbd1 	bl	8007600 <__lshift>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	ee08 0a10 	vmov	s16, r0
 8006e64:	f000 fc3c 	bl	80076e0 <__mcmp>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	dc03      	bgt.n	8006e74 <_dtoa_r+0xa9c>
 8006e6c:	d1e0      	bne.n	8006e30 <_dtoa_r+0xa58>
 8006e6e:	f01a 0f01 	tst.w	sl, #1
 8006e72:	d0dd      	beq.n	8006e30 <_dtoa_r+0xa58>
 8006e74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e78:	d1d7      	bne.n	8006e2a <_dtoa_r+0xa52>
 8006e7a:	2339      	movs	r3, #57	; 0x39
 8006e7c:	f88b 3000 	strb.w	r3, [fp]
 8006e80:	462b      	mov	r3, r5
 8006e82:	461d      	mov	r5, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e8a:	2a39      	cmp	r2, #57	; 0x39
 8006e8c:	d071      	beq.n	8006f72 <_dtoa_r+0xb9a>
 8006e8e:	3201      	adds	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e746      	b.n	8006d22 <_dtoa_r+0x94a>
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	dd07      	ble.n	8006ea8 <_dtoa_r+0xad0>
 8006e98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e9c:	d0ed      	beq.n	8006e7a <_dtoa_r+0xaa2>
 8006e9e:	f10a 0301 	add.w	r3, sl, #1
 8006ea2:	f88b 3000 	strb.w	r3, [fp]
 8006ea6:	e73c      	b.n	8006d22 <_dtoa_r+0x94a>
 8006ea8:	9b05      	ldr	r3, [sp, #20]
 8006eaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006eae:	4599      	cmp	r9, r3
 8006eb0:	d047      	beq.n	8006f42 <_dtoa_r+0xb6a>
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	220a      	movs	r2, #10
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f9f0 	bl	80072a0 <__multadd>
 8006ec0:	45b8      	cmp	r8, r7
 8006ec2:	ee08 0a10 	vmov	s16, r0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	f04f 020a 	mov.w	r2, #10
 8006ece:	4641      	mov	r1, r8
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	d106      	bne.n	8006ee2 <_dtoa_r+0xb0a>
 8006ed4:	f000 f9e4 	bl	80072a0 <__multadd>
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4607      	mov	r7, r0
 8006edc:	f109 0901 	add.w	r9, r9, #1
 8006ee0:	e772      	b.n	8006dc8 <_dtoa_r+0x9f0>
 8006ee2:	f000 f9dd 	bl	80072a0 <__multadd>
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4680      	mov	r8, r0
 8006eea:	2300      	movs	r3, #0
 8006eec:	220a      	movs	r2, #10
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f9d6 	bl	80072a0 <__multadd>
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	e7f1      	b.n	8006edc <_dtoa_r+0xb04>
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	9302      	str	r3, [sp, #8]
 8006efc:	9d01      	ldr	r5, [sp, #4]
 8006efe:	ee18 0a10 	vmov	r0, s16
 8006f02:	4631      	mov	r1, r6
 8006f04:	f7ff f9da 	bl	80062bc <quorem>
 8006f08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f0c:	9b01      	ldr	r3, [sp, #4]
 8006f0e:	f805 ab01 	strb.w	sl, [r5], #1
 8006f12:	1aea      	subs	r2, r5, r3
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	dd09      	ble.n	8006f2e <_dtoa_r+0xb56>
 8006f1a:	ee18 1a10 	vmov	r1, s16
 8006f1e:	2300      	movs	r3, #0
 8006f20:	220a      	movs	r2, #10
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f9bc 	bl	80072a0 <__multadd>
 8006f28:	ee08 0a10 	vmov	s16, r0
 8006f2c:	e7e7      	b.n	8006efe <_dtoa_r+0xb26>
 8006f2e:	9b02      	ldr	r3, [sp, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfc8      	it	gt
 8006f34:	461d      	movgt	r5, r3
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	bfd8      	it	le
 8006f3a:	2501      	movle	r5, #1
 8006f3c:	441d      	add	r5, r3
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	ee18 1a10 	vmov	r1, s16
 8006f46:	2201      	movs	r2, #1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fb59 	bl	8007600 <__lshift>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	ee08 0a10 	vmov	s16, r0
 8006f54:	f000 fbc4 	bl	80076e0 <__mcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dc91      	bgt.n	8006e80 <_dtoa_r+0xaa8>
 8006f5c:	d102      	bne.n	8006f64 <_dtoa_r+0xb8c>
 8006f5e:	f01a 0f01 	tst.w	sl, #1
 8006f62:	d18d      	bne.n	8006e80 <_dtoa_r+0xaa8>
 8006f64:	462b      	mov	r3, r5
 8006f66:	461d      	mov	r5, r3
 8006f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f6c:	2a30      	cmp	r2, #48	; 0x30
 8006f6e:	d0fa      	beq.n	8006f66 <_dtoa_r+0xb8e>
 8006f70:	e6d7      	b.n	8006d22 <_dtoa_r+0x94a>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d184      	bne.n	8006e82 <_dtoa_r+0xaaa>
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2331      	movs	r3, #49	; 0x31
 8006f80:	7013      	strb	r3, [r2, #0]
 8006f82:	e6ce      	b.n	8006d22 <_dtoa_r+0x94a>
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <_dtoa_r+0xbd4>)
 8006f86:	f7ff ba95 	b.w	80064b4 <_dtoa_r+0xdc>
 8006f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f47f aa6e 	bne.w	800646e <_dtoa_r+0x96>
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <_dtoa_r+0xbd8>)
 8006f94:	f7ff ba8e 	b.w	80064b4 <_dtoa_r+0xdc>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dcae      	bgt.n	8006efc <_dtoa_r+0xb24>
 8006f9e:	9b06      	ldr	r3, [sp, #24]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	f73f aea8 	bgt.w	8006cf6 <_dtoa_r+0x91e>
 8006fa6:	e7a9      	b.n	8006efc <_dtoa_r+0xb24>
 8006fa8:	0801c363 	.word	0x0801c363
 8006fac:	0801c2c0 	.word	0x0801c2c0
 8006fb0:	0801c2e4 	.word	0x0801c2e4

08006fb4 <std>:
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	4604      	mov	r4, r0
 8006fba:	e9c0 3300 	strd	r3, r3, [r0]
 8006fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fc2:	6083      	str	r3, [r0, #8]
 8006fc4:	8181      	strh	r1, [r0, #12]
 8006fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8006fc8:	81c2      	strh	r2, [r0, #14]
 8006fca:	6183      	str	r3, [r0, #24]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	2208      	movs	r2, #8
 8006fd0:	305c      	adds	r0, #92	; 0x5c
 8006fd2:	f7fe fcc9 	bl	8005968 <memset>
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <std+0x38>)
 8006fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x3c>)
 8006fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <std+0x40>)
 8006fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <std+0x44>)
 8006fe4:	6224      	str	r4, [r4, #32]
 8006fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fe8:	bd10      	pop	{r4, pc}
 8006fea:	bf00      	nop
 8006fec:	0800805d 	.word	0x0800805d
 8006ff0:	0800807f 	.word	0x0800807f
 8006ff4:	080080b7 	.word	0x080080b7
 8006ff8:	080080db 	.word	0x080080db

08006ffc <_cleanup_r>:
 8006ffc:	4901      	ldr	r1, [pc, #4]	; (8007004 <_cleanup_r+0x8>)
 8006ffe:	f000 b8af 	b.w	8007160 <_fwalk_reent>
 8007002:	bf00      	nop
 8007004:	080083f1 	.word	0x080083f1

08007008 <__sfmoreglue>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	2268      	movs	r2, #104	; 0x68
 800700c:	1e4d      	subs	r5, r1, #1
 800700e:	4355      	muls	r5, r2
 8007010:	460e      	mov	r6, r1
 8007012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007016:	f000 fce7 	bl	80079e8 <_malloc_r>
 800701a:	4604      	mov	r4, r0
 800701c:	b140      	cbz	r0, 8007030 <__sfmoreglue+0x28>
 800701e:	2100      	movs	r1, #0
 8007020:	e9c0 1600 	strd	r1, r6, [r0]
 8007024:	300c      	adds	r0, #12
 8007026:	60a0      	str	r0, [r4, #8]
 8007028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800702c:	f7fe fc9c 	bl	8005968 <memset>
 8007030:	4620      	mov	r0, r4
 8007032:	bd70      	pop	{r4, r5, r6, pc}

08007034 <__sfp_lock_acquire>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sfp_lock_acquire+0x8>)
 8007036:	f000 b8b8 	b.w	80071aa <__retarget_lock_acquire_recursive>
 800703a:	bf00      	nop
 800703c:	20019401 	.word	0x20019401

08007040 <__sfp_lock_release>:
 8007040:	4801      	ldr	r0, [pc, #4]	; (8007048 <__sfp_lock_release+0x8>)
 8007042:	f000 b8b3 	b.w	80071ac <__retarget_lock_release_recursive>
 8007046:	bf00      	nop
 8007048:	20019401 	.word	0x20019401

0800704c <__sinit_lock_acquire>:
 800704c:	4801      	ldr	r0, [pc, #4]	; (8007054 <__sinit_lock_acquire+0x8>)
 800704e:	f000 b8ac 	b.w	80071aa <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20019402 	.word	0x20019402

08007058 <__sinit_lock_release>:
 8007058:	4801      	ldr	r0, [pc, #4]	; (8007060 <__sinit_lock_release+0x8>)
 800705a:	f000 b8a7 	b.w	80071ac <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20019402 	.word	0x20019402

08007064 <__sinit>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	f7ff fff0 	bl	800704c <__sinit_lock_acquire>
 800706c:	69a3      	ldr	r3, [r4, #24]
 800706e:	b11b      	cbz	r3, 8007078 <__sinit+0x14>
 8007070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007074:	f7ff bff0 	b.w	8007058 <__sinit_lock_release>
 8007078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800707c:	6523      	str	r3, [r4, #80]	; 0x50
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <__sinit+0x68>)
 8007080:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <__sinit+0x6c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	62a2      	str	r2, [r4, #40]	; 0x28
 8007086:	42a3      	cmp	r3, r4
 8007088:	bf04      	itt	eq
 800708a:	2301      	moveq	r3, #1
 800708c:	61a3      	streq	r3, [r4, #24]
 800708e:	4620      	mov	r0, r4
 8007090:	f000 f820 	bl	80070d4 <__sfp>
 8007094:	6060      	str	r0, [r4, #4]
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f81c 	bl	80070d4 <__sfp>
 800709c:	60a0      	str	r0, [r4, #8]
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f818 	bl	80070d4 <__sfp>
 80070a4:	2200      	movs	r2, #0
 80070a6:	60e0      	str	r0, [r4, #12]
 80070a8:	2104      	movs	r1, #4
 80070aa:	6860      	ldr	r0, [r4, #4]
 80070ac:	f7ff ff82 	bl	8006fb4 <std>
 80070b0:	68a0      	ldr	r0, [r4, #8]
 80070b2:	2201      	movs	r2, #1
 80070b4:	2109      	movs	r1, #9
 80070b6:	f7ff ff7d 	bl	8006fb4 <std>
 80070ba:	68e0      	ldr	r0, [r4, #12]
 80070bc:	2202      	movs	r2, #2
 80070be:	2112      	movs	r1, #18
 80070c0:	f7ff ff78 	bl	8006fb4 <std>
 80070c4:	2301      	movs	r3, #1
 80070c6:	61a3      	str	r3, [r4, #24]
 80070c8:	e7d2      	b.n	8007070 <__sinit+0xc>
 80070ca:	bf00      	nop
 80070cc:	0801c2ac 	.word	0x0801c2ac
 80070d0:	08006ffd 	.word	0x08006ffd

080070d4 <__sfp>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	4607      	mov	r7, r0
 80070d8:	f7ff ffac 	bl	8007034 <__sfp_lock_acquire>
 80070dc:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <__sfp+0x84>)
 80070de:	681e      	ldr	r6, [r3, #0]
 80070e0:	69b3      	ldr	r3, [r6, #24]
 80070e2:	b913      	cbnz	r3, 80070ea <__sfp+0x16>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff ffbd 	bl	8007064 <__sinit>
 80070ea:	3648      	adds	r6, #72	; 0x48
 80070ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	d503      	bpl.n	80070fc <__sfp+0x28>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	b30b      	cbz	r3, 800713c <__sfp+0x68>
 80070f8:	6836      	ldr	r6, [r6, #0]
 80070fa:	e7f7      	b.n	80070ec <__sfp+0x18>
 80070fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007100:	b9d5      	cbnz	r5, 8007138 <__sfp+0x64>
 8007102:	4b16      	ldr	r3, [pc, #88]	; (800715c <__sfp+0x88>)
 8007104:	60e3      	str	r3, [r4, #12]
 8007106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800710a:	6665      	str	r5, [r4, #100]	; 0x64
 800710c:	f000 f84c 	bl	80071a8 <__retarget_lock_init_recursive>
 8007110:	f7ff ff96 	bl	8007040 <__sfp_lock_release>
 8007114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800711c:	6025      	str	r5, [r4, #0]
 800711e:	61a5      	str	r5, [r4, #24]
 8007120:	2208      	movs	r2, #8
 8007122:	4629      	mov	r1, r5
 8007124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007128:	f7fe fc1e 	bl	8005968 <memset>
 800712c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007134:	4620      	mov	r0, r4
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007138:	3468      	adds	r4, #104	; 0x68
 800713a:	e7d9      	b.n	80070f0 <__sfp+0x1c>
 800713c:	2104      	movs	r1, #4
 800713e:	4638      	mov	r0, r7
 8007140:	f7ff ff62 	bl	8007008 <__sfmoreglue>
 8007144:	4604      	mov	r4, r0
 8007146:	6030      	str	r0, [r6, #0]
 8007148:	2800      	cmp	r0, #0
 800714a:	d1d5      	bne.n	80070f8 <__sfp+0x24>
 800714c:	f7ff ff78 	bl	8007040 <__sfp_lock_release>
 8007150:	230c      	movs	r3, #12
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	e7ee      	b.n	8007134 <__sfp+0x60>
 8007156:	bf00      	nop
 8007158:	0801c2ac 	.word	0x0801c2ac
 800715c:	ffff0001 	.word	0xffff0001

08007160 <_fwalk_reent>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	4606      	mov	r6, r0
 8007166:	4688      	mov	r8, r1
 8007168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800716c:	2700      	movs	r7, #0
 800716e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007172:	f1b9 0901 	subs.w	r9, r9, #1
 8007176:	d505      	bpl.n	8007184 <_fwalk_reent+0x24>
 8007178:	6824      	ldr	r4, [r4, #0]
 800717a:	2c00      	cmp	r4, #0
 800717c:	d1f7      	bne.n	800716e <_fwalk_reent+0xe>
 800717e:	4638      	mov	r0, r7
 8007180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007184:	89ab      	ldrh	r3, [r5, #12]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d907      	bls.n	800719a <_fwalk_reent+0x3a>
 800718a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800718e:	3301      	adds	r3, #1
 8007190:	d003      	beq.n	800719a <_fwalk_reent+0x3a>
 8007192:	4629      	mov	r1, r5
 8007194:	4630      	mov	r0, r6
 8007196:	47c0      	blx	r8
 8007198:	4307      	orrs	r7, r0
 800719a:	3568      	adds	r5, #104	; 0x68
 800719c:	e7e9      	b.n	8007172 <_fwalk_reent+0x12>
	...

080071a0 <_localeconv_r>:
 80071a0:	4800      	ldr	r0, [pc, #0]	; (80071a4 <_localeconv_r+0x4>)
 80071a2:	4770      	bx	lr
 80071a4:	20000168 	.word	0x20000168

080071a8 <__retarget_lock_init_recursive>:
 80071a8:	4770      	bx	lr

080071aa <__retarget_lock_acquire_recursive>:
 80071aa:	4770      	bx	lr

080071ac <__retarget_lock_release_recursive>:
 80071ac:	4770      	bx	lr
	...

080071b0 <malloc>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <malloc+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f000 bc17 	b.w	80079e8 <_malloc_r>
 80071ba:	bf00      	nop
 80071bc:	20000014 	.word	0x20000014

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_Balloc>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	b976      	cbnz	r6, 8007204 <_Balloc+0x28>
 80071e6:	2010      	movs	r0, #16
 80071e8:	f7ff ffe2 	bl	80071b0 <malloc>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6260      	str	r0, [r4, #36]	; 0x24
 80071f0:	b920      	cbnz	r0, 80071fc <_Balloc+0x20>
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <_Balloc+0x78>)
 80071f4:	4818      	ldr	r0, [pc, #96]	; (8007258 <_Balloc+0x7c>)
 80071f6:	2166      	movs	r1, #102	; 0x66
 80071f8:	f001 f846 	bl	8008288 <__assert_func>
 80071fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007200:	6006      	str	r6, [r0, #0]
 8007202:	60c6      	str	r6, [r0, #12]
 8007204:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007206:	68f3      	ldr	r3, [r6, #12]
 8007208:	b183      	cbz	r3, 800722c <_Balloc+0x50>
 800720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007212:	b9b8      	cbnz	r0, 8007244 <_Balloc+0x68>
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f605 	lsl.w	r6, r1, r5
 800721a:	1d72      	adds	r2, r6, #5
 800721c:	0092      	lsls	r2, r2, #2
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fb60 	bl	80078e4 <_calloc_r>
 8007224:	b160      	cbz	r0, 8007240 <_Balloc+0x64>
 8007226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800722a:	e00e      	b.n	800724a <_Balloc+0x6e>
 800722c:	2221      	movs	r2, #33	; 0x21
 800722e:	2104      	movs	r1, #4
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fb57 	bl	80078e4 <_calloc_r>
 8007236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007238:	60f0      	str	r0, [r6, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e4      	bne.n	800720a <_Balloc+0x2e>
 8007240:	2000      	movs	r0, #0
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	6802      	ldr	r2, [r0, #0]
 8007246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800724a:	2300      	movs	r3, #0
 800724c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007250:	e7f7      	b.n	8007242 <_Balloc+0x66>
 8007252:	bf00      	nop
 8007254:	0801c2f1 	.word	0x0801c2f1
 8007258:	0801c3d4 	.word	0x0801c3d4

0800725c <_Bfree>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b976      	cbnz	r6, 8007284 <_Bfree+0x28>
 8007266:	2010      	movs	r0, #16
 8007268:	f7ff ffa2 	bl	80071b0 <malloc>
 800726c:	4602      	mov	r2, r0
 800726e:	6268      	str	r0, [r5, #36]	; 0x24
 8007270:	b920      	cbnz	r0, 800727c <_Bfree+0x20>
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_Bfree+0x3c>)
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <_Bfree+0x40>)
 8007276:	218a      	movs	r1, #138	; 0x8a
 8007278:	f001 f806 	bl	8008288 <__assert_func>
 800727c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007280:	6006      	str	r6, [r0, #0]
 8007282:	60c6      	str	r6, [r0, #12]
 8007284:	b13c      	cbz	r4, 8007296 <_Bfree+0x3a>
 8007286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007290:	6021      	str	r1, [r4, #0]
 8007292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	0801c2f1 	.word	0x0801c2f1
 800729c:	0801c3d4 	.word	0x0801c3d4

080072a0 <__multadd>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	690d      	ldr	r5, [r1, #16]
 80072a6:	4607      	mov	r7, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	461e      	mov	r6, r3
 80072ac:	f101 0c14 	add.w	ip, r1, #20
 80072b0:	2000      	movs	r0, #0
 80072b2:	f8dc 3000 	ldr.w	r3, [ip]
 80072b6:	b299      	uxth	r1, r3
 80072b8:	fb02 6101 	mla	r1, r2, r1, r6
 80072bc:	0c1e      	lsrs	r6, r3, #16
 80072be:	0c0b      	lsrs	r3, r1, #16
 80072c0:	fb02 3306 	mla	r3, r2, r6, r3
 80072c4:	b289      	uxth	r1, r1
 80072c6:	3001      	adds	r0, #1
 80072c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072cc:	4285      	cmp	r5, r0
 80072ce:	f84c 1b04 	str.w	r1, [ip], #4
 80072d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072d6:	dcec      	bgt.n	80072b2 <__multadd+0x12>
 80072d8:	b30e      	cbz	r6, 800731e <__multadd+0x7e>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	42ab      	cmp	r3, r5
 80072de:	dc19      	bgt.n	8007314 <__multadd+0x74>
 80072e0:	6861      	ldr	r1, [r4, #4]
 80072e2:	4638      	mov	r0, r7
 80072e4:	3101      	adds	r1, #1
 80072e6:	f7ff ff79 	bl	80071dc <_Balloc>
 80072ea:	4680      	mov	r8, r0
 80072ec:	b928      	cbnz	r0, 80072fa <__multadd+0x5a>
 80072ee:	4602      	mov	r2, r0
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <__multadd+0x84>)
 80072f2:	480d      	ldr	r0, [pc, #52]	; (8007328 <__multadd+0x88>)
 80072f4:	21b5      	movs	r1, #181	; 0xb5
 80072f6:	f000 ffc7 	bl	8008288 <__assert_func>
 80072fa:	6922      	ldr	r2, [r4, #16]
 80072fc:	3202      	adds	r2, #2
 80072fe:	f104 010c 	add.w	r1, r4, #12
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	300c      	adds	r0, #12
 8007306:	f7ff ff5b 	bl	80071c0 <memcpy>
 800730a:	4621      	mov	r1, r4
 800730c:	4638      	mov	r0, r7
 800730e:	f7ff ffa5 	bl	800725c <_Bfree>
 8007312:	4644      	mov	r4, r8
 8007314:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007318:	3501      	adds	r5, #1
 800731a:	615e      	str	r6, [r3, #20]
 800731c:	6125      	str	r5, [r4, #16]
 800731e:	4620      	mov	r0, r4
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	0801c363 	.word	0x0801c363
 8007328:	0801c3d4 	.word	0x0801c3d4

0800732c <__hi0bits>:
 800732c:	0c03      	lsrs	r3, r0, #16
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	b9d3      	cbnz	r3, 8007368 <__hi0bits+0x3c>
 8007332:	0400      	lsls	r0, r0, #16
 8007334:	2310      	movs	r3, #16
 8007336:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800733a:	bf04      	itt	eq
 800733c:	0200      	lsleq	r0, r0, #8
 800733e:	3308      	addeq	r3, #8
 8007340:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007344:	bf04      	itt	eq
 8007346:	0100      	lsleq	r0, r0, #4
 8007348:	3304      	addeq	r3, #4
 800734a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800734e:	bf04      	itt	eq
 8007350:	0080      	lsleq	r0, r0, #2
 8007352:	3302      	addeq	r3, #2
 8007354:	2800      	cmp	r0, #0
 8007356:	db05      	blt.n	8007364 <__hi0bits+0x38>
 8007358:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800735c:	f103 0301 	add.w	r3, r3, #1
 8007360:	bf08      	it	eq
 8007362:	2320      	moveq	r3, #32
 8007364:	4618      	mov	r0, r3
 8007366:	4770      	bx	lr
 8007368:	2300      	movs	r3, #0
 800736a:	e7e4      	b.n	8007336 <__hi0bits+0xa>

0800736c <__lo0bits>:
 800736c:	6803      	ldr	r3, [r0, #0]
 800736e:	f013 0207 	ands.w	r2, r3, #7
 8007372:	4601      	mov	r1, r0
 8007374:	d00b      	beq.n	800738e <__lo0bits+0x22>
 8007376:	07da      	lsls	r2, r3, #31
 8007378:	d423      	bmi.n	80073c2 <__lo0bits+0x56>
 800737a:	0798      	lsls	r0, r3, #30
 800737c:	bf49      	itett	mi
 800737e:	085b      	lsrmi	r3, r3, #1
 8007380:	089b      	lsrpl	r3, r3, #2
 8007382:	2001      	movmi	r0, #1
 8007384:	600b      	strmi	r3, [r1, #0]
 8007386:	bf5c      	itt	pl
 8007388:	600b      	strpl	r3, [r1, #0]
 800738a:	2002      	movpl	r0, #2
 800738c:	4770      	bx	lr
 800738e:	b298      	uxth	r0, r3
 8007390:	b9a8      	cbnz	r0, 80073be <__lo0bits+0x52>
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	2010      	movs	r0, #16
 8007396:	b2da      	uxtb	r2, r3
 8007398:	b90a      	cbnz	r2, 800739e <__lo0bits+0x32>
 800739a:	3008      	adds	r0, #8
 800739c:	0a1b      	lsrs	r3, r3, #8
 800739e:	071a      	lsls	r2, r3, #28
 80073a0:	bf04      	itt	eq
 80073a2:	091b      	lsreq	r3, r3, #4
 80073a4:	3004      	addeq	r0, #4
 80073a6:	079a      	lsls	r2, r3, #30
 80073a8:	bf04      	itt	eq
 80073aa:	089b      	lsreq	r3, r3, #2
 80073ac:	3002      	addeq	r0, #2
 80073ae:	07da      	lsls	r2, r3, #31
 80073b0:	d403      	bmi.n	80073ba <__lo0bits+0x4e>
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	f100 0001 	add.w	r0, r0, #1
 80073b8:	d005      	beq.n	80073c6 <__lo0bits+0x5a>
 80073ba:	600b      	str	r3, [r1, #0]
 80073bc:	4770      	bx	lr
 80073be:	4610      	mov	r0, r2
 80073c0:	e7e9      	b.n	8007396 <__lo0bits+0x2a>
 80073c2:	2000      	movs	r0, #0
 80073c4:	4770      	bx	lr
 80073c6:	2020      	movs	r0, #32
 80073c8:	4770      	bx	lr
	...

080073cc <__i2b>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	460c      	mov	r4, r1
 80073d0:	2101      	movs	r1, #1
 80073d2:	f7ff ff03 	bl	80071dc <_Balloc>
 80073d6:	4602      	mov	r2, r0
 80073d8:	b928      	cbnz	r0, 80073e6 <__i2b+0x1a>
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <__i2b+0x24>)
 80073dc:	4805      	ldr	r0, [pc, #20]	; (80073f4 <__i2b+0x28>)
 80073de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073e2:	f000 ff51 	bl	8008288 <__assert_func>
 80073e6:	2301      	movs	r3, #1
 80073e8:	6144      	str	r4, [r0, #20]
 80073ea:	6103      	str	r3, [r0, #16]
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	bf00      	nop
 80073f0:	0801c363 	.word	0x0801c363
 80073f4:	0801c3d4 	.word	0x0801c3d4

080073f8 <__multiply>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	4691      	mov	r9, r2
 80073fe:	690a      	ldr	r2, [r1, #16]
 8007400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007404:	429a      	cmp	r2, r3
 8007406:	bfb8      	it	lt
 8007408:	460b      	movlt	r3, r1
 800740a:	460c      	mov	r4, r1
 800740c:	bfbc      	itt	lt
 800740e:	464c      	movlt	r4, r9
 8007410:	4699      	movlt	r9, r3
 8007412:	6927      	ldr	r7, [r4, #16]
 8007414:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007418:	68a3      	ldr	r3, [r4, #8]
 800741a:	6861      	ldr	r1, [r4, #4]
 800741c:	eb07 060a 	add.w	r6, r7, sl
 8007420:	42b3      	cmp	r3, r6
 8007422:	b085      	sub	sp, #20
 8007424:	bfb8      	it	lt
 8007426:	3101      	addlt	r1, #1
 8007428:	f7ff fed8 	bl	80071dc <_Balloc>
 800742c:	b930      	cbnz	r0, 800743c <__multiply+0x44>
 800742e:	4602      	mov	r2, r0
 8007430:	4b44      	ldr	r3, [pc, #272]	; (8007544 <__multiply+0x14c>)
 8007432:	4845      	ldr	r0, [pc, #276]	; (8007548 <__multiply+0x150>)
 8007434:	f240 115d 	movw	r1, #349	; 0x15d
 8007438:	f000 ff26 	bl	8008288 <__assert_func>
 800743c:	f100 0514 	add.w	r5, r0, #20
 8007440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007444:	462b      	mov	r3, r5
 8007446:	2200      	movs	r2, #0
 8007448:	4543      	cmp	r3, r8
 800744a:	d321      	bcc.n	8007490 <__multiply+0x98>
 800744c:	f104 0314 	add.w	r3, r4, #20
 8007450:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007454:	f109 0314 	add.w	r3, r9, #20
 8007458:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800745c:	9202      	str	r2, [sp, #8]
 800745e:	1b3a      	subs	r2, r7, r4
 8007460:	3a15      	subs	r2, #21
 8007462:	f022 0203 	bic.w	r2, r2, #3
 8007466:	3204      	adds	r2, #4
 8007468:	f104 0115 	add.w	r1, r4, #21
 800746c:	428f      	cmp	r7, r1
 800746e:	bf38      	it	cc
 8007470:	2204      	movcc	r2, #4
 8007472:	9201      	str	r2, [sp, #4]
 8007474:	9a02      	ldr	r2, [sp, #8]
 8007476:	9303      	str	r3, [sp, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d80c      	bhi.n	8007496 <__multiply+0x9e>
 800747c:	2e00      	cmp	r6, #0
 800747e:	dd03      	ble.n	8007488 <__multiply+0x90>
 8007480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007484:	2b00      	cmp	r3, #0
 8007486:	d05a      	beq.n	800753e <__multiply+0x146>
 8007488:	6106      	str	r6, [r0, #16]
 800748a:	b005      	add	sp, #20
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	f843 2b04 	str.w	r2, [r3], #4
 8007494:	e7d8      	b.n	8007448 <__multiply+0x50>
 8007496:	f8b3 a000 	ldrh.w	sl, [r3]
 800749a:	f1ba 0f00 	cmp.w	sl, #0
 800749e:	d024      	beq.n	80074ea <__multiply+0xf2>
 80074a0:	f104 0e14 	add.w	lr, r4, #20
 80074a4:	46a9      	mov	r9, r5
 80074a6:	f04f 0c00 	mov.w	ip, #0
 80074aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074ae:	f8d9 1000 	ldr.w	r1, [r9]
 80074b2:	fa1f fb82 	uxth.w	fp, r2
 80074b6:	b289      	uxth	r1, r1
 80074b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80074bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074c0:	f8d9 2000 	ldr.w	r2, [r9]
 80074c4:	4461      	add	r1, ip
 80074c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80074ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074d2:	b289      	uxth	r1, r1
 80074d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074d8:	4577      	cmp	r7, lr
 80074da:	f849 1b04 	str.w	r1, [r9], #4
 80074de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074e2:	d8e2      	bhi.n	80074aa <__multiply+0xb2>
 80074e4:	9a01      	ldr	r2, [sp, #4]
 80074e6:	f845 c002 	str.w	ip, [r5, r2]
 80074ea:	9a03      	ldr	r2, [sp, #12]
 80074ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074f0:	3304      	adds	r3, #4
 80074f2:	f1b9 0f00 	cmp.w	r9, #0
 80074f6:	d020      	beq.n	800753a <__multiply+0x142>
 80074f8:	6829      	ldr	r1, [r5, #0]
 80074fa:	f104 0c14 	add.w	ip, r4, #20
 80074fe:	46ae      	mov	lr, r5
 8007500:	f04f 0a00 	mov.w	sl, #0
 8007504:	f8bc b000 	ldrh.w	fp, [ip]
 8007508:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800750c:	fb09 220b 	mla	r2, r9, fp, r2
 8007510:	4492      	add	sl, r2
 8007512:	b289      	uxth	r1, r1
 8007514:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007518:	f84e 1b04 	str.w	r1, [lr], #4
 800751c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007520:	f8be 1000 	ldrh.w	r1, [lr]
 8007524:	0c12      	lsrs	r2, r2, #16
 8007526:	fb09 1102 	mla	r1, r9, r2, r1
 800752a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800752e:	4567      	cmp	r7, ip
 8007530:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007534:	d8e6      	bhi.n	8007504 <__multiply+0x10c>
 8007536:	9a01      	ldr	r2, [sp, #4]
 8007538:	50a9      	str	r1, [r5, r2]
 800753a:	3504      	adds	r5, #4
 800753c:	e79a      	b.n	8007474 <__multiply+0x7c>
 800753e:	3e01      	subs	r6, #1
 8007540:	e79c      	b.n	800747c <__multiply+0x84>
 8007542:	bf00      	nop
 8007544:	0801c363 	.word	0x0801c363
 8007548:	0801c3d4 	.word	0x0801c3d4

0800754c <__pow5mult>:
 800754c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007550:	4615      	mov	r5, r2
 8007552:	f012 0203 	ands.w	r2, r2, #3
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	d007      	beq.n	800756c <__pow5mult+0x20>
 800755c:	4c25      	ldr	r4, [pc, #148]	; (80075f4 <__pow5mult+0xa8>)
 800755e:	3a01      	subs	r2, #1
 8007560:	2300      	movs	r3, #0
 8007562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007566:	f7ff fe9b 	bl	80072a0 <__multadd>
 800756a:	4607      	mov	r7, r0
 800756c:	10ad      	asrs	r5, r5, #2
 800756e:	d03d      	beq.n	80075ec <__pow5mult+0xa0>
 8007570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007572:	b97c      	cbnz	r4, 8007594 <__pow5mult+0x48>
 8007574:	2010      	movs	r0, #16
 8007576:	f7ff fe1b 	bl	80071b0 <malloc>
 800757a:	4602      	mov	r2, r0
 800757c:	6270      	str	r0, [r6, #36]	; 0x24
 800757e:	b928      	cbnz	r0, 800758c <__pow5mult+0x40>
 8007580:	4b1d      	ldr	r3, [pc, #116]	; (80075f8 <__pow5mult+0xac>)
 8007582:	481e      	ldr	r0, [pc, #120]	; (80075fc <__pow5mult+0xb0>)
 8007584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007588:	f000 fe7e 	bl	8008288 <__assert_func>
 800758c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007590:	6004      	str	r4, [r0, #0]
 8007592:	60c4      	str	r4, [r0, #12]
 8007594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800759c:	b94c      	cbnz	r4, 80075b2 <__pow5mult+0x66>
 800759e:	f240 2171 	movw	r1, #625	; 0x271
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ff12 	bl	80073cc <__i2b>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80075ae:	4604      	mov	r4, r0
 80075b0:	6003      	str	r3, [r0, #0]
 80075b2:	f04f 0900 	mov.w	r9, #0
 80075b6:	07eb      	lsls	r3, r5, #31
 80075b8:	d50a      	bpl.n	80075d0 <__pow5mult+0x84>
 80075ba:	4639      	mov	r1, r7
 80075bc:	4622      	mov	r2, r4
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ff1a 	bl	80073f8 <__multiply>
 80075c4:	4639      	mov	r1, r7
 80075c6:	4680      	mov	r8, r0
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff fe47 	bl	800725c <_Bfree>
 80075ce:	4647      	mov	r7, r8
 80075d0:	106d      	asrs	r5, r5, #1
 80075d2:	d00b      	beq.n	80075ec <__pow5mult+0xa0>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	b938      	cbnz	r0, 80075e8 <__pow5mult+0x9c>
 80075d8:	4622      	mov	r2, r4
 80075da:	4621      	mov	r1, r4
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff ff0b 	bl	80073f8 <__multiply>
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f8c0 9000 	str.w	r9, [r0]
 80075e8:	4604      	mov	r4, r0
 80075ea:	e7e4      	b.n	80075b6 <__pow5mult+0x6a>
 80075ec:	4638      	mov	r0, r7
 80075ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f2:	bf00      	nop
 80075f4:	0801c520 	.word	0x0801c520
 80075f8:	0801c2f1 	.word	0x0801c2f1
 80075fc:	0801c3d4 	.word	0x0801c3d4

08007600 <__lshift>:
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	460c      	mov	r4, r1
 8007606:	6849      	ldr	r1, [r1, #4]
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	4607      	mov	r7, r0
 8007612:	4691      	mov	r9, r2
 8007614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007618:	f108 0601 	add.w	r6, r8, #1
 800761c:	42b3      	cmp	r3, r6
 800761e:	db0b      	blt.n	8007638 <__lshift+0x38>
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff fddb 	bl	80071dc <_Balloc>
 8007626:	4605      	mov	r5, r0
 8007628:	b948      	cbnz	r0, 800763e <__lshift+0x3e>
 800762a:	4602      	mov	r2, r0
 800762c:	4b2a      	ldr	r3, [pc, #168]	; (80076d8 <__lshift+0xd8>)
 800762e:	482b      	ldr	r0, [pc, #172]	; (80076dc <__lshift+0xdc>)
 8007630:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007634:	f000 fe28 	bl	8008288 <__assert_func>
 8007638:	3101      	adds	r1, #1
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	e7ee      	b.n	800761c <__lshift+0x1c>
 800763e:	2300      	movs	r3, #0
 8007640:	f100 0114 	add.w	r1, r0, #20
 8007644:	f100 0210 	add.w	r2, r0, #16
 8007648:	4618      	mov	r0, r3
 800764a:	4553      	cmp	r3, sl
 800764c:	db37      	blt.n	80076be <__lshift+0xbe>
 800764e:	6920      	ldr	r0, [r4, #16]
 8007650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007654:	f104 0314 	add.w	r3, r4, #20
 8007658:	f019 091f 	ands.w	r9, r9, #31
 800765c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007664:	d02f      	beq.n	80076c6 <__lshift+0xc6>
 8007666:	f1c9 0e20 	rsb	lr, r9, #32
 800766a:	468a      	mov	sl, r1
 800766c:	f04f 0c00 	mov.w	ip, #0
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	fa02 f209 	lsl.w	r2, r2, r9
 8007676:	ea42 020c 	orr.w	r2, r2, ip
 800767a:	f84a 2b04 	str.w	r2, [sl], #4
 800767e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007682:	4298      	cmp	r0, r3
 8007684:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007688:	d8f2      	bhi.n	8007670 <__lshift+0x70>
 800768a:	1b03      	subs	r3, r0, r4
 800768c:	3b15      	subs	r3, #21
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	3304      	adds	r3, #4
 8007694:	f104 0215 	add.w	r2, r4, #21
 8007698:	4290      	cmp	r0, r2
 800769a:	bf38      	it	cc
 800769c:	2304      	movcc	r3, #4
 800769e:	f841 c003 	str.w	ip, [r1, r3]
 80076a2:	f1bc 0f00 	cmp.w	ip, #0
 80076a6:	d001      	beq.n	80076ac <__lshift+0xac>
 80076a8:	f108 0602 	add.w	r6, r8, #2
 80076ac:	3e01      	subs	r6, #1
 80076ae:	4638      	mov	r0, r7
 80076b0:	612e      	str	r6, [r5, #16]
 80076b2:	4621      	mov	r1, r4
 80076b4:	f7ff fdd2 	bl	800725c <_Bfree>
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	f842 0f04 	str.w	r0, [r2, #4]!
 80076c2:	3301      	adds	r3, #1
 80076c4:	e7c1      	b.n	800764a <__lshift+0x4a>
 80076c6:	3904      	subs	r1, #4
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80076d0:	4298      	cmp	r0, r3
 80076d2:	d8f9      	bhi.n	80076c8 <__lshift+0xc8>
 80076d4:	e7ea      	b.n	80076ac <__lshift+0xac>
 80076d6:	bf00      	nop
 80076d8:	0801c363 	.word	0x0801c363
 80076dc:	0801c3d4 	.word	0x0801c3d4

080076e0 <__mcmp>:
 80076e0:	b530      	push	{r4, r5, lr}
 80076e2:	6902      	ldr	r2, [r0, #16]
 80076e4:	690c      	ldr	r4, [r1, #16]
 80076e6:	1b12      	subs	r2, r2, r4
 80076e8:	d10e      	bne.n	8007708 <__mcmp+0x28>
 80076ea:	f100 0314 	add.w	r3, r0, #20
 80076ee:	3114      	adds	r1, #20
 80076f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007700:	42a5      	cmp	r5, r4
 8007702:	d003      	beq.n	800770c <__mcmp+0x2c>
 8007704:	d305      	bcc.n	8007712 <__mcmp+0x32>
 8007706:	2201      	movs	r2, #1
 8007708:	4610      	mov	r0, r2
 800770a:	bd30      	pop	{r4, r5, pc}
 800770c:	4283      	cmp	r3, r0
 800770e:	d3f3      	bcc.n	80076f8 <__mcmp+0x18>
 8007710:	e7fa      	b.n	8007708 <__mcmp+0x28>
 8007712:	f04f 32ff 	mov.w	r2, #4294967295
 8007716:	e7f7      	b.n	8007708 <__mcmp+0x28>

08007718 <__mdiff>:
 8007718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	460c      	mov	r4, r1
 800771e:	4606      	mov	r6, r0
 8007720:	4611      	mov	r1, r2
 8007722:	4620      	mov	r0, r4
 8007724:	4690      	mov	r8, r2
 8007726:	f7ff ffdb 	bl	80076e0 <__mcmp>
 800772a:	1e05      	subs	r5, r0, #0
 800772c:	d110      	bne.n	8007750 <__mdiff+0x38>
 800772e:	4629      	mov	r1, r5
 8007730:	4630      	mov	r0, r6
 8007732:	f7ff fd53 	bl	80071dc <_Balloc>
 8007736:	b930      	cbnz	r0, 8007746 <__mdiff+0x2e>
 8007738:	4b3a      	ldr	r3, [pc, #232]	; (8007824 <__mdiff+0x10c>)
 800773a:	4602      	mov	r2, r0
 800773c:	f240 2132 	movw	r1, #562	; 0x232
 8007740:	4839      	ldr	r0, [pc, #228]	; (8007828 <__mdiff+0x110>)
 8007742:	f000 fda1 	bl	8008288 <__assert_func>
 8007746:	2301      	movs	r3, #1
 8007748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800774c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007750:	bfa4      	itt	ge
 8007752:	4643      	movge	r3, r8
 8007754:	46a0      	movge	r8, r4
 8007756:	4630      	mov	r0, r6
 8007758:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800775c:	bfa6      	itte	ge
 800775e:	461c      	movge	r4, r3
 8007760:	2500      	movge	r5, #0
 8007762:	2501      	movlt	r5, #1
 8007764:	f7ff fd3a 	bl	80071dc <_Balloc>
 8007768:	b920      	cbnz	r0, 8007774 <__mdiff+0x5c>
 800776a:	4b2e      	ldr	r3, [pc, #184]	; (8007824 <__mdiff+0x10c>)
 800776c:	4602      	mov	r2, r0
 800776e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007772:	e7e5      	b.n	8007740 <__mdiff+0x28>
 8007774:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007778:	6926      	ldr	r6, [r4, #16]
 800777a:	60c5      	str	r5, [r0, #12]
 800777c:	f104 0914 	add.w	r9, r4, #20
 8007780:	f108 0514 	add.w	r5, r8, #20
 8007784:	f100 0e14 	add.w	lr, r0, #20
 8007788:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800778c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007790:	f108 0210 	add.w	r2, r8, #16
 8007794:	46f2      	mov	sl, lr
 8007796:	2100      	movs	r1, #0
 8007798:	f859 3b04 	ldr.w	r3, [r9], #4
 800779c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077a0:	fa1f f883 	uxth.w	r8, r3
 80077a4:	fa11 f18b 	uxtah	r1, r1, fp
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	eba1 0808 	sub.w	r8, r1, r8
 80077ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077b6:	fa1f f888 	uxth.w	r8, r8
 80077ba:	1419      	asrs	r1, r3, #16
 80077bc:	454e      	cmp	r6, r9
 80077be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077c2:	f84a 3b04 	str.w	r3, [sl], #4
 80077c6:	d8e7      	bhi.n	8007798 <__mdiff+0x80>
 80077c8:	1b33      	subs	r3, r6, r4
 80077ca:	3b15      	subs	r3, #21
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	3304      	adds	r3, #4
 80077d2:	3415      	adds	r4, #21
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	bf38      	it	cc
 80077d8:	2304      	movcc	r3, #4
 80077da:	441d      	add	r5, r3
 80077dc:	4473      	add	r3, lr
 80077de:	469e      	mov	lr, r3
 80077e0:	462e      	mov	r6, r5
 80077e2:	4566      	cmp	r6, ip
 80077e4:	d30e      	bcc.n	8007804 <__mdiff+0xec>
 80077e6:	f10c 0203 	add.w	r2, ip, #3
 80077ea:	1b52      	subs	r2, r2, r5
 80077ec:	f022 0203 	bic.w	r2, r2, #3
 80077f0:	3d03      	subs	r5, #3
 80077f2:	45ac      	cmp	ip, r5
 80077f4:	bf38      	it	cc
 80077f6:	2200      	movcc	r2, #0
 80077f8:	441a      	add	r2, r3
 80077fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077fe:	b17b      	cbz	r3, 8007820 <__mdiff+0x108>
 8007800:	6107      	str	r7, [r0, #16]
 8007802:	e7a3      	b.n	800774c <__mdiff+0x34>
 8007804:	f856 8b04 	ldr.w	r8, [r6], #4
 8007808:	fa11 f288 	uxtah	r2, r1, r8
 800780c:	1414      	asrs	r4, r2, #16
 800780e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007812:	b292      	uxth	r2, r2
 8007814:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007818:	f84e 2b04 	str.w	r2, [lr], #4
 800781c:	1421      	asrs	r1, r4, #16
 800781e:	e7e0      	b.n	80077e2 <__mdiff+0xca>
 8007820:	3f01      	subs	r7, #1
 8007822:	e7ea      	b.n	80077fa <__mdiff+0xe2>
 8007824:	0801c363 	.word	0x0801c363
 8007828:	0801c3d4 	.word	0x0801c3d4

0800782c <__d2b>:
 800782c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007830:	4689      	mov	r9, r1
 8007832:	2101      	movs	r1, #1
 8007834:	ec57 6b10 	vmov	r6, r7, d0
 8007838:	4690      	mov	r8, r2
 800783a:	f7ff fccf 	bl	80071dc <_Balloc>
 800783e:	4604      	mov	r4, r0
 8007840:	b930      	cbnz	r0, 8007850 <__d2b+0x24>
 8007842:	4602      	mov	r2, r0
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <__d2b+0xb0>)
 8007846:	4826      	ldr	r0, [pc, #152]	; (80078e0 <__d2b+0xb4>)
 8007848:	f240 310a 	movw	r1, #778	; 0x30a
 800784c:	f000 fd1c 	bl	8008288 <__assert_func>
 8007850:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007854:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007858:	bb35      	cbnz	r5, 80078a8 <__d2b+0x7c>
 800785a:	2e00      	cmp	r6, #0
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	d028      	beq.n	80078b2 <__d2b+0x86>
 8007860:	4668      	mov	r0, sp
 8007862:	9600      	str	r6, [sp, #0]
 8007864:	f7ff fd82 	bl	800736c <__lo0bits>
 8007868:	9900      	ldr	r1, [sp, #0]
 800786a:	b300      	cbz	r0, 80078ae <__d2b+0x82>
 800786c:	9a01      	ldr	r2, [sp, #4]
 800786e:	f1c0 0320 	rsb	r3, r0, #32
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	430b      	orrs	r3, r1
 8007878:	40c2      	lsrs	r2, r0
 800787a:	6163      	str	r3, [r4, #20]
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	61a3      	str	r3, [r4, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2202      	movne	r2, #2
 8007888:	2201      	moveq	r2, #1
 800788a:	6122      	str	r2, [r4, #16]
 800788c:	b1d5      	cbz	r5, 80078c4 <__d2b+0x98>
 800788e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007892:	4405      	add	r5, r0
 8007894:	f8c9 5000 	str.w	r5, [r9]
 8007898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800789c:	f8c8 0000 	str.w	r0, [r8]
 80078a0:	4620      	mov	r0, r4
 80078a2:	b003      	add	sp, #12
 80078a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ac:	e7d5      	b.n	800785a <__d2b+0x2e>
 80078ae:	6161      	str	r1, [r4, #20]
 80078b0:	e7e5      	b.n	800787e <__d2b+0x52>
 80078b2:	a801      	add	r0, sp, #4
 80078b4:	f7ff fd5a 	bl	800736c <__lo0bits>
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	6163      	str	r3, [r4, #20]
 80078bc:	2201      	movs	r2, #1
 80078be:	6122      	str	r2, [r4, #16]
 80078c0:	3020      	adds	r0, #32
 80078c2:	e7e3      	b.n	800788c <__d2b+0x60>
 80078c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078cc:	f8c9 0000 	str.w	r0, [r9]
 80078d0:	6918      	ldr	r0, [r3, #16]
 80078d2:	f7ff fd2b 	bl	800732c <__hi0bits>
 80078d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078da:	e7df      	b.n	800789c <__d2b+0x70>
 80078dc:	0801c363 	.word	0x0801c363
 80078e0:	0801c3d4 	.word	0x0801c3d4

080078e4 <_calloc_r>:
 80078e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078e6:	fba1 2402 	umull	r2, r4, r1, r2
 80078ea:	b94c      	cbnz	r4, 8007900 <_calloc_r+0x1c>
 80078ec:	4611      	mov	r1, r2
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	f000 f87a 	bl	80079e8 <_malloc_r>
 80078f4:	9a01      	ldr	r2, [sp, #4]
 80078f6:	4605      	mov	r5, r0
 80078f8:	b930      	cbnz	r0, 8007908 <_calloc_r+0x24>
 80078fa:	4628      	mov	r0, r5
 80078fc:	b003      	add	sp, #12
 80078fe:	bd30      	pop	{r4, r5, pc}
 8007900:	220c      	movs	r2, #12
 8007902:	6002      	str	r2, [r0, #0]
 8007904:	2500      	movs	r5, #0
 8007906:	e7f8      	b.n	80078fa <_calloc_r+0x16>
 8007908:	4621      	mov	r1, r4
 800790a:	f7fe f82d 	bl	8005968 <memset>
 800790e:	e7f4      	b.n	80078fa <_calloc_r+0x16>

08007910 <_free_r>:
 8007910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007912:	2900      	cmp	r1, #0
 8007914:	d044      	beq.n	80079a0 <_free_r+0x90>
 8007916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f1a1 0404 	sub.w	r4, r1, #4
 8007922:	bfb8      	it	lt
 8007924:	18e4      	addlt	r4, r4, r3
 8007926:	f000 fe55 	bl	80085d4 <__malloc_lock>
 800792a:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <_free_r+0x94>)
 800792c:	9801      	ldr	r0, [sp, #4]
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	b933      	cbnz	r3, 8007940 <_free_r+0x30>
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	6014      	str	r4, [r2, #0]
 8007936:	b003      	add	sp, #12
 8007938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800793c:	f000 be50 	b.w	80085e0 <__malloc_unlock>
 8007940:	42a3      	cmp	r3, r4
 8007942:	d908      	bls.n	8007956 <_free_r+0x46>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	1961      	adds	r1, r4, r5
 8007948:	428b      	cmp	r3, r1
 800794a:	bf01      	itttt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	1949      	addeq	r1, r1, r5
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	e7ed      	b.n	8007932 <_free_r+0x22>
 8007956:	461a      	mov	r2, r3
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	b10b      	cbz	r3, 8007960 <_free_r+0x50>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d9fa      	bls.n	8007956 <_free_r+0x46>
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	1855      	adds	r5, r2, r1
 8007964:	42a5      	cmp	r5, r4
 8007966:	d10b      	bne.n	8007980 <_free_r+0x70>
 8007968:	6824      	ldr	r4, [r4, #0]
 800796a:	4421      	add	r1, r4
 800796c:	1854      	adds	r4, r2, r1
 800796e:	42a3      	cmp	r3, r4
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	d1e0      	bne.n	8007936 <_free_r+0x26>
 8007974:	681c      	ldr	r4, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	4421      	add	r1, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	e7da      	b.n	8007936 <_free_r+0x26>
 8007980:	d902      	bls.n	8007988 <_free_r+0x78>
 8007982:	230c      	movs	r3, #12
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	e7d6      	b.n	8007936 <_free_r+0x26>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1961      	adds	r1, r4, r5
 800798c:	428b      	cmp	r3, r1
 800798e:	bf04      	itt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	bf04      	itt	eq
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6054      	str	r4, [r2, #4]
 800799e:	e7ca      	b.n	8007936 <_free_r+0x26>
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	20019404 	.word	0x20019404

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0e      	ldr	r6, [pc, #56]	; (80079e4 <sbrk_aligned+0x3c>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f000 fb42 	bl	800803c <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 fb3d 	bl	800803c <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d00a      	beq.n	80079dc <sbrk_aligned+0x34>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d007      	beq.n	80079e0 <sbrk_aligned+0x38>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 fb32 	bl	800803c <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d101      	bne.n	80079e0 <sbrk_aligned+0x38>
 80079dc:	f04f 34ff 	mov.w	r4, #4294967295
 80079e0:	4620      	mov	r0, r4
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	20019408 	.word	0x20019408

080079e8 <_malloc_r>:
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	1ccd      	adds	r5, r1, #3
 80079ee:	f025 0503 	bic.w	r5, r5, #3
 80079f2:	3508      	adds	r5, #8
 80079f4:	2d0c      	cmp	r5, #12
 80079f6:	bf38      	it	cc
 80079f8:	250c      	movcc	r5, #12
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	4607      	mov	r7, r0
 80079fe:	db01      	blt.n	8007a04 <_malloc_r+0x1c>
 8007a00:	42a9      	cmp	r1, r5
 8007a02:	d905      	bls.n	8007a10 <_malloc_r+0x28>
 8007a04:	230c      	movs	r3, #12
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	2600      	movs	r6, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	4e2e      	ldr	r6, [pc, #184]	; (8007acc <_malloc_r+0xe4>)
 8007a12:	f000 fddf 	bl	80085d4 <__malloc_lock>
 8007a16:	6833      	ldr	r3, [r6, #0]
 8007a18:	461c      	mov	r4, r3
 8007a1a:	bb34      	cbnz	r4, 8007a6a <_malloc_r+0x82>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff ffc2 	bl	80079a8 <sbrk_aligned>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	4604      	mov	r4, r0
 8007a28:	d14d      	bne.n	8007ac6 <_malloc_r+0xde>
 8007a2a:	6834      	ldr	r4, [r6, #0]
 8007a2c:	4626      	mov	r6, r4
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d140      	bne.n	8007ab4 <_malloc_r+0xcc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	4631      	mov	r1, r6
 8007a36:	4638      	mov	r0, r7
 8007a38:	eb04 0803 	add.w	r8, r4, r3
 8007a3c:	f000 fafe 	bl	800803c <_sbrk_r>
 8007a40:	4580      	cmp	r8, r0
 8007a42:	d13a      	bne.n	8007aba <_malloc_r+0xd2>
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	3503      	adds	r5, #3
 8007a48:	1a6d      	subs	r5, r5, r1
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	4629      	mov	r1, r5
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff ffa5 	bl	80079a8 <sbrk_aligned>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d02b      	beq.n	8007aba <_malloc_r+0xd2>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	442b      	add	r3, r5
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	e00e      	b.n	8007a88 <_malloc_r+0xa0>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	1b52      	subs	r2, r2, r5
 8007a6e:	d41e      	bmi.n	8007aae <_malloc_r+0xc6>
 8007a70:	2a0b      	cmp	r2, #11
 8007a72:	d916      	bls.n	8007aa2 <_malloc_r+0xba>
 8007a74:	1961      	adds	r1, r4, r5
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	6025      	str	r5, [r4, #0]
 8007a7a:	bf18      	it	ne
 8007a7c:	6059      	strne	r1, [r3, #4]
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	bf08      	it	eq
 8007a82:	6031      	streq	r1, [r6, #0]
 8007a84:	5162      	str	r2, [r4, r5]
 8007a86:	604b      	str	r3, [r1, #4]
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f104 060b 	add.w	r6, r4, #11
 8007a8e:	f000 fda7 	bl	80085e0 <__malloc_unlock>
 8007a92:	f026 0607 	bic.w	r6, r6, #7
 8007a96:	1d23      	adds	r3, r4, #4
 8007a98:	1af2      	subs	r2, r6, r3
 8007a9a:	d0b6      	beq.n	8007a0a <_malloc_r+0x22>
 8007a9c:	1b9b      	subs	r3, r3, r6
 8007a9e:	50a3      	str	r3, [r4, r2]
 8007aa0:	e7b3      	b.n	8007a0a <_malloc_r+0x22>
 8007aa2:	6862      	ldr	r2, [r4, #4]
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	bf0c      	ite	eq
 8007aa8:	6032      	streq	r2, [r6, #0]
 8007aaa:	605a      	strne	r2, [r3, #4]
 8007aac:	e7ec      	b.n	8007a88 <_malloc_r+0xa0>
 8007aae:	4623      	mov	r3, r4
 8007ab0:	6864      	ldr	r4, [r4, #4]
 8007ab2:	e7b2      	b.n	8007a1a <_malloc_r+0x32>
 8007ab4:	4634      	mov	r4, r6
 8007ab6:	6876      	ldr	r6, [r6, #4]
 8007ab8:	e7b9      	b.n	8007a2e <_malloc_r+0x46>
 8007aba:	230c      	movs	r3, #12
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f000 fd8e 	bl	80085e0 <__malloc_unlock>
 8007ac4:	e7a1      	b.n	8007a0a <_malloc_r+0x22>
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	e7de      	b.n	8007a88 <_malloc_r+0xa0>
 8007aca:	bf00      	nop
 8007acc:	20019404 	.word	0x20019404

08007ad0 <__ssputs_r>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	688e      	ldr	r6, [r1, #8]
 8007ad6:	429e      	cmp	r6, r3
 8007ad8:	4682      	mov	sl, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	4690      	mov	r8, r2
 8007ade:	461f      	mov	r7, r3
 8007ae0:	d838      	bhi.n	8007b54 <__ssputs_r+0x84>
 8007ae2:	898a      	ldrh	r2, [r1, #12]
 8007ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae8:	d032      	beq.n	8007b50 <__ssputs_r+0x80>
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	6909      	ldr	r1, [r1, #16]
 8007aee:	eba5 0901 	sub.w	r9, r5, r1
 8007af2:	6965      	ldr	r5, [r4, #20]
 8007af4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007afc:	3301      	adds	r3, #1
 8007afe:	444b      	add	r3, r9
 8007b00:	106d      	asrs	r5, r5, #1
 8007b02:	429d      	cmp	r5, r3
 8007b04:	bf38      	it	cc
 8007b06:	461d      	movcc	r5, r3
 8007b08:	0553      	lsls	r3, r2, #21
 8007b0a:	d531      	bpl.n	8007b70 <__ssputs_r+0xa0>
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7ff ff6b 	bl	80079e8 <_malloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	b950      	cbnz	r0, 8007b2c <__ssputs_r+0x5c>
 8007b16:	230c      	movs	r3, #12
 8007b18:	f8ca 3000 	str.w	r3, [sl]
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	6921      	ldr	r1, [r4, #16]
 8007b2e:	464a      	mov	r2, r9
 8007b30:	f7ff fb46 	bl	80071c0 <memcpy>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	6126      	str	r6, [r4, #16]
 8007b42:	6165      	str	r5, [r4, #20]
 8007b44:	444e      	add	r6, r9
 8007b46:	eba5 0509 	sub.w	r5, r5, r9
 8007b4a:	6026      	str	r6, [r4, #0]
 8007b4c:	60a5      	str	r5, [r4, #8]
 8007b4e:	463e      	mov	r6, r7
 8007b50:	42be      	cmp	r6, r7
 8007b52:	d900      	bls.n	8007b56 <__ssputs_r+0x86>
 8007b54:	463e      	mov	r6, r7
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	4632      	mov	r2, r6
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	f000 fd20 	bl	80085a0 <memmove>
 8007b60:	68a3      	ldr	r3, [r4, #8]
 8007b62:	1b9b      	subs	r3, r3, r6
 8007b64:	60a3      	str	r3, [r4, #8]
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	4433      	add	r3, r6
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7db      	b.n	8007b28 <__ssputs_r+0x58>
 8007b70:	462a      	mov	r2, r5
 8007b72:	f000 fd3b 	bl	80085ec <_realloc_r>
 8007b76:	4606      	mov	r6, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1e1      	bne.n	8007b40 <__ssputs_r+0x70>
 8007b7c:	6921      	ldr	r1, [r4, #16]
 8007b7e:	4650      	mov	r0, sl
 8007b80:	f7ff fec6 	bl	8007910 <_free_r>
 8007b84:	e7c7      	b.n	8007b16 <__ssputs_r+0x46>
	...

08007b88 <_svfiprintf_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	4698      	mov	r8, r3
 8007b8e:	898b      	ldrh	r3, [r1, #12]
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	b09d      	sub	sp, #116	; 0x74
 8007b94:	4607      	mov	r7, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	d50e      	bpl.n	8007bba <_svfiprintf_r+0x32>
 8007b9c:	690b      	ldr	r3, [r1, #16]
 8007b9e:	b963      	cbnz	r3, 8007bba <_svfiprintf_r+0x32>
 8007ba0:	2140      	movs	r1, #64	; 0x40
 8007ba2:	f7ff ff21 	bl	80079e8 <_malloc_r>
 8007ba6:	6028      	str	r0, [r5, #0]
 8007ba8:	6128      	str	r0, [r5, #16]
 8007baa:	b920      	cbnz	r0, 8007bb6 <_svfiprintf_r+0x2e>
 8007bac:	230c      	movs	r3, #12
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	e0d1      	b.n	8007d5a <_svfiprintf_r+0x1d2>
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	616b      	str	r3, [r5, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc8:	2330      	movs	r3, #48	; 0x30
 8007bca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d74 <_svfiprintf_r+0x1ec>
 8007bce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bd2:	f04f 0901 	mov.w	r9, #1
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	469a      	mov	sl, r3
 8007bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bde:	b10a      	cbz	r2, 8007be4 <_svfiprintf_r+0x5c>
 8007be0:	2a25      	cmp	r2, #37	; 0x25
 8007be2:	d1f9      	bne.n	8007bd8 <_svfiprintf_r+0x50>
 8007be4:	ebba 0b04 	subs.w	fp, sl, r4
 8007be8:	d00b      	beq.n	8007c02 <_svfiprintf_r+0x7a>
 8007bea:	465b      	mov	r3, fp
 8007bec:	4622      	mov	r2, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ff6d 	bl	8007ad0 <__ssputs_r>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f000 80aa 	beq.w	8007d50 <_svfiprintf_r+0x1c8>
 8007bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bfe:	445a      	add	r2, fp
 8007c00:	9209      	str	r2, [sp, #36]	; 0x24
 8007c02:	f89a 3000 	ldrb.w	r3, [sl]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80a2 	beq.w	8007d50 <_svfiprintf_r+0x1c8>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c16:	f10a 0a01 	add.w	sl, sl, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	9307      	str	r3, [sp, #28]
 8007c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c22:	931a      	str	r3, [sp, #104]	; 0x68
 8007c24:	4654      	mov	r4, sl
 8007c26:	2205      	movs	r2, #5
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	4851      	ldr	r0, [pc, #324]	; (8007d74 <_svfiprintf_r+0x1ec>)
 8007c2e:	f7f8 fb57 	bl	80002e0 <memchr>
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	b9d8      	cbnz	r0, 8007c6e <_svfiprintf_r+0xe6>
 8007c36:	06d0      	lsls	r0, r2, #27
 8007c38:	bf44      	itt	mi
 8007c3a:	2320      	movmi	r3, #32
 8007c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c40:	0711      	lsls	r1, r2, #28
 8007c42:	bf44      	itt	mi
 8007c44:	232b      	movmi	r3, #43	; 0x2b
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c50:	d015      	beq.n	8007c7e <_svfiprintf_r+0xf6>
 8007c52:	9a07      	ldr	r2, [sp, #28]
 8007c54:	4654      	mov	r4, sl
 8007c56:	2000      	movs	r0, #0
 8007c58:	f04f 0c0a 	mov.w	ip, #10
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c62:	3b30      	subs	r3, #48	; 0x30
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d94e      	bls.n	8007d06 <_svfiprintf_r+0x17e>
 8007c68:	b1b0      	cbz	r0, 8007c98 <_svfiprintf_r+0x110>
 8007c6a:	9207      	str	r2, [sp, #28]
 8007c6c:	e014      	b.n	8007c98 <_svfiprintf_r+0x110>
 8007c6e:	eba0 0308 	sub.w	r3, r0, r8
 8007c72:	fa09 f303 	lsl.w	r3, r9, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	46a2      	mov	sl, r4
 8007c7c:	e7d2      	b.n	8007c24 <_svfiprintf_r+0x9c>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfbb      	ittet	lt
 8007c8a:	425b      	neglt	r3, r3
 8007c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c90:	9307      	strge	r3, [sp, #28]
 8007c92:	9307      	strlt	r3, [sp, #28]
 8007c94:	bfb8      	it	lt
 8007c96:	9204      	strlt	r2, [sp, #16]
 8007c98:	7823      	ldrb	r3, [r4, #0]
 8007c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9c:	d10c      	bne.n	8007cb8 <_svfiprintf_r+0x130>
 8007c9e:	7863      	ldrb	r3, [r4, #1]
 8007ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca2:	d135      	bne.n	8007d10 <_svfiprintf_r+0x188>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9203      	str	r2, [sp, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bfb8      	it	lt
 8007cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cb4:	3402      	adds	r4, #2
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d84 <_svfiprintf_r+0x1fc>
 8007cbc:	7821      	ldrb	r1, [r4, #0]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	f7f8 fb0d 	bl	80002e0 <memchr>
 8007cc6:	b140      	cbz	r0, 8007cda <_svfiprintf_r+0x152>
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	eba0 000a 	sub.w	r0, r0, sl
 8007cce:	fa03 f000 	lsl.w	r0, r3, r0
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	4303      	orrs	r3, r0
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	4826      	ldr	r0, [pc, #152]	; (8007d78 <_svfiprintf_r+0x1f0>)
 8007ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	f7f8 fafb 	bl	80002e0 <memchr>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d038      	beq.n	8007d60 <_svfiprintf_r+0x1d8>
 8007cee:	4b23      	ldr	r3, [pc, #140]	; (8007d7c <_svfiprintf_r+0x1f4>)
 8007cf0:	bb1b      	cbnz	r3, 8007d3a <_svfiprintf_r+0x1b2>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	3307      	adds	r3, #7
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	4433      	add	r3, r6
 8007d02:	9309      	str	r3, [sp, #36]	; 0x24
 8007d04:	e767      	b.n	8007bd6 <_svfiprintf_r+0x4e>
 8007d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	e7a5      	b.n	8007c5c <_svfiprintf_r+0xd4>
 8007d10:	2300      	movs	r3, #0
 8007d12:	3401      	adds	r4, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 0c0a 	mov.w	ip, #10
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d22:	3a30      	subs	r2, #48	; 0x30
 8007d24:	2a09      	cmp	r2, #9
 8007d26:	d903      	bls.n	8007d30 <_svfiprintf_r+0x1a8>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0c5      	beq.n	8007cb8 <_svfiprintf_r+0x130>
 8007d2c:	9105      	str	r1, [sp, #20]
 8007d2e:	e7c3      	b.n	8007cb8 <_svfiprintf_r+0x130>
 8007d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d34:	4604      	mov	r4, r0
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7f0      	b.n	8007d1c <_svfiprintf_r+0x194>
 8007d3a:	ab03      	add	r3, sp, #12
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <_svfiprintf_r+0x1f8>)
 8007d42:	a904      	add	r1, sp, #16
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7fd feb7 	bl	8005ab8 <_printf_float>
 8007d4a:	1c42      	adds	r2, r0, #1
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	d1d6      	bne.n	8007cfe <_svfiprintf_r+0x176>
 8007d50:	89ab      	ldrh	r3, [r5, #12]
 8007d52:	065b      	lsls	r3, r3, #25
 8007d54:	f53f af2c 	bmi.w	8007bb0 <_svfiprintf_r+0x28>
 8007d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d5a:	b01d      	add	sp, #116	; 0x74
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	ab03      	add	r3, sp, #12
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	462a      	mov	r2, r5
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <_svfiprintf_r+0x1f8>)
 8007d68:	a904      	add	r1, sp, #16
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f7fe f948 	bl	8006000 <_printf_i>
 8007d70:	e7eb      	b.n	8007d4a <_svfiprintf_r+0x1c2>
 8007d72:	bf00      	nop
 8007d74:	0801c52c 	.word	0x0801c52c
 8007d78:	0801c536 	.word	0x0801c536
 8007d7c:	08005ab9 	.word	0x08005ab9
 8007d80:	08007ad1 	.word	0x08007ad1
 8007d84:	0801c532 	.word	0x0801c532

08007d88 <__sfputc_r>:
 8007d88:	6893      	ldr	r3, [r2, #8]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	b410      	push	{r4}
 8007d90:	6093      	str	r3, [r2, #8]
 8007d92:	da08      	bge.n	8007da6 <__sfputc_r+0x1e>
 8007d94:	6994      	ldr	r4, [r2, #24]
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	db01      	blt.n	8007d9e <__sfputc_r+0x16>
 8007d9a:	290a      	cmp	r1, #10
 8007d9c:	d103      	bne.n	8007da6 <__sfputc_r+0x1e>
 8007d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da2:	f000 b99f 	b.w	80080e4 <__swbuf_r>
 8007da6:	6813      	ldr	r3, [r2, #0]
 8007da8:	1c58      	adds	r0, r3, #1
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	7019      	strb	r1, [r3, #0]
 8007dae:	4608      	mov	r0, r1
 8007db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <__sfputs_r>:
 8007db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db8:	4606      	mov	r6, r0
 8007dba:	460f      	mov	r7, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	18d5      	adds	r5, r2, r3
 8007dc0:	42ac      	cmp	r4, r5
 8007dc2:	d101      	bne.n	8007dc8 <__sfputs_r+0x12>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e007      	b.n	8007dd8 <__sfputs_r+0x22>
 8007dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dcc:	463a      	mov	r2, r7
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ffda 	bl	8007d88 <__sfputc_r>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d1f3      	bne.n	8007dc0 <__sfputs_r+0xa>
 8007dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ddc <_vfiprintf_r>:
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	460d      	mov	r5, r1
 8007de2:	b09d      	sub	sp, #116	; 0x74
 8007de4:	4614      	mov	r4, r2
 8007de6:	4698      	mov	r8, r3
 8007de8:	4606      	mov	r6, r0
 8007dea:	b118      	cbz	r0, 8007df4 <_vfiprintf_r+0x18>
 8007dec:	6983      	ldr	r3, [r0, #24]
 8007dee:	b90b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x18>
 8007df0:	f7ff f938 	bl	8007064 <__sinit>
 8007df4:	4b89      	ldr	r3, [pc, #548]	; (800801c <_vfiprintf_r+0x240>)
 8007df6:	429d      	cmp	r5, r3
 8007df8:	d11b      	bne.n	8007e32 <_vfiprintf_r+0x56>
 8007dfa:	6875      	ldr	r5, [r6, #4]
 8007dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	d405      	bmi.n	8007e0e <_vfiprintf_r+0x32>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	059a      	lsls	r2, r3, #22
 8007e06:	d402      	bmi.n	8007e0e <_vfiprintf_r+0x32>
 8007e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0a:	f7ff f9ce 	bl	80071aa <__retarget_lock_acquire_recursive>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	071b      	lsls	r3, r3, #28
 8007e12:	d501      	bpl.n	8007e18 <_vfiprintf_r+0x3c>
 8007e14:	692b      	ldr	r3, [r5, #16]
 8007e16:	b9eb      	cbnz	r3, 8007e54 <_vfiprintf_r+0x78>
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f9c6 	bl	80081ac <__swsetup_r>
 8007e20:	b1c0      	cbz	r0, 8007e54 <_vfiprintf_r+0x78>
 8007e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e24:	07dc      	lsls	r4, r3, #31
 8007e26:	d50e      	bpl.n	8007e46 <_vfiprintf_r+0x6a>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	b01d      	add	sp, #116	; 0x74
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	4b7b      	ldr	r3, [pc, #492]	; (8008020 <_vfiprintf_r+0x244>)
 8007e34:	429d      	cmp	r5, r3
 8007e36:	d101      	bne.n	8007e3c <_vfiprintf_r+0x60>
 8007e38:	68b5      	ldr	r5, [r6, #8]
 8007e3a:	e7df      	b.n	8007dfc <_vfiprintf_r+0x20>
 8007e3c:	4b79      	ldr	r3, [pc, #484]	; (8008024 <_vfiprintf_r+0x248>)
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	bf08      	it	eq
 8007e42:	68f5      	ldreq	r5, [r6, #12]
 8007e44:	e7da      	b.n	8007dfc <_vfiprintf_r+0x20>
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	0598      	lsls	r0, r3, #22
 8007e4a:	d4ed      	bmi.n	8007e28 <_vfiprintf_r+0x4c>
 8007e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4e:	f7ff f9ad 	bl	80071ac <__retarget_lock_release_recursive>
 8007e52:	e7e9      	b.n	8007e28 <_vfiprintf_r+0x4c>
 8007e54:	2300      	movs	r3, #0
 8007e56:	9309      	str	r3, [sp, #36]	; 0x24
 8007e58:	2320      	movs	r3, #32
 8007e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e62:	2330      	movs	r3, #48	; 0x30
 8007e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008028 <_vfiprintf_r+0x24c>
 8007e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6c:	f04f 0901 	mov.w	r9, #1
 8007e70:	4623      	mov	r3, r4
 8007e72:	469a      	mov	sl, r3
 8007e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e78:	b10a      	cbz	r2, 8007e7e <_vfiprintf_r+0xa2>
 8007e7a:	2a25      	cmp	r2, #37	; 0x25
 8007e7c:	d1f9      	bne.n	8007e72 <_vfiprintf_r+0x96>
 8007e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e82:	d00b      	beq.n	8007e9c <_vfiprintf_r+0xc0>
 8007e84:	465b      	mov	r3, fp
 8007e86:	4622      	mov	r2, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ff93 	bl	8007db6 <__sfputs_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	f000 80aa 	beq.w	8007fea <_vfiprintf_r+0x20e>
 8007e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e98:	445a      	add	r2, fp
 8007e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80a2 	beq.w	8007fea <_vfiprintf_r+0x20e>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb0:	f10a 0a01 	add.w	sl, sl, #1
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	9307      	str	r3, [sp, #28]
 8007eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebe:	4654      	mov	r4, sl
 8007ec0:	2205      	movs	r2, #5
 8007ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec6:	4858      	ldr	r0, [pc, #352]	; (8008028 <_vfiprintf_r+0x24c>)
 8007ec8:	f7f8 fa0a 	bl	80002e0 <memchr>
 8007ecc:	9a04      	ldr	r2, [sp, #16]
 8007ece:	b9d8      	cbnz	r0, 8007f08 <_vfiprintf_r+0x12c>
 8007ed0:	06d1      	lsls	r1, r2, #27
 8007ed2:	bf44      	itt	mi
 8007ed4:	2320      	movmi	r3, #32
 8007ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eda:	0713      	lsls	r3, r2, #28
 8007edc:	bf44      	itt	mi
 8007ede:	232b      	movmi	r3, #43	; 0x2b
 8007ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eea:	d015      	beq.n	8007f18 <_vfiprintf_r+0x13c>
 8007eec:	9a07      	ldr	r2, [sp, #28]
 8007eee:	4654      	mov	r4, sl
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	f04f 0c0a 	mov.w	ip, #10
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007efc:	3b30      	subs	r3, #48	; 0x30
 8007efe:	2b09      	cmp	r3, #9
 8007f00:	d94e      	bls.n	8007fa0 <_vfiprintf_r+0x1c4>
 8007f02:	b1b0      	cbz	r0, 8007f32 <_vfiprintf_r+0x156>
 8007f04:	9207      	str	r2, [sp, #28]
 8007f06:	e014      	b.n	8007f32 <_vfiprintf_r+0x156>
 8007f08:	eba0 0308 	sub.w	r3, r0, r8
 8007f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	46a2      	mov	sl, r4
 8007f16:	e7d2      	b.n	8007ebe <_vfiprintf_r+0xe2>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	1d19      	adds	r1, r3, #4
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	9103      	str	r1, [sp, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bfbb      	ittet	lt
 8007f24:	425b      	neglt	r3, r3
 8007f26:	f042 0202 	orrlt.w	r2, r2, #2
 8007f2a:	9307      	strge	r3, [sp, #28]
 8007f2c:	9307      	strlt	r3, [sp, #28]
 8007f2e:	bfb8      	it	lt
 8007f30:	9204      	strlt	r2, [sp, #16]
 8007f32:	7823      	ldrb	r3, [r4, #0]
 8007f34:	2b2e      	cmp	r3, #46	; 0x2e
 8007f36:	d10c      	bne.n	8007f52 <_vfiprintf_r+0x176>
 8007f38:	7863      	ldrb	r3, [r4, #1]
 8007f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3c:	d135      	bne.n	8007faa <_vfiprintf_r+0x1ce>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	1d1a      	adds	r2, r3, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	9203      	str	r2, [sp, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfb8      	it	lt
 8007f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f4e:	3402      	adds	r4, #2
 8007f50:	9305      	str	r3, [sp, #20]
 8007f52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008038 <_vfiprintf_r+0x25c>
 8007f56:	7821      	ldrb	r1, [r4, #0]
 8007f58:	2203      	movs	r2, #3
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	f7f8 f9c0 	bl	80002e0 <memchr>
 8007f60:	b140      	cbz	r0, 8007f74 <_vfiprintf_r+0x198>
 8007f62:	2340      	movs	r3, #64	; 0x40
 8007f64:	eba0 000a 	sub.w	r0, r0, sl
 8007f68:	fa03 f000 	lsl.w	r0, r3, r0
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	4303      	orrs	r3, r0
 8007f70:	3401      	adds	r4, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f78:	482c      	ldr	r0, [pc, #176]	; (800802c <_vfiprintf_r+0x250>)
 8007f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f7e:	2206      	movs	r2, #6
 8007f80:	f7f8 f9ae 	bl	80002e0 <memchr>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d03f      	beq.n	8008008 <_vfiprintf_r+0x22c>
 8007f88:	4b29      	ldr	r3, [pc, #164]	; (8008030 <_vfiprintf_r+0x254>)
 8007f8a:	bb1b      	cbnz	r3, 8007fd4 <_vfiprintf_r+0x1f8>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	3307      	adds	r3, #7
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	9303      	str	r3, [sp, #12]
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	443b      	add	r3, r7
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9e:	e767      	b.n	8007e70 <_vfiprintf_r+0x94>
 8007fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7a5      	b.n	8007ef6 <_vfiprintf_r+0x11a>
 8007faa:	2300      	movs	r3, #0
 8007fac:	3401      	adds	r4, #1
 8007fae:	9305      	str	r3, [sp, #20]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fbc:	3a30      	subs	r2, #48	; 0x30
 8007fbe:	2a09      	cmp	r2, #9
 8007fc0:	d903      	bls.n	8007fca <_vfiprintf_r+0x1ee>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0c5      	beq.n	8007f52 <_vfiprintf_r+0x176>
 8007fc6:	9105      	str	r1, [sp, #20]
 8007fc8:	e7c3      	b.n	8007f52 <_vfiprintf_r+0x176>
 8007fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fce:	4604      	mov	r4, r0
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7f0      	b.n	8007fb6 <_vfiprintf_r+0x1da>
 8007fd4:	ab03      	add	r3, sp, #12
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	462a      	mov	r2, r5
 8007fda:	4b16      	ldr	r3, [pc, #88]	; (8008034 <_vfiprintf_r+0x258>)
 8007fdc:	a904      	add	r1, sp, #16
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7fd fd6a 	bl	8005ab8 <_printf_float>
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	1c78      	adds	r0, r7, #1
 8007fe8:	d1d6      	bne.n	8007f98 <_vfiprintf_r+0x1bc>
 8007fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d405      	bmi.n	8007ffc <_vfiprintf_r+0x220>
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	059a      	lsls	r2, r3, #22
 8007ff4:	d402      	bmi.n	8007ffc <_vfiprintf_r+0x220>
 8007ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff8:	f7ff f8d8 	bl	80071ac <__retarget_lock_release_recursive>
 8007ffc:	89ab      	ldrh	r3, [r5, #12]
 8007ffe:	065b      	lsls	r3, r3, #25
 8008000:	f53f af12 	bmi.w	8007e28 <_vfiprintf_r+0x4c>
 8008004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008006:	e711      	b.n	8007e2c <_vfiprintf_r+0x50>
 8008008:	ab03      	add	r3, sp, #12
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	462a      	mov	r2, r5
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <_vfiprintf_r+0x258>)
 8008010:	a904      	add	r1, sp, #16
 8008012:	4630      	mov	r0, r6
 8008014:	f7fd fff4 	bl	8006000 <_printf_i>
 8008018:	e7e4      	b.n	8007fe4 <_vfiprintf_r+0x208>
 800801a:	bf00      	nop
 800801c:	0801c394 	.word	0x0801c394
 8008020:	0801c3b4 	.word	0x0801c3b4
 8008024:	0801c374 	.word	0x0801c374
 8008028:	0801c52c 	.word	0x0801c52c
 800802c:	0801c536 	.word	0x0801c536
 8008030:	08005ab9 	.word	0x08005ab9
 8008034:	08007db7 	.word	0x08007db7
 8008038:	0801c532 	.word	0x0801c532

0800803c <_sbrk_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d06      	ldr	r5, [pc, #24]	; (8008058 <_sbrk_r+0x1c>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	602b      	str	r3, [r5, #0]
 8008048:	f7fa f864 	bl	8002114 <_sbrk>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_sbrk_r+0x1a>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_sbrk_r+0x1a>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	2001940c 	.word	0x2001940c

0800805c <__sread>:
 800805c:	b510      	push	{r4, lr}
 800805e:	460c      	mov	r4, r1
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	f000 faf2 	bl	800864c <_read_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	bfab      	itete	ge
 800806c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800806e:	89a3      	ldrhlt	r3, [r4, #12]
 8008070:	181b      	addge	r3, r3, r0
 8008072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008076:	bfac      	ite	ge
 8008078:	6563      	strge	r3, [r4, #84]	; 0x54
 800807a:	81a3      	strhlt	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__swrite>:
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	461f      	mov	r7, r3
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	05db      	lsls	r3, r3, #23
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4616      	mov	r6, r2
 800808e:	d505      	bpl.n	800809c <__swrite+0x1e>
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	2302      	movs	r3, #2
 8008096:	2200      	movs	r2, #0
 8008098:	f000 f9f8 	bl	800848c <_lseek_r>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f000 b869 	b.w	8008188 <_write_r>

080080b6 <__sseek>:
 80080b6:	b510      	push	{r4, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080be:	f000 f9e5 	bl	800848c <_lseek_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	bf15      	itete	ne
 80080c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080d2:	81a3      	strheq	r3, [r4, #12]
 80080d4:	bf18      	it	ne
 80080d6:	81a3      	strhne	r3, [r4, #12]
 80080d8:	bd10      	pop	{r4, pc}

080080da <__sclose>:
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 b8f1 	b.w	80082c4 <_close_r>
	...

080080e4 <__swbuf_r>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	460e      	mov	r6, r1
 80080e8:	4614      	mov	r4, r2
 80080ea:	4605      	mov	r5, r0
 80080ec:	b118      	cbz	r0, 80080f6 <__swbuf_r+0x12>
 80080ee:	6983      	ldr	r3, [r0, #24]
 80080f0:	b90b      	cbnz	r3, 80080f6 <__swbuf_r+0x12>
 80080f2:	f7fe ffb7 	bl	8007064 <__sinit>
 80080f6:	4b21      	ldr	r3, [pc, #132]	; (800817c <__swbuf_r+0x98>)
 80080f8:	429c      	cmp	r4, r3
 80080fa:	d12b      	bne.n	8008154 <__swbuf_r+0x70>
 80080fc:	686c      	ldr	r4, [r5, #4]
 80080fe:	69a3      	ldr	r3, [r4, #24]
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	071a      	lsls	r2, r3, #28
 8008106:	d52f      	bpl.n	8008168 <__swbuf_r+0x84>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	b36b      	cbz	r3, 8008168 <__swbuf_r+0x84>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	6820      	ldr	r0, [r4, #0]
 8008110:	1ac0      	subs	r0, r0, r3
 8008112:	6963      	ldr	r3, [r4, #20]
 8008114:	b2f6      	uxtb	r6, r6
 8008116:	4283      	cmp	r3, r0
 8008118:	4637      	mov	r7, r6
 800811a:	dc04      	bgt.n	8008126 <__swbuf_r+0x42>
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f966 	bl	80083f0 <_fflush_r>
 8008124:	bb30      	cbnz	r0, 8008174 <__swbuf_r+0x90>
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	3b01      	subs	r3, #1
 800812a:	60a3      	str	r3, [r4, #8]
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	701e      	strb	r6, [r3, #0]
 8008134:	6963      	ldr	r3, [r4, #20]
 8008136:	3001      	adds	r0, #1
 8008138:	4283      	cmp	r3, r0
 800813a:	d004      	beq.n	8008146 <__swbuf_r+0x62>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	07db      	lsls	r3, r3, #31
 8008140:	d506      	bpl.n	8008150 <__swbuf_r+0x6c>
 8008142:	2e0a      	cmp	r6, #10
 8008144:	d104      	bne.n	8008150 <__swbuf_r+0x6c>
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f000 f951 	bl	80083f0 <_fflush_r>
 800814e:	b988      	cbnz	r0, 8008174 <__swbuf_r+0x90>
 8008150:	4638      	mov	r0, r7
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <__swbuf_r+0x9c>)
 8008156:	429c      	cmp	r4, r3
 8008158:	d101      	bne.n	800815e <__swbuf_r+0x7a>
 800815a:	68ac      	ldr	r4, [r5, #8]
 800815c:	e7cf      	b.n	80080fe <__swbuf_r+0x1a>
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <__swbuf_r+0xa0>)
 8008160:	429c      	cmp	r4, r3
 8008162:	bf08      	it	eq
 8008164:	68ec      	ldreq	r4, [r5, #12]
 8008166:	e7ca      	b.n	80080fe <__swbuf_r+0x1a>
 8008168:	4621      	mov	r1, r4
 800816a:	4628      	mov	r0, r5
 800816c:	f000 f81e 	bl	80081ac <__swsetup_r>
 8008170:	2800      	cmp	r0, #0
 8008172:	d0cb      	beq.n	800810c <__swbuf_r+0x28>
 8008174:	f04f 37ff 	mov.w	r7, #4294967295
 8008178:	e7ea      	b.n	8008150 <__swbuf_r+0x6c>
 800817a:	bf00      	nop
 800817c:	0801c394 	.word	0x0801c394
 8008180:	0801c3b4 	.word	0x0801c3b4
 8008184:	0801c374 	.word	0x0801c374

08008188 <_write_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_write_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7f9 fe34 	bl	8001e04 <_write>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_write_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_write_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	2001940c 	.word	0x2001940c

080081ac <__swsetup_r>:
 80081ac:	4b32      	ldr	r3, [pc, #200]	; (8008278 <__swsetup_r+0xcc>)
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	b125      	cbz	r5, 80081c2 <__swsetup_r+0x16>
 80081b8:	69ab      	ldr	r3, [r5, #24]
 80081ba:	b913      	cbnz	r3, 80081c2 <__swsetup_r+0x16>
 80081bc:	4628      	mov	r0, r5
 80081be:	f7fe ff51 	bl	8007064 <__sinit>
 80081c2:	4b2e      	ldr	r3, [pc, #184]	; (800827c <__swsetup_r+0xd0>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d10f      	bne.n	80081e8 <__swsetup_r+0x3c>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	0719      	lsls	r1, r3, #28
 80081d2:	d42c      	bmi.n	800822e <__swsetup_r+0x82>
 80081d4:	06dd      	lsls	r5, r3, #27
 80081d6:	d411      	bmi.n	80081fc <__swsetup_r+0x50>
 80081d8:	2309      	movs	r3, #9
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	f04f 30ff 	mov.w	r0, #4294967295
 80081e6:	e03e      	b.n	8008266 <__swsetup_r+0xba>
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <__swsetup_r+0xd4>)
 80081ea:	429c      	cmp	r4, r3
 80081ec:	d101      	bne.n	80081f2 <__swsetup_r+0x46>
 80081ee:	68ac      	ldr	r4, [r5, #8]
 80081f0:	e7eb      	b.n	80081ca <__swsetup_r+0x1e>
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <__swsetup_r+0xd8>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	bf08      	it	eq
 80081f8:	68ec      	ldreq	r4, [r5, #12]
 80081fa:	e7e6      	b.n	80081ca <__swsetup_r+0x1e>
 80081fc:	0758      	lsls	r0, r3, #29
 80081fe:	d512      	bpl.n	8008226 <__swsetup_r+0x7a>
 8008200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008202:	b141      	cbz	r1, 8008216 <__swsetup_r+0x6a>
 8008204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__swsetup_r+0x66>
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff fb7f 	bl	8007910 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	; 0x34
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	2300      	movs	r3, #0
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	b94b      	cbnz	r3, 8008246 <__swsetup_r+0x9a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d003      	beq.n	8008246 <__swsetup_r+0x9a>
 800823e:	4621      	mov	r1, r4
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f95b 	bl	80084fc <__smakebuf_r>
 8008246:	89a0      	ldrh	r0, [r4, #12]
 8008248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824c:	f010 0301 	ands.w	r3, r0, #1
 8008250:	d00a      	beq.n	8008268 <__swsetup_r+0xbc>
 8008252:	2300      	movs	r3, #0
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	6963      	ldr	r3, [r4, #20]
 8008258:	425b      	negs	r3, r3
 800825a:	61a3      	str	r3, [r4, #24]
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b943      	cbnz	r3, 8008272 <__swsetup_r+0xc6>
 8008260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008264:	d1ba      	bne.n	80081dc <__swsetup_r+0x30>
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	0781      	lsls	r1, r0, #30
 800826a:	bf58      	it	pl
 800826c:	6963      	ldrpl	r3, [r4, #20]
 800826e:	60a3      	str	r3, [r4, #8]
 8008270:	e7f4      	b.n	800825c <__swsetup_r+0xb0>
 8008272:	2000      	movs	r0, #0
 8008274:	e7f7      	b.n	8008266 <__swsetup_r+0xba>
 8008276:	bf00      	nop
 8008278:	20000014 	.word	0x20000014
 800827c:	0801c394 	.word	0x0801c394
 8008280:	0801c3b4 	.word	0x0801c3b4
 8008284:	0801c374 	.word	0x0801c374

08008288 <__assert_func>:
 8008288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800828a:	4614      	mov	r4, r2
 800828c:	461a      	mov	r2, r3
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <__assert_func+0x2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4605      	mov	r5, r0
 8008294:	68d8      	ldr	r0, [r3, #12]
 8008296:	b14c      	cbz	r4, 80082ac <__assert_func+0x24>
 8008298:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <__assert_func+0x30>)
 800829a:	9100      	str	r1, [sp, #0]
 800829c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a0:	4906      	ldr	r1, [pc, #24]	; (80082bc <__assert_func+0x34>)
 80082a2:	462b      	mov	r3, r5
 80082a4:	f000 f8e0 	bl	8008468 <fiprintf>
 80082a8:	f000 f9ef 	bl	800868a <abort>
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__assert_func+0x38>)
 80082ae:	461c      	mov	r4, r3
 80082b0:	e7f3      	b.n	800829a <__assert_func+0x12>
 80082b2:	bf00      	nop
 80082b4:	20000014 	.word	0x20000014
 80082b8:	0801c53d 	.word	0x0801c53d
 80082bc:	0801c54a 	.word	0x0801c54a
 80082c0:	0801c578 	.word	0x0801c578

080082c4 <_close_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_close_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7f9 ff13 	bl	80020fa <_close>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_close_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_close_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	2001940c 	.word	0x2001940c

080082e4 <__sflush_r>:
 80082e4:	898a      	ldrh	r2, [r1, #12]
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	0710      	lsls	r0, r2, #28
 80082ee:	460c      	mov	r4, r1
 80082f0:	d458      	bmi.n	80083a4 <__sflush_r+0xc0>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc05      	bgt.n	8008304 <__sflush_r+0x20>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc02      	bgt.n	8008304 <__sflush_r+0x20>
 80082fe:	2000      	movs	r0, #0
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008306:	2e00      	cmp	r6, #0
 8008308:	d0f9      	beq.n	80082fe <__sflush_r+0x1a>
 800830a:	2300      	movs	r3, #0
 800830c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008310:	682f      	ldr	r7, [r5, #0]
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	d032      	beq.n	800837c <__sflush_r+0x98>
 8008316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	075a      	lsls	r2, r3, #29
 800831c:	d505      	bpl.n	800832a <__sflush_r+0x46>
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	1ac0      	subs	r0, r0, r3
 8008322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008324:	b10b      	cbz	r3, 800832a <__sflush_r+0x46>
 8008326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008328:	1ac0      	subs	r0, r0, r3
 800832a:	2300      	movs	r3, #0
 800832c:	4602      	mov	r2, r0
 800832e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008330:	6a21      	ldr	r1, [r4, #32]
 8008332:	4628      	mov	r0, r5
 8008334:	47b0      	blx	r6
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	d106      	bne.n	800834a <__sflush_r+0x66>
 800833c:	6829      	ldr	r1, [r5, #0]
 800833e:	291d      	cmp	r1, #29
 8008340:	d82c      	bhi.n	800839c <__sflush_r+0xb8>
 8008342:	4a2a      	ldr	r2, [pc, #168]	; (80083ec <__sflush_r+0x108>)
 8008344:	40ca      	lsrs	r2, r1
 8008346:	07d6      	lsls	r6, r2, #31
 8008348:	d528      	bpl.n	800839c <__sflush_r+0xb8>
 800834a:	2200      	movs	r2, #0
 800834c:	6062      	str	r2, [r4, #4]
 800834e:	04d9      	lsls	r1, r3, #19
 8008350:	6922      	ldr	r2, [r4, #16]
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	d504      	bpl.n	8008360 <__sflush_r+0x7c>
 8008356:	1c42      	adds	r2, r0, #1
 8008358:	d101      	bne.n	800835e <__sflush_r+0x7a>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b903      	cbnz	r3, 8008360 <__sflush_r+0x7c>
 800835e:	6560      	str	r0, [r4, #84]	; 0x54
 8008360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	2900      	cmp	r1, #0
 8008366:	d0ca      	beq.n	80082fe <__sflush_r+0x1a>
 8008368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836c:	4299      	cmp	r1, r3
 800836e:	d002      	beq.n	8008376 <__sflush_r+0x92>
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff facd 	bl	8007910 <_free_r>
 8008376:	2000      	movs	r0, #0
 8008378:	6360      	str	r0, [r4, #52]	; 0x34
 800837a:	e7c1      	b.n	8008300 <__sflush_r+0x1c>
 800837c:	6a21      	ldr	r1, [r4, #32]
 800837e:	2301      	movs	r3, #1
 8008380:	4628      	mov	r0, r5
 8008382:	47b0      	blx	r6
 8008384:	1c41      	adds	r1, r0, #1
 8008386:	d1c7      	bne.n	8008318 <__sflush_r+0x34>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c4      	beq.n	8008318 <__sflush_r+0x34>
 800838e:	2b1d      	cmp	r3, #29
 8008390:	d001      	beq.n	8008396 <__sflush_r+0xb2>
 8008392:	2b16      	cmp	r3, #22
 8008394:	d101      	bne.n	800839a <__sflush_r+0xb6>
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	e7b1      	b.n	80082fe <__sflush_r+0x1a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x1c>
 80083a4:	690f      	ldr	r7, [r1, #16]
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0a9      	beq.n	80082fe <__sflush_r+0x1a>
 80083aa:	0793      	lsls	r3, r2, #30
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	600f      	str	r7, [r1, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2300      	movne	r3, #0
 80083b8:	eba6 0807 	sub.w	r8, r6, r7
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	dd9c      	ble.n	80082fe <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083c8:	4643      	mov	r3, r8
 80083ca:	463a      	mov	r2, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	2800      	cmp	r0, #0
 80083d2:	dc06      	bgt.n	80083e2 <__sflush_r+0xfe>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e78e      	b.n	8008300 <__sflush_r+0x1c>
 80083e2:	4407      	add	r7, r0
 80083e4:	eba8 0800 	sub.w	r8, r8, r0
 80083e8:	e7e9      	b.n	80083be <__sflush_r+0xda>
 80083ea:	bf00      	nop
 80083ec:	20400001 	.word	0x20400001

080083f0 <_fflush_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b913      	cbnz	r3, 8008400 <_fflush_r+0x10>
 80083fa:	2500      	movs	r5, #0
 80083fc:	4628      	mov	r0, r5
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	b118      	cbz	r0, 800840a <_fflush_r+0x1a>
 8008402:	6983      	ldr	r3, [r0, #24]
 8008404:	b90b      	cbnz	r3, 800840a <_fflush_r+0x1a>
 8008406:	f7fe fe2d 	bl	8007064 <__sinit>
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <_fflush_r+0x6c>)
 800840c:	429c      	cmp	r4, r3
 800840e:	d11b      	bne.n	8008448 <_fflush_r+0x58>
 8008410:	686c      	ldr	r4, [r5, #4]
 8008412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ef      	beq.n	80083fa <_fflush_r+0xa>
 800841a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800841c:	07d0      	lsls	r0, r2, #31
 800841e:	d404      	bmi.n	800842a <_fflush_r+0x3a>
 8008420:	0599      	lsls	r1, r3, #22
 8008422:	d402      	bmi.n	800842a <_fflush_r+0x3a>
 8008424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008426:	f7fe fec0 	bl	80071aa <__retarget_lock_acquire_recursive>
 800842a:	4628      	mov	r0, r5
 800842c:	4621      	mov	r1, r4
 800842e:	f7ff ff59 	bl	80082e4 <__sflush_r>
 8008432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008434:	07da      	lsls	r2, r3, #31
 8008436:	4605      	mov	r5, r0
 8008438:	d4e0      	bmi.n	80083fc <_fflush_r+0xc>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	059b      	lsls	r3, r3, #22
 800843e:	d4dd      	bmi.n	80083fc <_fflush_r+0xc>
 8008440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008442:	f7fe feb3 	bl	80071ac <__retarget_lock_release_recursive>
 8008446:	e7d9      	b.n	80083fc <_fflush_r+0xc>
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <_fflush_r+0x70>)
 800844a:	429c      	cmp	r4, r3
 800844c:	d101      	bne.n	8008452 <_fflush_r+0x62>
 800844e:	68ac      	ldr	r4, [r5, #8]
 8008450:	e7df      	b.n	8008412 <_fflush_r+0x22>
 8008452:	4b04      	ldr	r3, [pc, #16]	; (8008464 <_fflush_r+0x74>)
 8008454:	429c      	cmp	r4, r3
 8008456:	bf08      	it	eq
 8008458:	68ec      	ldreq	r4, [r5, #12]
 800845a:	e7da      	b.n	8008412 <_fflush_r+0x22>
 800845c:	0801c394 	.word	0x0801c394
 8008460:	0801c3b4 	.word	0x0801c3b4
 8008464:	0801c374 	.word	0x0801c374

08008468 <fiprintf>:
 8008468:	b40e      	push	{r1, r2, r3}
 800846a:	b503      	push	{r0, r1, lr}
 800846c:	4601      	mov	r1, r0
 800846e:	ab03      	add	r3, sp, #12
 8008470:	4805      	ldr	r0, [pc, #20]	; (8008488 <fiprintf+0x20>)
 8008472:	f853 2b04 	ldr.w	r2, [r3], #4
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	f7ff fcaf 	bl	8007ddc <_vfiprintf_r>
 800847e:	b002      	add	sp, #8
 8008480:	f85d eb04 	ldr.w	lr, [sp], #4
 8008484:	b003      	add	sp, #12
 8008486:	4770      	bx	lr
 8008488:	20000014 	.word	0x20000014

0800848c <_lseek_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	; (80084ac <_lseek_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f9 fe37 	bl	800210e <_lseek>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_lseek_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_lseek_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	2001940c 	.word	0x2001940c

080084b0 <__swhatbuf_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	460e      	mov	r6, r1
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	2900      	cmp	r1, #0
 80084ba:	b096      	sub	sp, #88	; 0x58
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	da08      	bge.n	80084d4 <__swhatbuf_r+0x24>
 80084c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	061a      	lsls	r2, r3, #24
 80084cc:	d410      	bmi.n	80084f0 <__swhatbuf_r+0x40>
 80084ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d2:	e00e      	b.n	80084f2 <__swhatbuf_r+0x42>
 80084d4:	466a      	mov	r2, sp
 80084d6:	f000 f8df 	bl	8008698 <_fstat_r>
 80084da:	2800      	cmp	r0, #0
 80084dc:	dbf1      	blt.n	80084c2 <__swhatbuf_r+0x12>
 80084de:	9a01      	ldr	r2, [sp, #4]
 80084e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084e8:	425a      	negs	r2, r3
 80084ea:	415a      	adcs	r2, r3
 80084ec:	602a      	str	r2, [r5, #0]
 80084ee:	e7ee      	b.n	80084ce <__swhatbuf_r+0x1e>
 80084f0:	2340      	movs	r3, #64	; 0x40
 80084f2:	2000      	movs	r0, #0
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	b016      	add	sp, #88	; 0x58
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080084fc <__smakebuf_r>:
 80084fc:	898b      	ldrh	r3, [r1, #12]
 80084fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008500:	079d      	lsls	r5, r3, #30
 8008502:	4606      	mov	r6, r0
 8008504:	460c      	mov	r4, r1
 8008506:	d507      	bpl.n	8008518 <__smakebuf_r+0x1c>
 8008508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	6123      	str	r3, [r4, #16]
 8008510:	2301      	movs	r3, #1
 8008512:	6163      	str	r3, [r4, #20]
 8008514:	b002      	add	sp, #8
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	ab01      	add	r3, sp, #4
 800851a:	466a      	mov	r2, sp
 800851c:	f7ff ffc8 	bl	80084b0 <__swhatbuf_r>
 8008520:	9900      	ldr	r1, [sp, #0]
 8008522:	4605      	mov	r5, r0
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff fa5f 	bl	80079e8 <_malloc_r>
 800852a:	b948      	cbnz	r0, 8008540 <__smakebuf_r+0x44>
 800852c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008530:	059a      	lsls	r2, r3, #22
 8008532:	d4ef      	bmi.n	8008514 <__smakebuf_r+0x18>
 8008534:	f023 0303 	bic.w	r3, r3, #3
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	e7e3      	b.n	8008508 <__smakebuf_r+0xc>
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <__smakebuf_r+0x7c>)
 8008542:	62b3      	str	r3, [r6, #40]	; 0x28
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	6020      	str	r0, [r4, #0]
 8008548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	9b00      	ldr	r3, [sp, #0]
 8008550:	6163      	str	r3, [r4, #20]
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	6120      	str	r0, [r4, #16]
 8008556:	b15b      	cbz	r3, 8008570 <__smakebuf_r+0x74>
 8008558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800855c:	4630      	mov	r0, r6
 800855e:	f000 f8ad 	bl	80086bc <_isatty_r>
 8008562:	b128      	cbz	r0, 8008570 <__smakebuf_r+0x74>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	89a0      	ldrh	r0, [r4, #12]
 8008572:	4305      	orrs	r5, r0
 8008574:	81a5      	strh	r5, [r4, #12]
 8008576:	e7cd      	b.n	8008514 <__smakebuf_r+0x18>
 8008578:	08006ffd 	.word	0x08006ffd

0800857c <__ascii_mbtowc>:
 800857c:	b082      	sub	sp, #8
 800857e:	b901      	cbnz	r1, 8008582 <__ascii_mbtowc+0x6>
 8008580:	a901      	add	r1, sp, #4
 8008582:	b142      	cbz	r2, 8008596 <__ascii_mbtowc+0x1a>
 8008584:	b14b      	cbz	r3, 800859a <__ascii_mbtowc+0x1e>
 8008586:	7813      	ldrb	r3, [r2, #0]
 8008588:	600b      	str	r3, [r1, #0]
 800858a:	7812      	ldrb	r2, [r2, #0]
 800858c:	1e10      	subs	r0, r2, #0
 800858e:	bf18      	it	ne
 8008590:	2001      	movne	r0, #1
 8008592:	b002      	add	sp, #8
 8008594:	4770      	bx	lr
 8008596:	4610      	mov	r0, r2
 8008598:	e7fb      	b.n	8008592 <__ascii_mbtowc+0x16>
 800859a:	f06f 0001 	mvn.w	r0, #1
 800859e:	e7f8      	b.n	8008592 <__ascii_mbtowc+0x16>

080085a0 <memmove>:
 80085a0:	4288      	cmp	r0, r1
 80085a2:	b510      	push	{r4, lr}
 80085a4:	eb01 0402 	add.w	r4, r1, r2
 80085a8:	d902      	bls.n	80085b0 <memmove+0x10>
 80085aa:	4284      	cmp	r4, r0
 80085ac:	4623      	mov	r3, r4
 80085ae:	d807      	bhi.n	80085c0 <memmove+0x20>
 80085b0:	1e43      	subs	r3, r0, #1
 80085b2:	42a1      	cmp	r1, r4
 80085b4:	d008      	beq.n	80085c8 <memmove+0x28>
 80085b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085be:	e7f8      	b.n	80085b2 <memmove+0x12>
 80085c0:	4402      	add	r2, r0
 80085c2:	4601      	mov	r1, r0
 80085c4:	428a      	cmp	r2, r1
 80085c6:	d100      	bne.n	80085ca <memmove+0x2a>
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085d2:	e7f7      	b.n	80085c4 <memmove+0x24>

080085d4 <__malloc_lock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__malloc_lock+0x8>)
 80085d6:	f7fe bde8 	b.w	80071aa <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	20019400 	.word	0x20019400

080085e0 <__malloc_unlock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__malloc_unlock+0x8>)
 80085e2:	f7fe bde3 	b.w	80071ac <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	20019400 	.word	0x20019400

080085ec <_realloc_r>:
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	4680      	mov	r8, r0
 80085f2:	4614      	mov	r4, r2
 80085f4:	460e      	mov	r6, r1
 80085f6:	b921      	cbnz	r1, 8008602 <_realloc_r+0x16>
 80085f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085fc:	4611      	mov	r1, r2
 80085fe:	f7ff b9f3 	b.w	80079e8 <_malloc_r>
 8008602:	b92a      	cbnz	r2, 8008610 <_realloc_r+0x24>
 8008604:	f7ff f984 	bl	8007910 <_free_r>
 8008608:	4625      	mov	r5, r4
 800860a:	4628      	mov	r0, r5
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	f000 f864 	bl	80086dc <_malloc_usable_size_r>
 8008614:	4284      	cmp	r4, r0
 8008616:	4607      	mov	r7, r0
 8008618:	d802      	bhi.n	8008620 <_realloc_r+0x34>
 800861a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800861e:	d812      	bhi.n	8008646 <_realloc_r+0x5a>
 8008620:	4621      	mov	r1, r4
 8008622:	4640      	mov	r0, r8
 8008624:	f7ff f9e0 	bl	80079e8 <_malloc_r>
 8008628:	4605      	mov	r5, r0
 800862a:	2800      	cmp	r0, #0
 800862c:	d0ed      	beq.n	800860a <_realloc_r+0x1e>
 800862e:	42bc      	cmp	r4, r7
 8008630:	4622      	mov	r2, r4
 8008632:	4631      	mov	r1, r6
 8008634:	bf28      	it	cs
 8008636:	463a      	movcs	r2, r7
 8008638:	f7fe fdc2 	bl	80071c0 <memcpy>
 800863c:	4631      	mov	r1, r6
 800863e:	4640      	mov	r0, r8
 8008640:	f7ff f966 	bl	8007910 <_free_r>
 8008644:	e7e1      	b.n	800860a <_realloc_r+0x1e>
 8008646:	4635      	mov	r5, r6
 8008648:	e7df      	b.n	800860a <_realloc_r+0x1e>
	...

0800864c <_read_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	; (800866c <_read_r+0x20>)
 8008650:	4604      	mov	r4, r0
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	2200      	movs	r2, #0
 8008658:	602a      	str	r2, [r5, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f7f9 fd40 	bl	80020e0 <_read>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_read_r+0x1e>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_read_r+0x1e>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	2001940c 	.word	0x2001940c

08008670 <__ascii_wctomb>:
 8008670:	b149      	cbz	r1, 8008686 <__ascii_wctomb+0x16>
 8008672:	2aff      	cmp	r2, #255	; 0xff
 8008674:	bf85      	ittet	hi
 8008676:	238a      	movhi	r3, #138	; 0x8a
 8008678:	6003      	strhi	r3, [r0, #0]
 800867a:	700a      	strbls	r2, [r1, #0]
 800867c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008680:	bf98      	it	ls
 8008682:	2001      	movls	r0, #1
 8008684:	4770      	bx	lr
 8008686:	4608      	mov	r0, r1
 8008688:	4770      	bx	lr

0800868a <abort>:
 800868a:	b508      	push	{r3, lr}
 800868c:	2006      	movs	r0, #6
 800868e:	f000 f855 	bl	800873c <raise>
 8008692:	2001      	movs	r0, #1
 8008694:	f7f9 fd1e 	bl	80020d4 <_exit>

08008698 <_fstat_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_fstat_r+0x20>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f7f9 fd2b 	bl	8002100 <_fstat>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d102      	bne.n	80086b4 <_fstat_r+0x1c>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b103      	cbz	r3, 80086b4 <_fstat_r+0x1c>
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	bf00      	nop
 80086b8:	2001940c 	.word	0x2001940c

080086bc <_isatty_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_isatty_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f9 fd1f 	bl	800210a <_isatty>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_isatty_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_isatty_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	2001940c 	.word	0x2001940c

080086dc <_malloc_usable_size_r>:
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f18      	subs	r0, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbc      	itt	lt
 80086e6:	580b      	ldrlt	r3, [r1, r0]
 80086e8:	18c0      	addlt	r0, r0, r3
 80086ea:	4770      	bx	lr

080086ec <_raise_r>:
 80086ec:	291f      	cmp	r1, #31
 80086ee:	b538      	push	{r3, r4, r5, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	d904      	bls.n	8008700 <_raise_r+0x14>
 80086f6:	2316      	movs	r3, #22
 80086f8:	6003      	str	r3, [r0, #0]
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008702:	b112      	cbz	r2, 800870a <_raise_r+0x1e>
 8008704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008708:	b94b      	cbnz	r3, 800871e <_raise_r+0x32>
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f830 	bl	8008770 <_getpid_r>
 8008710:	462a      	mov	r2, r5
 8008712:	4601      	mov	r1, r0
 8008714:	4620      	mov	r0, r4
 8008716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871a:	f000 b817 	b.w	800874c <_kill_r>
 800871e:	2b01      	cmp	r3, #1
 8008720:	d00a      	beq.n	8008738 <_raise_r+0x4c>
 8008722:	1c59      	adds	r1, r3, #1
 8008724:	d103      	bne.n	800872e <_raise_r+0x42>
 8008726:	2316      	movs	r3, #22
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	2001      	movs	r0, #1
 800872c:	e7e7      	b.n	80086fe <_raise_r+0x12>
 800872e:	2400      	movs	r4, #0
 8008730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008734:	4628      	mov	r0, r5
 8008736:	4798      	blx	r3
 8008738:	2000      	movs	r0, #0
 800873a:	e7e0      	b.n	80086fe <_raise_r+0x12>

0800873c <raise>:
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <raise+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f7ff bfd3 	b.w	80086ec <_raise_r>
 8008746:	bf00      	nop
 8008748:	20000014 	.word	0x20000014

0800874c <_kill_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	; (800876c <_kill_r+0x20>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	f7f9 fcb3 	bl	80020c4 <_kill>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d102      	bne.n	8008768 <_kill_r+0x1c>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b103      	cbz	r3, 8008768 <_kill_r+0x1c>
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	2001940c 	.word	0x2001940c

08008770 <_getpid_r>:
 8008770:	f7f9 bca6 	b.w	80020c0 <_getpid>
 8008774:	0000      	movs	r0, r0
	...

08008778 <log>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	ed2d 8b02 	vpush	{d8}
 800877e:	ec55 4b10 	vmov	r4, r5, d0
 8008782:	f000 f855 	bl	8008830 <__ieee754_log>
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	eeb0 8a40 	vmov.f32	s16, s0
 8008792:	eef0 8a60 	vmov.f32	s17, s1
 8008796:	f7f8 fa49 	bl	8000c2c <__aeabi_dcmpun>
 800879a:	b998      	cbnz	r0, 80087c4 <log+0x4c>
 800879c:	2200      	movs	r2, #0
 800879e:	2300      	movs	r3, #0
 80087a0:	4620      	mov	r0, r4
 80087a2:	4629      	mov	r1, r5
 80087a4:	f7f8 fa38 	bl	8000c18 <__aeabi_dcmpgt>
 80087a8:	b960      	cbnz	r0, 80087c4 <log+0x4c>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f8 fa09 	bl	8000bc8 <__aeabi_dcmpeq>
 80087b6:	b160      	cbz	r0, 80087d2 <log+0x5a>
 80087b8:	f7fd f8ac 	bl	8005914 <__errno>
 80087bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80087e8 <log+0x70>
 80087c0:	2322      	movs	r3, #34	; 0x22
 80087c2:	6003      	str	r3, [r0, #0]
 80087c4:	eeb0 0a48 	vmov.f32	s0, s16
 80087c8:	eef0 0a68 	vmov.f32	s1, s17
 80087cc:	ecbd 8b02 	vpop	{d8}
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
 80087d2:	f7fd f89f 	bl	8005914 <__errno>
 80087d6:	ecbd 8b02 	vpop	{d8}
 80087da:	2321      	movs	r3, #33	; 0x21
 80087dc:	6003      	str	r3, [r0, #0]
 80087de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e2:	4803      	ldr	r0, [pc, #12]	; (80087f0 <log+0x78>)
 80087e4:	f000 b9e4 	b.w	8008bb0 <nan>
 80087e8:	00000000 	.word	0x00000000
 80087ec:	fff00000 	.word	0xfff00000
 80087f0:	0801c578 	.word	0x0801c578

080087f4 <sqrtf>:
 80087f4:	b508      	push	{r3, lr}
 80087f6:	ed2d 8b02 	vpush	{d8}
 80087fa:	eeb0 8a40 	vmov.f32	s16, s0
 80087fe:	f000 f9d1 	bl	8008ba4 <__ieee754_sqrtf>
 8008802:	eeb4 8a48 	vcmp.f32	s16, s16
 8008806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880a:	d60c      	bvs.n	8008826 <sqrtf+0x32>
 800880c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800882c <sqrtf+0x38>
 8008810:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008818:	d505      	bpl.n	8008826 <sqrtf+0x32>
 800881a:	f7fd f87b 	bl	8005914 <__errno>
 800881e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008822:	2321      	movs	r3, #33	; 0x21
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	ecbd 8b02 	vpop	{d8}
 800882a:	bd08      	pop	{r3, pc}
 800882c:	00000000 	.word	0x00000000

08008830 <__ieee754_log>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	ec51 0b10 	vmov	r0, r1, d0
 8008838:	ed2d 8b04 	vpush	{d8-d9}
 800883c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008840:	b083      	sub	sp, #12
 8008842:	460d      	mov	r5, r1
 8008844:	da29      	bge.n	800889a <__ieee754_log+0x6a>
 8008846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800884a:	4303      	orrs	r3, r0
 800884c:	ee10 2a10 	vmov	r2, s0
 8008850:	d10c      	bne.n	800886c <__ieee754_log+0x3c>
 8008852:	49cf      	ldr	r1, [pc, #828]	; (8008b90 <__ieee754_log+0x360>)
 8008854:	2200      	movs	r2, #0
 8008856:	2300      	movs	r3, #0
 8008858:	2000      	movs	r0, #0
 800885a:	f7f8 f877 	bl	800094c <__aeabi_ddiv>
 800885e:	ec41 0b10 	vmov	d0, r0, r1
 8008862:	b003      	add	sp, #12
 8008864:	ecbd 8b04 	vpop	{d8-d9}
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	2900      	cmp	r1, #0
 800886e:	da05      	bge.n	800887c <__ieee754_log+0x4c>
 8008870:	460b      	mov	r3, r1
 8008872:	f7f7 fd89 	bl	8000388 <__aeabi_dsub>
 8008876:	2200      	movs	r2, #0
 8008878:	2300      	movs	r3, #0
 800887a:	e7ee      	b.n	800885a <__ieee754_log+0x2a>
 800887c:	4bc5      	ldr	r3, [pc, #788]	; (8008b94 <__ieee754_log+0x364>)
 800887e:	2200      	movs	r2, #0
 8008880:	f7f7 ff3a 	bl	80006f8 <__aeabi_dmul>
 8008884:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008888:	460d      	mov	r5, r1
 800888a:	4ac3      	ldr	r2, [pc, #780]	; (8008b98 <__ieee754_log+0x368>)
 800888c:	4295      	cmp	r5, r2
 800888e:	dd06      	ble.n	800889e <__ieee754_log+0x6e>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	f7f7 fd7a 	bl	800038c <__adddf3>
 8008898:	e7e1      	b.n	800885e <__ieee754_log+0x2e>
 800889a:	2300      	movs	r3, #0
 800889c:	e7f5      	b.n	800888a <__ieee754_log+0x5a>
 800889e:	152c      	asrs	r4, r5, #20
 80088a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80088a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80088a8:	441c      	add	r4, r3
 80088aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80088ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80088b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80088ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80088be:	ea42 0105 	orr.w	r1, r2, r5
 80088c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80088c6:	2200      	movs	r2, #0
 80088c8:	4bb4      	ldr	r3, [pc, #720]	; (8008b9c <__ieee754_log+0x36c>)
 80088ca:	f7f7 fd5d 	bl	8000388 <__aeabi_dsub>
 80088ce:	1cab      	adds	r3, r5, #2
 80088d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	4682      	mov	sl, r0
 80088d8:	468b      	mov	fp, r1
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	dc53      	bgt.n	8008988 <__ieee754_log+0x158>
 80088e0:	2300      	movs	r3, #0
 80088e2:	f7f8 f971 	bl	8000bc8 <__aeabi_dcmpeq>
 80088e6:	b1d0      	cbz	r0, 800891e <__ieee754_log+0xee>
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	f000 8122 	beq.w	8008b32 <__ieee754_log+0x302>
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7f7 fe98 	bl	8000624 <__aeabi_i2d>
 80088f4:	a390      	add	r3, pc, #576	; (adr r3, 8008b38 <__ieee754_log+0x308>)
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	f7f7 fefb 	bl	80006f8 <__aeabi_dmul>
 8008902:	a38f      	add	r3, pc, #572	; (adr r3, 8008b40 <__ieee754_log+0x310>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	4630      	mov	r0, r6
 800890e:	4639      	mov	r1, r7
 8008910:	f7f7 fef2 	bl	80006f8 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	e7ba      	b.n	8008894 <__ieee754_log+0x64>
 800891e:	a38a      	add	r3, pc, #552	; (adr r3, 8008b48 <__ieee754_log+0x318>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	4650      	mov	r0, sl
 8008926:	4659      	mov	r1, fp
 8008928:	f7f7 fee6 	bl	80006f8 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	2000      	movs	r0, #0
 8008932:	499b      	ldr	r1, [pc, #620]	; (8008ba0 <__ieee754_log+0x370>)
 8008934:	f7f7 fd28 	bl	8000388 <__aeabi_dsub>
 8008938:	4652      	mov	r2, sl
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	465b      	mov	r3, fp
 8008940:	4650      	mov	r0, sl
 8008942:	4659      	mov	r1, fp
 8008944:	f7f7 fed8 	bl	80006f8 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f7 fed2 	bl	80006f8 <__aeabi_dmul>
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	b914      	cbnz	r4, 8008960 <__ieee754_log+0x130>
 800895a:	4632      	mov	r2, r6
 800895c:	463b      	mov	r3, r7
 800895e:	e0a2      	b.n	8008aa6 <__ieee754_log+0x276>
 8008960:	4620      	mov	r0, r4
 8008962:	f7f7 fe5f 	bl	8000624 <__aeabi_i2d>
 8008966:	a374      	add	r3, pc, #464	; (adr r3, 8008b38 <__ieee754_log+0x308>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	4680      	mov	r8, r0
 800896e:	4689      	mov	r9, r1
 8008970:	f7f7 fec2 	bl	80006f8 <__aeabi_dmul>
 8008974:	a372      	add	r3, pc, #456	; (adr r3, 8008b40 <__ieee754_log+0x310>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	4604      	mov	r4, r0
 800897c:	460d      	mov	r5, r1
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f7 feb9 	bl	80006f8 <__aeabi_dmul>
 8008986:	e0a7      	b.n	8008ad8 <__ieee754_log+0x2a8>
 8008988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800898c:	f7f7 fcfe 	bl	800038c <__adddf3>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4650      	mov	r0, sl
 8008996:	4659      	mov	r1, fp
 8008998:	f7f7 ffd8 	bl	800094c <__aeabi_ddiv>
 800899c:	ec41 0b18 	vmov	d8, r0, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7f7 fe3f 	bl	8000624 <__aeabi_i2d>
 80089a6:	ec53 2b18 	vmov	r2, r3, d8
 80089aa:	ec41 0b19 	vmov	d9, r0, r1
 80089ae:	ec51 0b18 	vmov	r0, r1, d8
 80089b2:	f7f7 fea1 	bl	80006f8 <__aeabi_dmul>
 80089b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80089ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4680      	mov	r8, r0
 80089c6:	4689      	mov	r9, r1
 80089c8:	f7f7 fe96 	bl	80006f8 <__aeabi_dmul>
 80089cc:	a360      	add	r3, pc, #384	; (adr r3, 8008b50 <__ieee754_log+0x320>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	f7f7 fe8f 	bl	80006f8 <__aeabi_dmul>
 80089da:	a35f      	add	r3, pc, #380	; (adr r3, 8008b58 <__ieee754_log+0x328>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fcd4 	bl	800038c <__adddf3>
 80089e4:	4632      	mov	r2, r6
 80089e6:	463b      	mov	r3, r7
 80089e8:	f7f7 fe86 	bl	80006f8 <__aeabi_dmul>
 80089ec:	a35c      	add	r3, pc, #368	; (adr r3, 8008b60 <__ieee754_log+0x330>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fccb 	bl	800038c <__adddf3>
 80089f6:	4632      	mov	r2, r6
 80089f8:	463b      	mov	r3, r7
 80089fa:	f7f7 fe7d 	bl	80006f8 <__aeabi_dmul>
 80089fe:	a35a      	add	r3, pc, #360	; (adr r3, 8008b68 <__ieee754_log+0x338>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f7f7 fcc2 	bl	800038c <__adddf3>
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	f7f7 fe74 	bl	80006f8 <__aeabi_dmul>
 8008a10:	a357      	add	r3, pc, #348	; (adr r3, 8008b70 <__ieee754_log+0x340>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	4680      	mov	r8, r0
 8008a18:	4689      	mov	r9, r1
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f7 fe6b 	bl	80006f8 <__aeabi_dmul>
 8008a22:	a355      	add	r3, pc, #340	; (adr r3, 8008b78 <__ieee754_log+0x348>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fcb0 	bl	800038c <__adddf3>
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	463b      	mov	r3, r7
 8008a30:	f7f7 fe62 	bl	80006f8 <__aeabi_dmul>
 8008a34:	a352      	add	r3, pc, #328	; (adr r3, 8008b80 <__ieee754_log+0x350>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fca7 	bl	800038c <__adddf3>
 8008a3e:	4632      	mov	r2, r6
 8008a40:	463b      	mov	r3, r7
 8008a42:	f7f7 fe59 	bl	80006f8 <__aeabi_dmul>
 8008a46:	460b      	mov	r3, r1
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	f7f7 fc9d 	bl	800038c <__adddf3>
 8008a52:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	3551      	adds	r5, #81	; 0x51
 8008a5a:	431d      	orrs	r5, r3
 8008a5c:	2d00      	cmp	r5, #0
 8008a5e:	4680      	mov	r8, r0
 8008a60:	4689      	mov	r9, r1
 8008a62:	dd48      	ble.n	8008af6 <__ieee754_log+0x2c6>
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <__ieee754_log+0x370>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	4650      	mov	r0, sl
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	f7f7 fe44 	bl	80006f8 <__aeabi_dmul>
 8008a70:	4652      	mov	r2, sl
 8008a72:	465b      	mov	r3, fp
 8008a74:	f7f7 fe40 	bl	80006f8 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	460f      	mov	r7, r1
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f7 fc82 	bl	800038c <__adddf3>
 8008a88:	ec53 2b18 	vmov	r2, r3, d8
 8008a8c:	f7f7 fe34 	bl	80006f8 <__aeabi_dmul>
 8008a90:	4680      	mov	r8, r0
 8008a92:	4689      	mov	r9, r1
 8008a94:	b964      	cbnz	r4, 8008ab0 <__ieee754_log+0x280>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f7 fc73 	bl	8000388 <__aeabi_dsub>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	f7f7 fc6d 	bl	8000388 <__aeabi_dsub>
 8008aae:	e6d6      	b.n	800885e <__ieee754_log+0x2e>
 8008ab0:	a321      	add	r3, pc, #132	; (adr r3, 8008b38 <__ieee754_log+0x308>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	ec51 0b19 	vmov	r0, r1, d9
 8008aba:	f7f7 fe1d 	bl	80006f8 <__aeabi_dmul>
 8008abe:	a320      	add	r3, pc, #128	; (adr r3, 8008b40 <__ieee754_log+0x310>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	ec51 0b19 	vmov	r0, r1, d9
 8008acc:	f7f7 fe14 	bl	80006f8 <__aeabi_dmul>
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	f7f7 fc5a 	bl	800038c <__adddf3>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fc52 	bl	8000388 <__aeabi_dsub>
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	465b      	mov	r3, fp
 8008ae8:	f7f7 fc4e 	bl	8000388 <__aeabi_dsub>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4620      	mov	r0, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	e7d9      	b.n	8008aaa <__ieee754_log+0x27a>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4650      	mov	r0, sl
 8008afc:	4659      	mov	r1, fp
 8008afe:	f7f7 fc43 	bl	8000388 <__aeabi_dsub>
 8008b02:	ec53 2b18 	vmov	r2, r3, d8
 8008b06:	f7f7 fdf7 	bl	80006f8 <__aeabi_dmul>
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	2c00      	cmp	r4, #0
 8008b10:	f43f af23 	beq.w	800895a <__ieee754_log+0x12a>
 8008b14:	a308      	add	r3, pc, #32	; (adr r3, 8008b38 <__ieee754_log+0x308>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	ec51 0b19 	vmov	r0, r1, d9
 8008b1e:	f7f7 fdeb 	bl	80006f8 <__aeabi_dmul>
 8008b22:	a307      	add	r3, pc, #28	; (adr r3, 8008b40 <__ieee754_log+0x310>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	ec51 0b19 	vmov	r0, r1, d9
 8008b30:	e727      	b.n	8008982 <__ieee754_log+0x152>
 8008b32:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008b88 <__ieee754_log+0x358>
 8008b36:	e694      	b.n	8008862 <__ieee754_log+0x32>
 8008b38:	fee00000 	.word	0xfee00000
 8008b3c:	3fe62e42 	.word	0x3fe62e42
 8008b40:	35793c76 	.word	0x35793c76
 8008b44:	3dea39ef 	.word	0x3dea39ef
 8008b48:	55555555 	.word	0x55555555
 8008b4c:	3fd55555 	.word	0x3fd55555
 8008b50:	df3e5244 	.word	0xdf3e5244
 8008b54:	3fc2f112 	.word	0x3fc2f112
 8008b58:	96cb03de 	.word	0x96cb03de
 8008b5c:	3fc74664 	.word	0x3fc74664
 8008b60:	94229359 	.word	0x94229359
 8008b64:	3fd24924 	.word	0x3fd24924
 8008b68:	55555593 	.word	0x55555593
 8008b6c:	3fe55555 	.word	0x3fe55555
 8008b70:	d078c69f 	.word	0xd078c69f
 8008b74:	3fc39a09 	.word	0x3fc39a09
 8008b78:	1d8e78af 	.word	0x1d8e78af
 8008b7c:	3fcc71c5 	.word	0x3fcc71c5
 8008b80:	9997fa04 	.word	0x9997fa04
 8008b84:	3fd99999 	.word	0x3fd99999
	...
 8008b90:	c3500000 	.word	0xc3500000
 8008b94:	43500000 	.word	0x43500000
 8008b98:	7fefffff 	.word	0x7fefffff
 8008b9c:	3ff00000 	.word	0x3ff00000
 8008ba0:	3fe00000 	.word	0x3fe00000

08008ba4 <__ieee754_sqrtf>:
 8008ba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008ba8:	4770      	bx	lr
 8008baa:	0000      	movs	r0, r0
 8008bac:	0000      	movs	r0, r0
	...

08008bb0 <nan>:
 8008bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008bb8 <nan+0x8>
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	00000000 	.word	0x00000000
 8008bbc:	7ff80000 	.word	0x7ff80000

08008bc0 <_init>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr

08008bcc <_fini>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr
