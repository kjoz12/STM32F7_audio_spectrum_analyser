
FFT_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ad4  08009498  08009498  00019498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf6c  0801cf6c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf6c  0801cf6c  0002cf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf74  0801cf74  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf74  0801cf74  0002cf74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf78  0801cf78  0002cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801cf7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006300  200001e0  0801d15c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064e0  0801d15c  000364e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f16  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e26  00000000  00000000  00043126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00046d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276f6  00000000  00000000  000479b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a0b  00000000  00000000  0006f0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ececb  00000000  00000000  00081ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0016e97c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  0016ea3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000318f  00000000  00000000  001731e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800947c 	.word	0x0800947c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800947c 	.word	0x0800947c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	717b      	strb	r3, [r7, #5]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b1f      	cmp	r3, #31
 8000fd2:	d802      	bhi.n	8000fda <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	e002      	b.n	8000fe0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	753b      	strb	r3, [r7, #20]
 8000fe4:	e012      	b.n	800100c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000fe6:	7dfa      	ldrb	r2, [r7, #23]
 8000fe8:	7d38      	ldrb	r0, [r7, #20]
 8000fea:	7d39      	ldrb	r1, [r7, #20]
 8000fec:	4c3b      	ldr	r4, [pc, #236]	; (80010dc <ILI9341_Draw_Char+0x130>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4423      	add	r3, r4
 8000ff8:	4403      	add	r3, r0
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	f101 0318 	add.w	r3, r1, #24
 8001000:	443b      	add	r3, r7
 8001002:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001006:	7d3b      	ldrb	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	753b      	strb	r3, [r7, #20]
 800100c:	7d3b      	ldrb	r3, [r7, #20]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d9e9      	bls.n	8000fe6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b298      	uxth	r0, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	b299      	uxth	r1, r3
 800101a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800101c:	461a      	mov	r2, r3
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b29a      	uxth	r2, r3
 8001026:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	b29c      	uxth	r4, r3
 800102c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4623      	mov	r3, r4
 8001032:	f000 fb17 	bl	8001664 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001036:	2300      	movs	r3, #0
 8001038:	757b      	strb	r3, [r7, #21]
 800103a:	e047      	b.n	80010cc <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	75bb      	strb	r3, [r7, #22]
 8001040:	e03e      	b.n	80010c0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001042:	7d7b      	ldrb	r3, [r7, #21]
 8001044:	3318      	adds	r3, #24
 8001046:	443b      	add	r3, r7
 8001048:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800104c:	461a      	mov	r2, r3
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	fa42 f303 	asr.w	r3, r2, r3
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d02e      	beq.n	80010ba <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800105c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800105e:	2b01      	cmp	r3, #1
 8001060:	d110      	bne.n	8001084 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	b29a      	uxth	r2, r3
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b298      	uxth	r0, r3
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	b29a      	uxth	r2, r3
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	4619      	mov	r1, r3
 800107e:	f000 fa17 	bl	80014b0 <ILI9341_Draw_Pixel>
 8001082:	e01a      	b.n	80010ba <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	b29a      	uxth	r2, r3
 8001088:	7d7b      	ldrb	r3, [r7, #21]
 800108a:	b29b      	uxth	r3, r3
 800108c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800108e:	fb11 f303 	smulbb	r3, r1, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b298      	uxth	r0, r3
 8001098:	797b      	ldrb	r3, [r7, #5]
 800109a:	b29a      	uxth	r2, r3
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80010a2:	fb11 f303 	smulbb	r3, r1, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b299      	uxth	r1, r3
 80010ac:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80010ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4623      	mov	r3, r4
 80010b6:	f000 fad5 	bl	8001664 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
 80010bc:	3301      	adds	r3, #1
 80010be:	75bb      	strb	r3, [r7, #22]
 80010c0:	7dbb      	ldrb	r3, [r7, #22]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d9bd      	bls.n	8001042 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80010c6:	7d7b      	ldrb	r3, [r7, #21]
 80010c8:	3301      	adds	r3, #1
 80010ca:	757b      	strb	r3, [r7, #21]
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d9b4      	bls.n	800103c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	080094d8 	.word	0x080094d8

080010e0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	70fb      	strb	r3, [r7, #3]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70bb      	strb	r3, [r7, #2]
 80010f6:	4613      	mov	r3, r2
 80010f8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80010fa:	e017      	b.n	800112c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	7818      	ldrb	r0, [r3, #0]
 8001104:	883c      	ldrh	r4, [r7, #0]
 8001106:	78ba      	ldrb	r2, [r7, #2]
 8001108:	78f9      	ldrb	r1, [r7, #3]
 800110a:	8bbb      	ldrh	r3, [r7, #28]
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	8b3b      	ldrh	r3, [r7, #24]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4623      	mov	r3, r4
 8001114:	f7ff ff4a 	bl	8000fac <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001118:	8b3b      	ldrh	r3, [r7, #24]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	4413      	add	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	4413      	add	r3, r2
 800112a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e3      	bne.n	80010fc <ILI9341_Draw_Text+0x1c>
    }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
	...

08001140 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800114a:	1df9      	adds	r1, r7, #7
 800114c:	2301      	movs	r3, #1
 800114e:	2201      	movs	r2, #1
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <ILI9341_SPI_Send+0x20>)
 8001152:	f003 fc4a 	bl	80049ea <HAL_SPI_Transmit>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20006464 	.word	0x20006464

08001164 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <ILI9341_Write_Command+0x40>)
 8001176:	f002 f85b 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <ILI9341_Write_Command+0x40>)
 8001182:	f002 f855 	bl	8003230 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffd9 	bl	8001140 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <ILI9341_Write_Command+0x40>)
 8001196:	f002 f84b 	bl	8003230 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020800 	.word	0x40020800

080011a8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <ILI9341_Write_Data+0x40>)
 80011ba:	f002 f839 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <ILI9341_Write_Data+0x40>)
 80011c6:	f002 f833 	bl	8003230 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffb7 	bl	8001140 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ILI9341_Write_Data+0x40>)
 80011da:	f002 f829 	bl	8003230 <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020800 	.word	0x40020800

080011ec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4603      	mov	r3, r0
 8001200:	80bb      	strh	r3, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800120a:	202a      	movs	r0, #42	; 0x2a
 800120c:	f7ff ffaa 	bl	8001164 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffc5 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc0 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	b29b      	uxth	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffb9 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffb4 	bl	80011a8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001240:	202b      	movs	r0, #43	; 0x2b
 8001242:	f7ff ff8f 	bl	8001164 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffaa 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffa5 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff9e 	bl	80011a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800126c:	883b      	ldrh	r3, [r7, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff99 	bl	80011a8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001276:	202c      	movs	r0, #44	; 0x2c
 8001278:	f7ff ff74 	bl	8001164 <ILI9341_Write_Command>
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}

08001284 <ILI9341_Set_Rotation>:
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f7ff ff66 	bl	8001164 <ILI9341_Write_Command>
HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f001 f96f 	bl	800257c <HAL_Delay>
	
switch(screen_rotation) 
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d837      	bhi.n	8001314 <ILI9341_Set_Rotation+0x90>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <ILI9341_Set_Rotation+0x28>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012d3 	.word	0x080012d3
 80012b4:	080012e9 	.word	0x080012e9
 80012b8:	080012ff 	.word	0x080012ff
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80012bc:	2048      	movs	r0, #72	; 0x48
 80012be:	f7ff ff73 	bl	80011a8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <ILI9341_Set_Rotation+0x9c>)
 80012c4:	22f0      	movs	r2, #240	; 0xf0
 80012c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <ILI9341_Set_Rotation+0xa0>)
 80012ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012ce:	801a      	strh	r2, [r3, #0]
			break;
 80012d0:	e021      	b.n	8001316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80012d2:	2028      	movs	r0, #40	; 0x28
 80012d4:	f7ff ff68 	bl	80011a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <ILI9341_Set_Rotation+0x9c>)
 80012da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <ILI9341_Set_Rotation+0xa0>)
 80012e2:	22f0      	movs	r2, #240	; 0xf0
 80012e4:	801a      	strh	r2, [r3, #0]
			break;
 80012e6:	e016      	b.n	8001316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80012e8:	2088      	movs	r0, #136	; 0x88
 80012ea:	f7ff ff5d 	bl	80011a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <ILI9341_Set_Rotation+0x9c>)
 80012f0:	22f0      	movs	r2, #240	; 0xf0
 80012f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <ILI9341_Set_Rotation+0xa0>)
 80012f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012fa:	801a      	strh	r2, [r3, #0]
			break;
 80012fc:	e00b      	b.n	8001316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80012fe:	20e8      	movs	r0, #232	; 0xe8
 8001300:	f7ff ff52 	bl	80011a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <ILI9341_Set_Rotation+0x9c>)
 8001306:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800130a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <ILI9341_Set_Rotation+0xa0>)
 800130e:	22f0      	movs	r2, #240	; 0xf0
 8001310:	801a      	strh	r2, [r3, #0]
			break;
 8001312:	e000      	b.n	8001316 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001314:	bf00      	nop
	}
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000002 	.word	0x20000002
 8001324:	20000000 	.word	0x20000000

08001328 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800132c:	b08d      	sub	sp, #52	; 0x34
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	6039      	str	r1, [r7, #0]
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	466b      	mov	r3, sp
 8001338:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001346:	d202      	bcs.n	800134e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
 800134c:	e002      	b.n	8001354 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800134e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135a:	4840      	ldr	r0, [pc, #256]	; (800145c <ILI9341_Draw_Colour_Burst+0x134>)
 800135c:	f001 ff68 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001366:	483d      	ldr	r0, [pc, #244]	; (800145c <ILI9341_Draw_Colour_Burst+0x134>)
 8001368:	f001 ff62 	bl	8003230 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
 8001372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001378:	460b      	mov	r3, r1
 800137a:	3b01      	subs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	2300      	movs	r3, #0
 8001380:	4688      	mov	r8, r1
 8001382:	4699      	mov	r9, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001390:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001394:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001398:	2300      	movs	r3, #0
 800139a:	460c      	mov	r4, r1
 800139c:	461d      	mov	r5, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	00eb      	lsls	r3, r5, #3
 80013a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ac:	00e2      	lsls	r2, r4, #3
 80013ae:	1dcb      	adds	r3, r1, #7
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	ebad 0d03 	sub.w	sp, sp, r3
 80013b8:	466b      	mov	r3, sp
 80013ba:	3300      	adds	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c2:	e00e      	b.n	80013e2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	4413      	add	r3, r2
 80013ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013ce:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	3301      	adds	r3, #1
 80013d4:	88fa      	ldrh	r2, [r7, #6]
 80013d6:	b2d1      	uxtb	r1, r2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	3302      	adds	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3ec      	bcc.n	80013c4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8001402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001404:	fb01 f202 	mul.w	r2, r1, r2
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d010      	beq.n	8001434 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001416:	e009      	b.n	800142c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	b29a      	uxth	r2, r3
 800141c:	230a      	movs	r3, #10
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <ILI9341_Draw_Colour_Burst+0x138>)
 8001422:	f003 fae2 	bl	80049ea <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	3301      	adds	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3f1      	bcc.n	8001418 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	b29a      	uxth	r2, r3
 8001438:	230a      	movs	r3, #10
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ILI9341_Draw_Colour_Burst+0x138>)
 800143e:	f003 fad4 	bl	80049ea <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <ILI9341_Draw_Colour_Burst+0x134>)
 800144a:	f001 fef1 	bl	8003230 <HAL_GPIO_WritePin>
 800144e:	46b5      	mov	sp, r6
}
 8001450:	bf00      	nop
 8001452:	3734      	adds	r7, #52	; 0x34
 8001454:	46bd      	mov	sp, r7
 8001456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800145a:	bf00      	nop
 800145c:	40020800 	.word	0x40020800
 8001460:	20006464 	.word	0x20006464

08001464 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <ILI9341_Fill_Screen+0x44>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <ILI9341_Fill_Screen+0x48>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	2100      	movs	r1, #0
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff feb5 	bl	80011ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <ILI9341_Fill_Screen+0x44>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <ILI9341_Fill_Screen+0x48>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	461a      	mov	r2, r3
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff44 	bl	8001328 <ILI9341_Draw_Colour_Burst>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000002 	.word	0x20000002
 80014ac:	20000000 	.word	0x20000000

080014b0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	460b      	mov	r3, r1
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <ILI9341_Draw_Pixel+0x1a4>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	f080 80be 	bcs.w	800164c <ILI9341_Draw_Pixel+0x19c>
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <ILI9341_Draw_Pixel+0x1a8>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	88ba      	ldrh	r2, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f080 80b7 	bcs.w	800164c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	485d      	ldr	r0, [pc, #372]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 80014e6:	f001 fea3 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f0:	485a      	ldr	r0, [pc, #360]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 80014f2:	f001 fe9d 	bl	8003230 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80014f6:	202a      	movs	r0, #42	; 0x2a
 80014f8:	f7ff fe22 	bl	8001140 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	4856      	ldr	r0, [pc, #344]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001504:	f001 fe94 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150e:	4853      	ldr	r0, [pc, #332]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001510:	f001 fe8e 	bl	8003230 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151a:	4850      	ldr	r0, [pc, #320]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 800151c:	f001 fe88 	bl	8003230 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	753b      	strb	r3, [r7, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	757b      	strb	r3, [r7, #21]
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	3301      	adds	r3, #1
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b2db      	uxtb	r3, r3
 8001538:	75bb      	strb	r3, [r7, #22]
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001544:	f107 0114 	add.w	r1, r7, #20
 8001548:	2301      	movs	r3, #1
 800154a:	2204      	movs	r2, #4
 800154c:	4844      	ldr	r0, [pc, #272]	; (8001660 <ILI9341_Draw_Pixel+0x1b0>)
 800154e:	f003 fa4c 	bl	80049ea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	4840      	ldr	r0, [pc, #256]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 800155a:	f001 fe69 	bl	8003230 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001564:	483d      	ldr	r0, [pc, #244]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001566:	f001 fe63 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	483a      	ldr	r0, [pc, #232]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001572:	f001 fe5d 	bl	8003230 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001576:	202b      	movs	r0, #43	; 0x2b
 8001578:	f7ff fde2 	bl	8001140 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001582:	4836      	ldr	r0, [pc, #216]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001584:	f001 fe54 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	4833      	ldr	r0, [pc, #204]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001590:	f001 fe4e 	bl	8003230 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	4830      	ldr	r0, [pc, #192]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 800159c:	f001 fe48 	bl	8003230 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	743b      	strb	r3, [r7, #16]
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	747b      	strb	r3, [r7, #17]
 80015b0:	88bb      	ldrh	r3, [r7, #4]
 80015b2:	3301      	adds	r3, #1
 80015b4:	121b      	asrs	r3, r3, #8
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	74bb      	strb	r3, [r7, #18]
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80015c4:	f107 0110 	add.w	r1, r7, #16
 80015c8:	2301      	movs	r3, #1
 80015ca:	2204      	movs	r2, #4
 80015cc:	4824      	ldr	r0, [pc, #144]	; (8001660 <ILI9341_Draw_Pixel+0x1b0>)
 80015ce:	f003 fa0c 	bl	80049ea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4820      	ldr	r0, [pc, #128]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 80015da:	f001 fe29 	bl	8003230 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 80015e6:	f001 fe23 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 80015f2:	f001 fe1d 	bl	8003230 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80015f6:	202c      	movs	r0, #44	; 0x2c
 80015f8:	f7ff fda2 	bl	8001140 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001604:	f001 fe14 	bl	8003230 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001610:	f001 fe0e 	bl	8003230 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 800161c:	f001 fe08 	bl	8003230 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	b29b      	uxth	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	733b      	strb	r3, [r7, #12]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001630:	f107 010c 	add.w	r1, r7, #12
 8001634:	2301      	movs	r3, #1
 8001636:	2202      	movs	r2, #2
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <ILI9341_Draw_Pixel+0x1b0>)
 800163a:	f003 f9d6 	bl	80049ea <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <ILI9341_Draw_Pixel+0x1ac>)
 8001646:	f001 fdf3 	bl	8003230 <HAL_GPIO_WritePin>
 800164a:	e000      	b.n	800164e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800164c:	bf00      	nop
	
}
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000002 	.word	0x20000002
 8001658:	20000000 	.word	0x20000000
 800165c:	40020800 	.word	0x40020800
 8001660:	20006464 	.word	0x20006464

08001664 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <ILI9341_Draw_Rectangle+0xb0>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d23d      	bcs.n	800170a <ILI9341_Draw_Rectangle+0xa6>
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <ILI9341_Draw_Rectangle+0xb4>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d237      	bcs.n	800170a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4413      	add	r3, r2
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <ILI9341_Draw_Rectangle+0xb0>)
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b292      	uxth	r2, r2
 80016a6:	4293      	cmp	r3, r2
 80016a8:	dd05      	ble.n	80016b6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <ILI9341_Draw_Rectangle+0xb0>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80016b6:	88ba      	ldrh	r2, [r7, #4]
 80016b8:	883b      	ldrh	r3, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <ILI9341_Draw_Rectangle+0xb4>)
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	b292      	uxth	r2, r2
 80016c2:	4293      	cmp	r3, r2
 80016c4:	dd05      	ble.n	80016d2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <ILI9341_Draw_Rectangle+0xb4>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	4413      	add	r3, r2
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29c      	uxth	r4, r3
 80016de:	88ba      	ldrh	r2, [r7, #4]
 80016e0:	883b      	ldrh	r3, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	88b9      	ldrh	r1, [r7, #4]
 80016ec:	88f8      	ldrh	r0, [r7, #6]
 80016ee:	4622      	mov	r2, r4
 80016f0:	f7ff fd7c 	bl	80011ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80016f4:	883b      	ldrh	r3, [r7, #0]
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	8b3b      	ldrh	r3, [r7, #24]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe10 	bl	8001328 <ILI9341_Draw_Colour_Burst>
 8001708:	e000      	b.n	800170c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800170a:	bf00      	nop
}
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	20000002 	.word	0x20000002
 8001718:	20000000 	.word	0x20000000

0800171c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_GPIO_Init+0xc0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_GPIO_Init+0xc0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a11      	ldr	r2, [pc, #68]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_GPIO_Init+0xc0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <MX_GPIO_Init+0xc4>)
 80017b2:	f001 fd3d 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80017b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_GPIO_Init+0xc4>)
 80017d0:	f001 fb82 	bl	8002ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800

080017e4 <user_leds_init>:




void user_leds_init(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <user_leds_init+0x64>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <user_leds_init+0x64>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PB0 as output
	GPIOB->MODER |= (1U<<0);
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <user_leds_init+0x68>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <user_leds_init+0x68>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<1);
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <user_leds_init+0x68>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <user_leds_init+0x68>)
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	6013      	str	r3, [r2, #0]

	//Set PB7 as output
	GPIOB->MODER |= (1U<<14);
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <user_leds_init+0x68>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <user_leds_init+0x68>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<15);
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <user_leds_init+0x68>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <user_leds_init+0x68>)
 800181e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001822:	6013      	str	r3, [r2, #0]

	//Set PB14 as output
	GPIOB->MODER |= (1U<<28);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <user_leds_init+0x68>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <user_leds_init+0x68>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<29);
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <user_leds_init+0x68>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <user_leds_init+0x68>)
 8001836:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800183a:	6013      	str	r3, [r2, #0]




}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40020400 	.word	0x40020400

08001850 <led_toggle>:
	GPIOB->ODR ^=(RED_LED | GREEN_LED | BLUE_LED);
}


void led_toggle(ledType led)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	GPIOB->ODR ^=led;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <led_toggle+0x20>)
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <led_toggle+0x20>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4053      	eors	r3, r2
 8001862:	614b      	str	r3, [r1, #20]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40020400 	.word	0x40020400

08001874 <led_on>:


void led_on(ledType led)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |=led;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <led_on+0x20>)
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <led_on+0x20>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	614b      	str	r3, [r1, #20]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40020400 	.word	0x40020400

08001898 <PeriphCommonClock_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PeriphCommonClock_Config(void) //Disappears when I2S1 disabled
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0a2      	sub	sp, #136	; 0x88
 800189c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2284      	movs	r2, #132	; 0x84
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 f88f 	bl	80069c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fbf3 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 80018d4:	f000 fafc 	bl	8001ed0 <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3788      	adds	r7, #136	; 0x88
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DoFFT>:

void DoFFT() {
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 80018e6:	af02      	add	r7, sp, #8
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, fft_in_buf, fft_out_buf,0);
 80018e8:	2300      	movs	r3, #0
 80018ea:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <DoFFT+0x174>)
 80018ec:	495a      	ldr	r1, [pc, #360]	; (8001a58 <DoFFT+0x178>)
 80018ee:	485b      	ldr	r0, [pc, #364]	; (8001a5c <DoFFT+0x17c>)
 80018f0:	f004 f8fa 	bl	8005ae8 <arm_rfft_fast_f32>

	uint16_t peakVal = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	int peak = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	int freqs[FFT_BUFFER_SIZE/2];
	int freqpoint = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	int offset = 150; //variable noisefloor offset
 8001906:	2396      	movs	r3, #150	; 0x96
 8001908:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	float freq = 0;
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001914:	6013      	str	r3, [r2, #0]



	//calculate abs values and linear-to-dB
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800191c:	e03f      	b.n	800199e <DoFFT+0xbe>
		//freqs[freqpoint] = (int)(20*log10f(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1]))))-offset;
		freqs[freqpoint] = (int)(sqrtf(((fft_out_buf[i])*(fft_out_buf[i])) + ((fft_out_buf[i+1])*fft_out_buf[i+1])));
 800191e:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <DoFFT+0x174>)
 8001920:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <DoFFT+0x174>)
 800192e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001942:	3301      	adds	r3, #1
 8001944:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <DoFFT+0x174>)
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	edd3 6a00 	vldr	s13, [r3]
 800194e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001952:	3301      	adds	r3, #1
 8001954:	4a3f      	ldr	r2, [pc, #252]	; (8001a54 <DoFFT+0x174>)
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f007 fd65 	bl	8009438 <sqrtf>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 1a90 	vmov	r1, s15
 800197a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800197e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001982:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8001986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//if (freqs[freqpoint]<100) freqs[freqpoint]=0;
		freqpoint ++;
 800198a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for (int i = 0; i < FFT_BUFFER_SIZE; i += 2) {
 8001994:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8001998:	3302      	adds	r3, #2
 800199a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800199e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	dbba      	blt.n	800191e <DoFFT+0x3e>
	}

	for (int j = 0; j <FFT_BUFFER_SIZE/2; j +=1)
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80019ae:	e032      	b.n	8001a16 <DoFFT+0x136>
	{
		if(freqs[j] > peak)
 80019b0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80019b4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80019b8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 80019c4:	429a      	cmp	r2, r3
 80019c6:	da0d      	bge.n	80019e4 <DoFFT+0x104>
		{
			peak = freqs[j];
 80019c8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80019cc:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80019d0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
			peakVal = j;
 80019dc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80019e0:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e

		}
		freq = (100000*peakVal)/((FFT_BUFFER_SIZE*100000)/48828);
 80019e4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <DoFFT+0x180>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <DoFFT+0x184>)
 80019f0:	fb82 1203 	smull	r1, r2, r2, r3
 80019f4:	441a      	add	r2, r3
 80019f6:	12d2      	asrs	r2, r2, #11
 80019f8:	17db      	asrs	r3, r3, #31
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001a08:	edc3 7a00 	vstr	s15, [r3]
	for (int j = 0; j <FFT_BUFFER_SIZE/2; j +=1)
 8001a0c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8001a10:	3301      	adds	r3, #1
 8001a12:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8001a16:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8001a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1e:	dbc7      	blt.n	80019b0 <DoFFT+0xd0>
//			peakVal = peakVal;
//		}
//	}


printf("%d %d %0.1f\r\n",peak,peakVal,freq);
 8001a20:	f8b7 481e 	ldrh.w	r4, [r7, #2078]	; 0x81e
 8001a24:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f7fe fe0d 	bl	8000648 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9cd 2300 	strd	r2, r3, [sp]
 8001a36:	4622      	mov	r2, r4
 8001a38:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <DoFFT+0x188>)
 8001a3e:	f005 fc35 	bl	80072ac <iprintf>

dataReadyFlag = 0;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <DoFFT+0x18c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]



}
 8001a48:	bf00      	nop
 8001a4a:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20005448 	.word	0x20005448
 8001a58:	20004448 	.word	0x20004448
 8001a5c:	2000644c 	.word	0x2000644c
 8001a60:	000186a0 	.word	0x000186a0
 8001a64:	fa04a397 	.word	0xfa04a397
 8001a68:	08009498 	.word	0x08009498
 8001a6c:	20006448 	.word	0x20006448

08001a70 <HAL_I2S_RxHalfCpltCallback>:
//	}
//	dataReadyFlag = 0;
//}

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	dataReadyFlag = 1;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
	led_toggle(BLUE_LED);
 8001a7e:	2080      	movs	r0, #128	; 0x80
 8001a80:	f7ff fee6 	bl	8001850 <led_toggle>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20006448 	.word	0x20006448

08001a90 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	dataReadyFlag = 2;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_I2S_RxCpltCallback+0x20>)
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
	led_toggle(RED_LED);
 8001a9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001aa2:	f7ff fed5 	bl	8001850 <led_toggle>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20006448 	.word	0x20006448

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aba:	f000 fd02 	bl	80024c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abe:	f000 f8b1 	bl	8001c24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphCommonClock_Config(); // Disappears when I2S1 disabled
 8001ac2:	f7ff fee9 	bl	8001898 <PeriphCommonClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac6:	f7ff fe29 	bl	800171c <MX_GPIO_Init>
  MX_DMA_Init();
 8001aca:	f000 f9b1 	bl	8001e30 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001ace:	f000 f97f 	bl	8001dd0 <MX_USART3_UART_Init>
  MX_I2S2_Init();
 8001ad2:	f000 f913 	bl	8001cfc <MX_I2S2_Init>
  MX_SPI1_Init();
 8001ad6:	f000 f93d 	bl	8001d54 <MX_SPI1_Init>
  MX_SPI5_Init();
 8001ada:	f000 f9ff 	bl	8001edc <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /*Initialise LEDs*/
  user_leds_init();
 8001ade:	f7ff fe81 	bl	80017e4 <user_leds_init>

  /*Initialise UART3 which is connected to USB*/
  //uart3_tx_init();

  /*Initialise FFT*/
  arm_rfft_fast_init_f32(&fft_handler, FFT_BUFFER_SIZE);
 8001ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae6:	4847      	ldr	r0, [pc, #284]	; (8001c04 <main+0x150>)
 8001ae8:	f003 ff4c 	bl	8005984 <arm_rfft_fast_init_f32>

  // Start I2S DMA streams
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(&hi2s2, rxBuf, ADC_BUFFER_SIZE); // Start DMA stream
 8001aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af0:	4945      	ldr	r1, [pc, #276]	; (8001c08 <main+0x154>)
 8001af2:	4846      	ldr	r0, [pc, #280]	; (8001c0c <main+0x158>)
 8001af4:	f001 fc9c 	bl	8003430 <HAL_I2S_Receive_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <main+0x58>
  {
	  led_on(RED_LED);
 8001b02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b06:	f7ff feb5 	bl	8001874 <led_on>
 8001b0a:	e002      	b.n	8001b12 <main+0x5e>
  }
  else
  {
	  led_on(GREEN_LED);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff feb1 	bl	8001874 <led_on>

  while (1)
  {


	  int fft_in_ptr = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
	  if (dataReadyFlag == 1)
 8001b16:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <main+0x15c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d124      	bne.n	8001b68 <main+0xb4>
	  {
		  //processData();
		  //dataReadyFlag = 0;
		  for (int i = 0; i < (ADC_BUFFER_SIZE/2); i += 2)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	e01b      	b.n	8001b5c <main+0xa8>
		  {
//			  fft_in_buf[fft_in_ptr] = (float) ((uint32_t) (rxBuf[i]<<16)|rxBuf[i+1]);
//			  fft_in_buf[fft_in_ptr] += (float) ((uint32_t) (rxBuf[i+2]<<16)|rxBuf[i+3]);

			  fft_in_buf[fft_in_ptr] = rxBuf[i];
 8001b24:	4a38      	ldr	r2, [pc, #224]	; (8001c08 <main+0x154>)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b34:	4a37      	ldr	r2, [pc, #220]	; (8001c14 <main+0x160>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	edc3 7a00 	vstr	s15, [r3]

			  txBuf[i] = rxBuf[i];
 8001b40:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <main+0x154>)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001b48:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <main+0x164>)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  //txBuf[i+1] = rxBuf[i+1];
			  //txBuf[i+2] = rxBuf[i+2];
			  //txBuf[i+3] = rxBuf[i+3];
			  fft_in_ptr++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
		  for (int i = 0; i < (ADC_BUFFER_SIZE/2); i += 2)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b62:	dbdf      	blt.n	8001b24 <main+0x70>


		  }
		  DoFFT();
 8001b64:	f7ff febc 	bl	80018e0 <DoFFT>
	  }

	  if (dataReadyFlag == 2)
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <main+0x15c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d125      	bne.n	8001bbc <main+0x108>
	  {
		  //processData();
		  //dataReadyFlag = 0;
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 8001b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	e01b      	b.n	8001bb0 <main+0xfc>
		  {
			  //fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
			  //fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
			  fft_in_buf[fft_in_ptr] = rxBuf[i] ;
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <main+0x154>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b88:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <main+0x160>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <main+0x154>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <main+0x164>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  //txBuf[i+1] = rxBuf[i+1];
			  //txBuf[i+2] = rxBuf[i+2];
			  //txBuf[i+3] = rxBuf[i+3];
			  fft_in_ptr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
		  for (int i = (ADC_BUFFER_SIZE/2); i < ADC_BUFFER_SIZE; i += 2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3302      	adds	r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb6:	dbdf      	blt.n	8001b78 <main+0xc4>
			  //printf("%d\r\n",txBuf[i]);


		  }
		  DoFFT();
 8001bb8:	f7ff fe92 	bl	80018e0 <DoFFT>
//		   fftFlag = 0;
//	  }



	  		ILI9341_Fill_Screen(BLACK);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff fc51 	bl	8001464 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f7ff fb5e 	bl	8001284 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, WHITE, 1, BLACK);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	210a      	movs	r1, #10
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <main+0x168>)
 8001bda:	f7ff fa81 	bl	80010e0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, RED, 1, BLACK);
 8001bde:	2300      	movs	r3, #0
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2301      	movs	r3, #1
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bea:	2214      	movs	r2, #20
 8001bec:	210a      	movs	r1, #10
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <main+0x16c>)
 8001bf0:	f7ff fa76 	bl	80010e0 <ILI9341_Draw_Text>

	  		HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f000 fcc0 	bl	800257c <HAL_Delay>
	  		ILI9341_Fill_Screen(BLACK);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fc31 	bl	8001464 <ILI9341_Fill_Screen>
  {
 8001c02:	e786      	b.n	8001b12 <main+0x5e>
 8001c04:	2000644c 	.word	0x2000644c
 8001c08:	20000448 	.word	0x20000448
 8001c0c:	200001fc 	.word	0x200001fc
 8001c10:	20006448 	.word	0x20006448
 8001c14:	20004448 	.word	0x20004448
 8001c18:	20002448 	.word	0x20002448
 8001c1c:	080094a8 	.word	0x080094a8
 8001c20:	080094c4 	.word	0x080094c4

08001c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b094      	sub	sp, #80	; 0x50
 8001c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	2230      	movs	r2, #48	; 0x30
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fec8 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <SystemClock_Config+0xd4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <SystemClock_Config+0xd4>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <SystemClock_Config+0xd4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c80:	2310      	movs	r3, #16
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c90:	23d8      	movs	r3, #216	; 0xd8
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fd7d 	bl	80037a0 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001cac:	f000 f910 	bl	8001ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb0:	f001 fd26 	bl	8003700 <HAL_PWREx_EnableOverDrive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001cba:	f000 f909 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2107      	movs	r1, #7
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 f803 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ce8:	f000 f8f2 	bl	8001ed0 <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3750      	adds	r7, #80	; 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000

08001cfc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <MX_I2S2_Init+0x54>)
 8001d04:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d08:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d0c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d24:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d28:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_I2S2_Init+0x50>)
 8001d38:	f001 fa94 	bl	8003264 <HAL_I2S_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_I2S2_Init+0x4a>
  {
    Error_Handler();
 8001d42:	f000 f8c5 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001fc 	.word	0x200001fc
 8001d50:	40003800 	.word	0x40003800

08001d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_SPI1_Init+0x78>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001da2:	2207      	movs	r2, #7
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001dae:	2208      	movs	r2, #8
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001db4:	f002 fd6e 	bl	8004894 <HAL_SPI_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dbe:	f000 f887 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000029c 	.word	0x2000029c
 8001dcc:	40013000 	.word	0x40013000

08001dd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <MX_USART3_UART_Init+0x5c>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e14:	f003 f8e0 	bl	8004fd8 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e1e:	f000 f857 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200003c0 	.word	0x200003c0
 8001e2c:	40004800 	.word	0x40004800

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_DMA_Init+0x70>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	200e      	movs	r0, #14
 8001e6c:	f000 fc85 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e70:	200e      	movs	r0, #14
 8001e72:	f000 fc9e 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2038      	movs	r0, #56	; 0x38
 8001e7c:	f000 fc7d 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e80:	2038      	movs	r0, #56	; 0x38
 8001e82:	f000 fc96 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	203b      	movs	r0, #59	; 0x3b
 8001e8c:	f000 fc75 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e90:	203b      	movs	r0, #59	; 0x3b
 8001e92:	f000 fc8e 	bl	80027b2 <HAL_NVIC_EnableIRQ>

}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <_write>:
///* USER CODE END MX_GPIO_Init_2 */
//}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4804      	ldr	r0, [pc, #16]	; (8001ecc <_write+0x28>)
 8001ebc:	f003 f8da 	bl	8005074 <HAL_UART_Transmit>
	return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200003c0 	.word	0x200003c0

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <MX_SPI5_Init+0x78>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001efa:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_SPI5_Init+0x74>)
 8001f3c:	f002 fcaa 	bl	8004894 <HAL_SPI_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001f46:	f7ff ffc3 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20006464 	.word	0x20006464
 8001f54:	40015000 	.word	0x40015000

08001f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_SPI_MspInit+0x7c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d128      	bne.n	8001fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_SPI_MspInit+0x80>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001faa:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_SPI_MspInit+0x84>)
 8001fc8:	f000 ff86 	bl	8002ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40015000 	.word	0x40015000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40021400 	.word	0x40021400

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_MspInit+0x44>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_MspInit+0x44>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_MspInit+0x44>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_MspInit+0x44>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_MspInit+0x44>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_MspInit+0x44>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0ac      	sub	sp, #176	; 0xb0
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	2284      	movs	r2, #132	; 0x84
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f004 fcbd 	bl	80069c8 <memset>
  if(hi2s->Instance==SPI2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_I2S_MspInit+0x168>)
 8002054:	4293      	cmp	r3, r2
 8002056:	f040 8096 	bne.w	8002186 <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800205a:	2364      	movs	r3, #100	; 0x64
 800205c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800205e:	2302      	movs	r3, #2
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8002062:	2304      	movs	r3, #4
 8002064:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002066:	2302      	movs	r3, #2
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800206e:	2300      	movs	r3, #0
 8002070:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002072:	f107 0318 	add.w	r3, r7, #24
 8002076:	4618      	mov	r0, r3
 8002078:	f002 f81c 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8002082:	f7ff ff25 	bl	8001ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a42      	ldr	r2, [pc, #264]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_I2S_MspInit+0x16c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80020ce:	2342      	movs	r3, #66	; 0x42
 80020d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e6:	2305      	movs	r3, #5
 80020e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020f0:	4619      	mov	r1, r3
 80020f2:	4829      	ldr	r0, [pc, #164]	; (8002198 <HAL_I2S_MspInit+0x170>)
 80020f4:	f000 fef0 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80020f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002112:	2305      	movs	r3, #5
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211c:	4619      	mov	r1, r3
 800211e:	481f      	ldr	r0, [pc, #124]	; (800219c <HAL_I2S_MspInit+0x174>)
 8002120:	f000 feda 	bl	8002ed8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_I2S_MspInit+0x17c>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800213e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002142:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002152:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800215e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002162:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800216c:	f000 fb3c 	bl	80027e8 <HAL_DMA_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8002176:	f7ff feab 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_I2S_MspInit+0x178>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	37b0      	adds	r7, #176	; 0xb0
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40003800 	.word	0x40003800
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800
 800219c:	40020400 	.word	0x40020400
 80021a0:	2000023c 	.word	0x2000023c
 80021a4:	40026058 	.word	0x40026058

080021a8 <HAL_UART_MspInit>:
//* This function configures the hardware resources used in this example
//* @param huart: UART handle pointer
//* @retval None
//*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0aa      	sub	sp, #168	; 0xa8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2284      	movs	r2, #132	; 0x84
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fbfd 	bl	80069c8 <memset>
  if(huart->Instance==USART3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_UART_MspInit+0xb4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13c      	bne.n	8002252 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021de:	2300      	movs	r3, #0
 80021e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 ff64 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021f2:	f7ff fe6d 	bl	8001ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_UART_MspInit+0xb8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_UART_MspInit+0xb8>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_UART_MspInit+0xb8>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_UART_MspInit+0xb8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_UART_MspInit+0xb8>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_UART_MspInit+0xb8>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002240:	2307      	movs	r3, #7
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002246:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <HAL_UART_MspInit+0xbc>)
 800224e:	f000 fe43 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	37a8      	adds	r7, #168	; 0xa8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40004800 	.word	0x40004800
 8002260:	40023800 	.word	0x40023800
 8002264:	40020c00 	.word	0x40020c00

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f000 f942 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <DMA1_Stream3_IRQHandler+0x10>)
 80022c2:	f000 fb9f 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000023c 	.word	0x2000023c

080022d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <DMA2_Stream0_IRQHandler+0x10>)
 80022d6:	f000 fb95 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000360 	.word	0x20000360

080022e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA2_Stream3_IRQHandler+0x10>)
 80022ea:	f000 fb8b 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000300 	.word	0x20000300

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002312:	f004 fb2f 	bl	8006974 <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800233a:	e7fe      	b.n	800233a <_exit+0x12>

0800233c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e00a      	b.n	8002364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234e:	f3af 8000 	nop.w
 8002352:	4601      	mov	r1, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	60ba      	str	r2, [r7, #8]
 800235a:	b2ca      	uxtb	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf0      	blt.n	800234e <_read+0x12>
  }

  return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f004 fab0 	bl	8006974 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20050000 	.word	0x20050000
 8002440:	00000400 	.word	0x00000400
 8002444:	200064c8 	.word	0x200064c8
 8002448:	200064e0 	.word	0x200064e0

0800244c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002476:	490e      	ldr	r1, [pc, #56]	; (80024b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800248c:	4c0b      	ldr	r4, [pc, #44]	; (80024bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249a:	f7ff ffd7 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f004 fa6f 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff fb07 	bl	8001ab4 <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024b4:	0801cf7c 	.word	0x0801cf7c
  ldr r2, =_sbss
 80024b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024bc:	200064e0 	.word	0x200064e0

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>

080024c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 f94c 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024cc:	200f      	movs	r0, #15
 80024ce:	f000 f805 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d2:	f7ff fd85 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x54>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x58>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f967 	bl	80027ce <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f000 f92f 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	; (8002538 <HAL_InitTick+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000004 	.word	0x20000004
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000008 	.word	0x20000008

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000000c 	.word	0x2000000c
 8002560:	200064cc 	.word	0x200064cc

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	200064cc 	.word	0x200064cc

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <__NVIC_SetPriorityGrouping+0x40>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <__NVIC_SetPriorityGrouping+0x40>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60d3      	str	r3, [r2, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	05fa0000 	.word	0x05fa0000

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	; (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff3e 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff31 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff feb6 	bl	8002564 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e099      	b.n	8002938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002824:	e00f      	b.n	8002846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002826:	f7ff fe9d 	bl	8002564 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b05      	cmp	r3, #5
 8002832:	d908      	bls.n	8002846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e078      	b.n	8002938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e8      	bne.n	8002826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_DMA_Init+0x158>)
 8002860:	4013      	ands	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2b04      	cmp	r3, #4
 800289e:	d107      	bne.n	80028b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4313      	orrs	r3, r2
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d117      	bne.n	800290a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa77 	bl	8002de0 <DMA_CheckFifoParam>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002906:	2301      	movs	r3, #1
 8002908:	e016      	b.n	8002938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa2e 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	223f      	movs	r2, #63	; 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	f010803f 	.word	0xf010803f

08002944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_DMA_Start_IT+0x26>
 8002966:	2302      	movs	r3, #2
 8002968:	e048      	b.n	80029fc <HAL_DMA_Start_IT+0xb8>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d137      	bne.n	80029ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f9c0 	bl	8002d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	223f      	movs	r2, #63	; 0x3f
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0216 	orr.w	r2, r2, #22
 80029b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e005      	b.n	80029fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a10:	4b8e      	ldr	r3, [pc, #568]	; (8002c4c <HAL_DMA_IRQHandler+0x248>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a8e      	ldr	r2, [pc, #568]	; (8002c50 <HAL_DMA_IRQHandler+0x24c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2204      	movs	r2, #4
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d043      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	2210      	movs	r2, #16
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e01f      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0208 	bic.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2220      	movs	r2, #32
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 808f 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8087 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d136      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0216 	bic.w	r2, r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DMA_IRQHandler+0x1da>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	223f      	movs	r2, #63	; 0x3f
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
        }
        return;
 8002c1a:	e079      	b.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
 8002c48:	e02c      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
 8002c4a:	bf00      	nop
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e01e      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0210 	bic.w	r2, r2, #16
 8002c82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d032      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d307      	bcc.n	8002cec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x2cc>
 8002cea:	e000      	b.n	8002cee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d10:	bf00      	nop
    }
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d108      	bne.n	8002d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d56:	e007      	b.n	8002d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b10      	subs	r3, #16
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d908      	bls.n	8002db4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <DMA_CalcBaseAndBitshift+0x68>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	1d1a      	adds	r2, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58
 8002db2:	e006      	b.n	8002dc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <DMA_CalcBaseAndBitshift+0x68>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	aaaaaaab 	.word	0xaaaaaaab
 8002dd8:	08009730 	.word	0x08009730
 8002ddc:	fffffc00 	.word	0xfffffc00

08002de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d856      	bhi.n	8002eae <DMA_CheckFifoParam+0xce>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <DMA_CheckFifoParam+0x28>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e2b 	.word	0x08002e2b
 8002e10:	08002e19 	.word	0x08002e19
 8002e14:	08002eaf 	.word	0x08002eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d046      	beq.n	8002eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e043      	b.n	8002eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e32:	d140      	bne.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e03d      	b.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d121      	bne.n	8002e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d837      	bhi.n	8002eba <DMA_CheckFifoParam+0xda>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <DMA_CheckFifoParam+0x70>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e67 	.word	0x08002e67
 8002e58:	08002e61 	.word	0x08002e61
 8002e5c:	08002e79 	.word	0x08002e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e030      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d025      	beq.n	8002ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e76:	e022      	b.n	8002ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e86:	e01c      	b.n	8002ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d903      	bls.n	8002e96 <DMA_CheckFifoParam+0xb6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e94:	e018      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e015      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	e00b      	b.n	8002ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e00a      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e008      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e006      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e175      	b.n	80031e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8164 	bne.w	80031de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x56>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80be 	beq.w	80031de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_GPIO_Init+0x324>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_GPIO_Init+0x324>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_GPIO_Init+0x324>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800307a:	4a61      	ldr	r2, [pc, #388]	; (8003200 <HAL_GPIO_Init+0x328>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_GPIO_Init+0x32c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d037      	beq.n	8003116 <HAL_GPIO_Init+0x23e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_GPIO_Init+0x330>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_GPIO_Init+0x23a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a56      	ldr	r2, [pc, #344]	; (800320c <HAL_GPIO_Init+0x334>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02b      	beq.n	800310e <HAL_GPIO_Init+0x236>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a55      	ldr	r2, [pc, #340]	; (8003210 <HAL_GPIO_Init+0x338>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_Init+0x232>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a54      	ldr	r2, [pc, #336]	; (8003214 <HAL_GPIO_Init+0x33c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_Init+0x22e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a53      	ldr	r2, [pc, #332]	; (8003218 <HAL_GPIO_Init+0x340>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x22a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_GPIO_Init+0x344>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x226>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a51      	ldr	r2, [pc, #324]	; (8003220 <HAL_GPIO_Init+0x348>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x222>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_GPIO_Init+0x34c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x21e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4f      	ldr	r2, [pc, #316]	; (8003228 <HAL_GPIO_Init+0x350>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x21a>
 80030ee:	2309      	movs	r3, #9
 80030f0:	e012      	b.n	8003118 <HAL_GPIO_Init+0x240>
 80030f2:	230a      	movs	r3, #10
 80030f4:	e010      	b.n	8003118 <HAL_GPIO_Init+0x240>
 80030f6:	2308      	movs	r3, #8
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x240>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x240>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x240>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x240>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x240>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x240>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x240>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x240>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x328>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_GPIO_Init+0x354>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <HAL_GPIO_Init+0x354>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_GPIO_Init+0x354>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a29      	ldr	r2, [pc, #164]	; (800322c <HAL_GPIO_Init+0x354>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_GPIO_Init+0x354>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_GPIO_Init+0x354>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_GPIO_Init+0x354>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_GPIO_Init+0x354>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae86 	bls.w	8002ef8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40022000 	.word	0x40022000
 8003228:	40022400 	.word	0x40022400
 800322c:	40013c00 	.word	0x40013c00

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0d2      	b.n	800341c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fecc 	bl	8002028 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69d9      	ldr	r1, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b60      	ldr	r3, [pc, #384]	; (8003424 <HAL_I2S_Init+0x1c0>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2202      	movs	r2, #2
 80032ae:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d067      	beq.n	8003388 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032c0:	2310      	movs	r3, #16
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e001      	b.n	80032ca <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032c6:	2320      	movs	r3, #32
 80032c8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d802      	bhi.n	80032d8 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <HAL_I2S_Init+0x1c4>)
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e003      	b.n	80032ee <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f968 	bl	80035bc <I2S_GetClockFreq>
 80032ec:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f6:	d125      	bne.n	8003344 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	fbb2 f2f3 	udiv	r2, r2, r3
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	3305      	adds	r3, #5
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e01f      	b.n	8003362 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	fbb2 f2f3 	udiv	r2, r2, r3
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	461a      	mov	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	3305      	adds	r3, #5
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e00e      	b.n	8003362 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fbb2 f2f3 	udiv	r2, r2, r3
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	3305      	adds	r3, #5
 8003360:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4a31      	ldr	r2, [pc, #196]	; (800342c <HAL_I2S_Init+0x1c8>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e003      	b.n	8003390 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003388:	2302      	movs	r3, #2
 800338a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d902      	bls.n	800339c <HAL_I2S_Init+0x138>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2bff      	cmp	r3, #255	; 0xff
 800339a:	d907      	bls.n	80033ac <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e037      	b.n	800341c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	ea42 0103 	orr.w	r1, r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	430a      	orrs	r2, r1
 80033be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_I2S_Init+0x1c0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6851      	ldr	r1, [r2, #4]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68d2      	ldr	r2, [r2, #12]
 80033d8:	4311      	orrs	r1, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6992      	ldr	r2, [r2, #24]
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ea:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d003      	beq.n	80033fc <HAL_I2S_Init+0x198>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2bb0      	cmp	r3, #176	; 0xb0
 80033fa:	d107      	bne.n	800340c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800340a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	fffff040 	.word	0xfffff040
 8003428:	00bb8000 	.word	0x00bb8000
 800342c:	cccccccd 	.word	0xcccccccd

08003430 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_I2S_Receive_DMA+0x1a>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0a1      	b.n	8003592 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2S_Receive_DMA+0x2e>
 800345a:	2302      	movs	r3, #2
 800345c:	e099      	b.n	8003592 <HAL_I2S_Receive_DMA+0x162>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d005      	beq.n	800347e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e089      	b.n	8003592 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2204      	movs	r2, #4
 8003482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d002      	beq.n	80034aa <HAL_I2S_Receive_DMA+0x7a>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d10a      	bne.n	80034c0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	85da      	strh	r2, [r3, #46]	; 0x2e
 80034be:	e005      	b.n	80034cc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d0:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_I2S_Receive_DMA+0x16c>)
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <HAL_I2S_Receive_DMA+0x170>)
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_I2S_Receive_DMA+0x174>)
 80034e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f2:	d10a      	bne.n	800350a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	4619      	mov	r1, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003520:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003522:	f7ff fa0f 	bl	8002944 <HAL_DMA_Start_IT>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00f      	beq.n	800354c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	f043 0208 	orr.w	r2, r3, #8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e022      	b.n	8003592 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003568:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	08003697 	.word	0x08003697
 80035a0:	08003655 	.word	0x08003655
 80035a4:	080036b3 	.word	0x080036b3

080035a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d02d      	beq.n	8003628 <I2S_GetClockFreq+0x6c>
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d12e      	bne.n	800362e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <I2S_GetClockFreq+0x88>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <I2S_GetClockFreq+0x88>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	4a18      	ldr	r2, [pc, #96]	; (8003648 <I2S_GetClockFreq+0x8c>)
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e007      	b.n	80035fe <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <I2S_GetClockFreq+0x88>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <I2S_GetClockFreq+0x90>)
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <I2S_GetClockFreq+0x88>)
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	0f1b      	lsrs	r3, r3, #28
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <I2S_GetClockFreq+0x88>)
 800360e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	fb03 f202 	mul.w	r2, r3, r2
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	613b      	str	r3, [r7, #16]

      break;
 8003626:	e005      	b.n	8003634 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <I2S_GetClockFreq+0x94>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	e002      	b.n	8003634 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
      break;
 8003632:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003634:	693b      	ldr	r3, [r7, #16]
}
 8003636:	4618      	mov	r0, r3
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	00f42400 	.word	0x00f42400
 800364c:	017d7840 	.word	0x017d7840
 8003650:	00bb8000 	.word	0x00bb8000

08003654 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10e      	bne.n	8003688 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7fe fa01 	bl	8001a90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7fe f9e3 	bl	8001a70 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0203 	bic.w	r2, r2, #3
 80036ce:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	f043 0208 	orr.w	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ff59 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_PWREx_EnableOverDrive+0x98>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_PWREx_EnableOverDrive+0x98>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_PWREx_EnableOverDrive+0x98>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800372e:	f7fe ff19 	bl	8002564 <HAL_GetTick>
 8003732:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003734:	e009      	b.n	800374a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003736:	f7fe ff15 	bl	8002564 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003744:	d901      	bls.n	800374a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e022      	b.n	8003790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003756:	d1ee      	bne.n	8003736 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0f      	ldr	r2, [pc, #60]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7fe fefe 	bl	8002564 <HAL_GetTick>
 8003768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800376a:	e009      	b.n	8003780 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800376c:	f7fe fefa 	bl	8002564 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377a:	d901      	bls.n	8003780 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e007      	b.n	8003790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800378c:	d1ee      	bne.n	800376c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e291      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8087 	beq.w	80038d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b96      	ldr	r3, [pc, #600]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d0:	4b93      	ldr	r3, [pc, #588]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d112      	bne.n	8003802 <HAL_RCC_OscConfig+0x62>
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e8:	d10b      	bne.n	8003802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d06c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x130>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d168      	bne.n	80038d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e26b      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x7a>
 800380c:	4b84      	ldr	r3, [pc, #528]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a83      	ldr	r2, [pc, #524]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e02e      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x9c>
 8003822:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7b      	ldr	r2, [pc, #492]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xc0>
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a75      	ldr	r2, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a72      	ldr	r2, [pc, #456]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xd8>
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6e      	ldr	r2, [pc, #440]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6b      	ldr	r2, [pc, #428]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fe70 	bl	8002564 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fe6c 	bl	8002564 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e21f      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xe8>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe fe5c 	bl	8002564 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fe58 	bl	8002564 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e20b      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x110>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d069      	beq.n	80039b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x190>
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x17a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1df      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	493d      	ldr	r1, [pc, #244]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e040      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d023      	beq.n	8003980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fe0e 	bl	8002564 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fe0a 	bl	8002564 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1bd      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4929      	ldr	r1, [pc, #164]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
 800397e:	e018      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe fdea 	bl	8002564 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe fde6 	bl	8002564 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e199      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d038      	beq.n	8003a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fe fdc7 	bl	8002564 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039da:	f7fe fdc3 	bl	8002564 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e176      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80039ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x23a>
 80039f8:	e01a      	b.n	8003a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe fdad 	bl	8002564 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fda9 	bl	8002564 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d903      	bls.n	8003a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e15c      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
 8003a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b91      	ldr	r3, [pc, #580]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ee      	bne.n	8003a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a4 	beq.w	8003b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4a87      	ldr	r2, [pc, #540]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
 8003a56:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d118      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a72:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7e      	ldr	r2, [pc, #504]	; (8003c70 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fd71 	bl	8002564 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fe fd6d 	bl	8002564 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	; 0x64
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e120      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x31a>
 8003aac:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a6e      	ldr	r2, [pc, #440]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e02d      	b.n	8003b16 <HAL_RCC_OscConfig+0x376>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x33c>
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	e01c      	b.n	8003b16 <HAL_RCC_OscConfig+0x376>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCC_OscConfig+0x35e>
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a5d      	ldr	r2, [pc, #372]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0x376>
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fd21 	bl	8002564 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fd1d 	bl	8002564 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0ce      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ee      	beq.n	8003b26 <HAL_RCC_OscConfig+0x386>
 8003b48:	e014      	b.n	8003b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fd0b 	bl	8002564 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fd07 	bl	8002564 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80a4 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d06b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d149      	bne.n	8003c38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a30      	ldr	r2, [pc, #192]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fcd8 	bl	8002564 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fcd4 	bl	8002564 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e087      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fca8 	bl	8002564 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe fca4 	bl	8002564 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e057      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x478>
 8003c36:	e04f      	b.n	8003cd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fc8e 	bl	8002564 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe fc8a 	bl	8002564 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e03d      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4ac>
 8003c6a:	e035      	b.n	8003cd8 <HAL_RCC_OscConfig+0x538>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x544>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003caa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0d0      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b6a      	ldr	r3, [pc, #424]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d910      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b67      	ldr	r3, [pc, #412]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 020f 	bic.w	r2, r3, #15
 8003d16:	4965      	ldr	r1, [pc, #404]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	494d      	ldr	r1, [pc, #308]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d040      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d115      	bne.n	8003dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e073      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4936      	ldr	r1, [pc, #216]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fe fbc2 	bl	8002564 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fe fbbe 	bl	8002564 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e053      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b27      	ldr	r3, [pc, #156]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d210      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 020f 	bic.w	r2, r3, #15
 8003e22:	4922      	ldr	r1, [pc, #136]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4916      	ldr	r1, [pc, #88]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	490e      	ldr	r1, [pc, #56]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7a:	f000 f821 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	490a      	ldr	r1, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_ClockConfig+0x1d4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fb1e 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023c00 	.word	0x40023c00
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08009718 	.word	0x08009718
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	20000008 	.word	0x20000008

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b090      	sub	sp, #64	; 0x40
 8003ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d00d      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	f200 80a1 	bhi.w	800402c <HAL_RCC_GetSysClockFreq+0x16c>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ef2:	e09b      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b53      	ldr	r3, [pc, #332]	; (8004044 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ef8:	e09b      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003efa:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_GetSysClockFreq+0x188>)
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003efe:	e098      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f00:	4b4f      	ldr	r3, [pc, #316]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f0a:	4b4d      	ldr	r3, [pc, #308]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d028      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b4a      	ldr	r3, [pc, #296]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	627a      	str	r2, [r7, #36]	; 0x24
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f2c:	fb03 f201 	mul.w	r2, r3, r1
 8003f30:	2300      	movs	r3, #0
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	4a43      	ldr	r2, [pc, #268]	; (8004048 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f40:	460a      	mov	r2, r1
 8003f42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f46:	4413      	add	r3, r2
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f5a:	f7fc fea5 	bl	8000ca8 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4613      	mov	r3, r2
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f66:	e053      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f68:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	2200      	movs	r2, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	617a      	str	r2, [r7, #20]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f7a:	f04f 0b00 	mov.w	fp, #0
 8003f7e:	4652      	mov	r2, sl
 8003f80:	465b      	mov	r3, fp
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	0159      	lsls	r1, r3, #5
 8003f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f90:	0150      	lsls	r0, r2, #5
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	ebb2 080a 	subs.w	r8, r2, sl
 8003f9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003faa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	00eb      	lsls	r3, r5, #3
 8003fc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc8:	00e2      	lsls	r2, r4, #3
 8003fca:	4614      	mov	r4, r2
 8003fcc:	461d      	mov	r5, r3
 8003fce:	eb14 030a 	adds.w	r3, r4, sl
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	eb45 030b 	adc.w	r3, r5, fp
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	028b      	lsls	r3, r1, #10
 8003fea:	4621      	mov	r1, r4
 8003fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	028a      	lsls	r2, r1, #10
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	60fa      	str	r2, [r7, #12]
 8004000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004004:	f7fc fe50 	bl	8000ca8 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4613      	mov	r3, r2
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetSysClockFreq+0x184>)
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004034:	4618      	mov	r0, r3
 8004036:	3740      	adds	r7, #64	; 0x40
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	00f42400 	.word	0x00f42400
 8004048:	017d7840 	.word	0x017d7840

0800404c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCC_GetHCLKFreq+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000004 	.word	0x20000004

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff0 	bl	800404c <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0a9b      	lsrs	r3, r3, #10
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	08009728 	.word	0x08009728

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffdc 	bl	800404c <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0b5b      	lsrs	r3, r3, #13
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	08009728 	.word	0x08009728

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040dc:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	4964      	ldr	r1, [pc, #400]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800410e:	4b5d      	ldr	r3, [pc, #372]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	4959      	ldr	r1, [pc, #356]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d017      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800414a:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	494a      	ldr	r1, [pc, #296]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 808b 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6413      	str	r3, [r2, #64]	; 0x40
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fe f9d2 	bl	8002564 <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c4:	f7fe f9ce 	bl	8002564 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e357      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d035      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d02e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004200:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800420a:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b01      	cmp	r3, #1
 8004232:	d114      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe f996 	bl	8002564 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe f992 	bl	8002564 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e319      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d111      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800427a:	400b      	ands	r3, r1
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
 8004282:	e00b      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	0ffffcff 	.word	0x0ffffcff
 8004290:	4baa      	ldr	r3, [pc, #680]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4aa9      	ldr	r2, [pc, #676]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004296:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	4ba7      	ldr	r3, [pc, #668]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	49a4      	ldr	r1, [pc, #656]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ba:	4ba0      	ldr	r3, [pc, #640]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	4a9e      	ldr	r2, [pc, #632]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042ca:	4b9c      	ldr	r3, [pc, #624]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	4999      	ldr	r1, [pc, #612]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e8:	4b94      	ldr	r3, [pc, #592]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f6:	4991      	ldr	r1, [pc, #580]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800430a:	4b8c      	ldr	r3, [pc, #560]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004318:	4988      	ldr	r1, [pc, #544]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432c:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	4980      	ldr	r1, [pc, #512]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434e:	4b7b      	ldr	r3, [pc, #492]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4977      	ldr	r1, [pc, #476]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004370:	4b72      	ldr	r3, [pc, #456]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	496f      	ldr	r1, [pc, #444]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004392:	4b6a      	ldr	r3, [pc, #424]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f023 020c 	bic.w	r2, r3, #12
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	4966      	ldr	r1, [pc, #408]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	495e      	ldr	r1, [pc, #376]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d6:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	4955      	ldr	r1, [pc, #340]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f8:	4b50      	ldr	r3, [pc, #320]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	494d      	ldr	r1, [pc, #308]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800441a:	4b48      	ldr	r3, [pc, #288]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	4944      	ldr	r1, [pc, #272]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800443c:	4b3f      	ldr	r3, [pc, #252]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	493c      	ldr	r1, [pc, #240]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	4933      	ldr	r1, [pc, #204]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448e:	492b      	ldr	r1, [pc, #172]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d011      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044a2:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b0:	4922      	ldr	r1, [pc, #136]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	4912      	ldr	r1, [pc, #72]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004514:	4909      	ldr	r1, [pc, #36]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d006      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80d9 	beq.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004530:	4b02      	ldr	r3, [pc, #8]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a01      	ldr	r2, [pc, #4]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800453a:	e001      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800453c:	40023800 	.word	0x40023800
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fe f80f 	bl	8002564 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800454a:	f7fe f80b 	bl	8002564 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d901      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e194      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455c:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11d      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800457c:	4b64      	ldr	r3, [pc, #400]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800458a:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004590:	0e1b      	lsrs	r3, r3, #24
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	019a      	lsls	r2, r3, #6
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	071b      	lsls	r3, r3, #28
 80045b0:	4957      	ldr	r1, [pc, #348]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02e      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d129      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045e4:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045f2:	4b47      	ldr	r3, [pc, #284]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	0f1b      	lsrs	r3, r3, #28
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	019a      	lsls	r2, r3, #6
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	431a      	orrs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	071b      	lsls	r3, r3, #28
 8004618:	493d      	ldr	r1, [pc, #244]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004626:	f023 021f 	bic.w	r2, r3, #31
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	3b01      	subs	r3, #1
 8004630:	4937      	ldr	r1, [pc, #220]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	0e1b      	lsrs	r3, r3, #24
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004652:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	0f1b      	lsrs	r3, r3, #28
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	019a      	lsls	r2, r3, #6
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	431a      	orrs	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	431a      	orrs	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4925      	ldr	r1, [pc, #148]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d011      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	019a      	lsls	r2, r3, #6
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	071b      	lsls	r3, r3, #28
 80046a8:	4919      	ldr	r1, [pc, #100]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046bc:	f7fd ff52 	bl	8002564 <HAL_GetTick>
 80046c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c4:	f7fd ff4e 	bl	8002564 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0d7      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d6:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 80cd 	bne.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f6:	f7fd ff35 	bl	8002564 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046fe:	f7fd ff31 	bl	8002564 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b64      	cmp	r3, #100	; 0x64
 800470a:	d903      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0ba      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004710:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004714:	4b5e      	ldr	r3, [pc, #376]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004720:	d0ed      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02e      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d12a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004758:	4b4d      	ldr	r3, [pc, #308]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	0f1b      	lsrs	r3, r3, #28
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	4944      	ldr	r1, [pc, #272]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004786:	4b42      	ldr	r3, [pc, #264]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	3b01      	subs	r3, #1
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	493d      	ldr	r1, [pc, #244]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d022      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b4:	d11d      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047b6:	4b36      	ldr	r3, [pc, #216]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	0f1b      	lsrs	r3, r3, #28
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	019a      	lsls	r2, r3, #6
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	061b      	lsls	r3, r3, #24
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	4929      	ldr	r1, [pc, #164]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d028      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	0e1b      	lsrs	r3, r3, #24
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	019a      	lsls	r2, r3, #6
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	431a      	orrs	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	4917      	ldr	r1, [pc, #92]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4911      	ldr	r1, [pc, #68]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd fe82 	bl	8002564 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004864:	f7fd fe7e 	bl	8002564 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e007      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800487e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004882:	d1ef      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e09d      	b.n	80049e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d108      	bne.n	80048c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b6:	d009      	beq.n	80048cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
 80048be:	e005      	b.n	80048cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fb36 	bl	8001f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004902:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490c:	d902      	bls.n	8004914 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e002      	b.n	800491a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004918:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004922:	d007      	beq.n	8004934 <HAL_SPI_Init+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	ea42 0103 	orr.w	r1, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 0204 	and.w	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049b0:	ea42 0103 	orr.w	r1, r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b088      	sub	sp, #32
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_SPI_Transmit+0x22>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e158      	b.n	8004cbe <HAL_SPI_Transmit+0x2d4>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a14:	f7fd fda6 	bl	8002564 <HAL_GetTick>
 8004a18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2e:	e13d      	b.n	8004cac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Transmit+0x52>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a40:	e134      	b.n	8004cac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2203      	movs	r2, #3
 8004a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8c:	d10f      	bne.n	8004aae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d007      	beq.n	8004acc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad4:	d94b      	bls.n	8004b6e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_SPI_Transmit+0xfa>
 8004ade:	8afb      	ldrh	r3, [r7, #22]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d13e      	bne.n	8004b62 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b08:	e02b      	b.n	8004b62 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d112      	bne.n	8004b3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3c:	e011      	b.n	8004b62 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3e:	f7fd fd11 	bl	8002564 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d803      	bhi.n	8004b56 <HAL_SPI_Transmit+0x16c>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_Transmit+0x172>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b60:	e0a4      	b.n	8004cac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ce      	bne.n	8004b0a <HAL_SPI_Transmit+0x120>
 8004b6c:	e07c      	b.n	8004c68 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_Transmit+0x192>
 8004b76:	8afb      	ldrh	r3, [r7, #22]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d170      	bne.n	8004c5e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d912      	bls.n	8004bac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b02      	subs	r3, #2
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004baa:	e058      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bd2:	e044      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d12b      	bne.n	8004c3a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d912      	bls.n	8004c12 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	881a      	ldrh	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	1c9a      	adds	r2, r3, #2
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b02      	subs	r3, #2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c10:	e025      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c38:	e011      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3a:	f7fd fc93 	bl	8002564 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d803      	bhi.n	8004c52 <HAL_SPI_Transmit+0x268>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d102      	bne.n	8004c58 <HAL_SPI_Transmit+0x26e>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c5c:	e026      	b.n	8004cac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1b5      	bne.n	8004bd4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f949 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e000      	b.n	8004cac <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd8:	f7fd fc44 	bl	8002564 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce8:	f7fd fc3c 	bl	8002564 <HAL_GetTick>
 8004cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	0d1b      	lsrs	r3, r3, #20
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfe:	e054      	b.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d050      	beq.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d08:	f7fd fc2c 	bl	8002564 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d902      	bls.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d111      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d004      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d107      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d10f      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e017      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d19b      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dea:	f7fd fbbb 	bl	8002564 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004dfa:	f7fd fbb3 	bl	8002564 <HAL_GetTick>
 8004dfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e08:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00da      	lsls	r2, r3, #3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	0d1b      	lsrs	r3, r3, #20
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e20:	e060      	b.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e28:	d107      	bne.n	8004e3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d050      	beq.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e42:	f7fd fb8f 	bl	8002564 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d902      	bls.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d13d      	bne.n	8004ed4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e70:	d111      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d004      	beq.n	8004e86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d107      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9e:	d10f      	bne.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e010      	b.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d196      	bne.n	8004e22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000004 	.word	0x20000004

08004f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff ff5b 	bl	8004dd8 <SPI_WaitFifoStateUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e046      	b.n	8004fc6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <SPI_EndRxTxTransaction+0xcc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <SPI_EndRxTxTransaction+0xd0>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	0d5b      	lsrs	r3, r3, #21
 8004f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f56:	d112      	bne.n	8004f7e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff feb0 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e023      	b.n	8004fc6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d0f2      	beq.n	8004f7e <SPI_EndRxTxTransaction+0x7a>
 8004f98:	e000      	b.n	8004f9c <SPI_EndRxTxTransaction+0x98>
        break;
 8004f9a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ff15 	bl	8004dd8 <SPI_WaitFifoStateUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e000      	b.n	8004fc6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000004 	.word	0x20000004
 8004fd4:	165e9f81 	.word	0x165e9f81

08004fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e040      	b.n	800506c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd f8d4 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8b0 	bl	800517c <UART_SetConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e022      	b.n	800506c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fb08 	bl	8005644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb8f 	bl	8005788 <UART_CheckIdleState>
 800506a:	4603      	mov	r3, r0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	2b20      	cmp	r3, #32
 800508a:	d171      	bne.n	8005170 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Transmit+0x24>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e06a      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	; 0x21
 80050a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fd fa5b 	bl	8002564 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d108      	bne.n	80050dc <HAL_UART_Transmit+0x68>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e003      	b.n	80050e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e4:	e02c      	b.n	8005140 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fb80 	bl	80057f6 <UART_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e038      	b.n	8005172 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3302      	adds	r3, #2
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e007      	b.n	800512e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1cc      	bne.n	80050e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fb4d 	bl	80057f6 <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e005      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4ba6      	ldr	r3, [pc, #664]	; (8005440 <UART_SetConfig+0x2c4>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	6979      	ldr	r1, [r7, #20]
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a94      	ldr	r2, [pc, #592]	; (8005444 <UART_SetConfig+0x2c8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d120      	bne.n	800523a <UART_SetConfig+0xbe>
 80051f8:	4b93      	ldr	r3, [pc, #588]	; (8005448 <UART_SetConfig+0x2cc>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d816      	bhi.n	8005234 <UART_SetConfig+0xb8>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x90>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	0800521d 	.word	0x0800521d
 8005210:	08005229 	.word	0x08005229
 8005214:	08005223 	.word	0x08005223
 8005218:	0800522f 	.word	0x0800522f
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e150      	b.n	80054c4 <UART_SetConfig+0x348>
 8005222:	2302      	movs	r3, #2
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e14d      	b.n	80054c4 <UART_SetConfig+0x348>
 8005228:	2304      	movs	r3, #4
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e14a      	b.n	80054c4 <UART_SetConfig+0x348>
 800522e:	2308      	movs	r3, #8
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e147      	b.n	80054c4 <UART_SetConfig+0x348>
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e144      	b.n	80054c4 <UART_SetConfig+0x348>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a83      	ldr	r2, [pc, #524]	; (800544c <UART_SetConfig+0x2d0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d132      	bne.n	80052aa <UART_SetConfig+0x12e>
 8005244:	4b80      	ldr	r3, [pc, #512]	; (8005448 <UART_SetConfig+0x2cc>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d828      	bhi.n	80052a4 <UART_SetConfig+0x128>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0xdc>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800528d 	.word	0x0800528d
 800525c:	080052a5 	.word	0x080052a5
 8005260:	080052a5 	.word	0x080052a5
 8005264:	080052a5 	.word	0x080052a5
 8005268:	08005299 	.word	0x08005299
 800526c:	080052a5 	.word	0x080052a5
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052a5 	.word	0x080052a5
 8005278:	08005293 	.word	0x08005293
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052a5 	.word	0x080052a5
 8005288:	0800529f 	.word	0x0800529f
 800528c:	2300      	movs	r3, #0
 800528e:	77fb      	strb	r3, [r7, #31]
 8005290:	e118      	b.n	80054c4 <UART_SetConfig+0x348>
 8005292:	2302      	movs	r3, #2
 8005294:	77fb      	strb	r3, [r7, #31]
 8005296:	e115      	b.n	80054c4 <UART_SetConfig+0x348>
 8005298:	2304      	movs	r3, #4
 800529a:	77fb      	strb	r3, [r7, #31]
 800529c:	e112      	b.n	80054c4 <UART_SetConfig+0x348>
 800529e:	2308      	movs	r3, #8
 80052a0:	77fb      	strb	r3, [r7, #31]
 80052a2:	e10f      	b.n	80054c4 <UART_SetConfig+0x348>
 80052a4:	2310      	movs	r3, #16
 80052a6:	77fb      	strb	r3, [r7, #31]
 80052a8:	e10c      	b.n	80054c4 <UART_SetConfig+0x348>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a68      	ldr	r2, [pc, #416]	; (8005450 <UART_SetConfig+0x2d4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d120      	bne.n	80052f6 <UART_SetConfig+0x17a>
 80052b4:	4b64      	ldr	r3, [pc, #400]	; (8005448 <UART_SetConfig+0x2cc>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052be:	2b30      	cmp	r3, #48	; 0x30
 80052c0:	d013      	beq.n	80052ea <UART_SetConfig+0x16e>
 80052c2:	2b30      	cmp	r3, #48	; 0x30
 80052c4:	d814      	bhi.n	80052f0 <UART_SetConfig+0x174>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d009      	beq.n	80052de <UART_SetConfig+0x162>
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d810      	bhi.n	80052f0 <UART_SetConfig+0x174>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <UART_SetConfig+0x15c>
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d006      	beq.n	80052e4 <UART_SetConfig+0x168>
 80052d6:	e00b      	b.n	80052f0 <UART_SetConfig+0x174>
 80052d8:	2300      	movs	r3, #0
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e0f2      	b.n	80054c4 <UART_SetConfig+0x348>
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e0ef      	b.n	80054c4 <UART_SetConfig+0x348>
 80052e4:	2304      	movs	r3, #4
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e0ec      	b.n	80054c4 <UART_SetConfig+0x348>
 80052ea:	2308      	movs	r3, #8
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e0e9      	b.n	80054c4 <UART_SetConfig+0x348>
 80052f0:	2310      	movs	r3, #16
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e0e6      	b.n	80054c4 <UART_SetConfig+0x348>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a56      	ldr	r2, [pc, #344]	; (8005454 <UART_SetConfig+0x2d8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d120      	bne.n	8005342 <UART_SetConfig+0x1c6>
 8005300:	4b51      	ldr	r3, [pc, #324]	; (8005448 <UART_SetConfig+0x2cc>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800530a:	2bc0      	cmp	r3, #192	; 0xc0
 800530c:	d013      	beq.n	8005336 <UART_SetConfig+0x1ba>
 800530e:	2bc0      	cmp	r3, #192	; 0xc0
 8005310:	d814      	bhi.n	800533c <UART_SetConfig+0x1c0>
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d009      	beq.n	800532a <UART_SetConfig+0x1ae>
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d810      	bhi.n	800533c <UART_SetConfig+0x1c0>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <UART_SetConfig+0x1a8>
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d006      	beq.n	8005330 <UART_SetConfig+0x1b4>
 8005322:	e00b      	b.n	800533c <UART_SetConfig+0x1c0>
 8005324:	2300      	movs	r3, #0
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e0cc      	b.n	80054c4 <UART_SetConfig+0x348>
 800532a:	2302      	movs	r3, #2
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e0c9      	b.n	80054c4 <UART_SetConfig+0x348>
 8005330:	2304      	movs	r3, #4
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e0c6      	b.n	80054c4 <UART_SetConfig+0x348>
 8005336:	2308      	movs	r3, #8
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e0c3      	b.n	80054c4 <UART_SetConfig+0x348>
 800533c:	2310      	movs	r3, #16
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e0c0      	b.n	80054c4 <UART_SetConfig+0x348>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a44      	ldr	r2, [pc, #272]	; (8005458 <UART_SetConfig+0x2dc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d125      	bne.n	8005398 <UART_SetConfig+0x21c>
 800534c:	4b3e      	ldr	r3, [pc, #248]	; (8005448 <UART_SetConfig+0x2cc>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535a:	d017      	beq.n	800538c <UART_SetConfig+0x210>
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d817      	bhi.n	8005392 <UART_SetConfig+0x216>
 8005362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005366:	d00b      	beq.n	8005380 <UART_SetConfig+0x204>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d811      	bhi.n	8005392 <UART_SetConfig+0x216>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <UART_SetConfig+0x1fe>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d006      	beq.n	8005386 <UART_SetConfig+0x20a>
 8005378:	e00b      	b.n	8005392 <UART_SetConfig+0x216>
 800537a:	2300      	movs	r3, #0
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e0a1      	b.n	80054c4 <UART_SetConfig+0x348>
 8005380:	2302      	movs	r3, #2
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e09e      	b.n	80054c4 <UART_SetConfig+0x348>
 8005386:	2304      	movs	r3, #4
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e09b      	b.n	80054c4 <UART_SetConfig+0x348>
 800538c:	2308      	movs	r3, #8
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e098      	b.n	80054c4 <UART_SetConfig+0x348>
 8005392:	2310      	movs	r3, #16
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e095      	b.n	80054c4 <UART_SetConfig+0x348>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <UART_SetConfig+0x2e0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d125      	bne.n	80053ee <UART_SetConfig+0x272>
 80053a2:	4b29      	ldr	r3, [pc, #164]	; (8005448 <UART_SetConfig+0x2cc>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b0:	d017      	beq.n	80053e2 <UART_SetConfig+0x266>
 80053b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b6:	d817      	bhi.n	80053e8 <UART_SetConfig+0x26c>
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d00b      	beq.n	80053d6 <UART_SetConfig+0x25a>
 80053be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c2:	d811      	bhi.n	80053e8 <UART_SetConfig+0x26c>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <UART_SetConfig+0x254>
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x260>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x26c>
 80053d0:	2301      	movs	r3, #1
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e076      	b.n	80054c4 <UART_SetConfig+0x348>
 80053d6:	2302      	movs	r3, #2
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e073      	b.n	80054c4 <UART_SetConfig+0x348>
 80053dc:	2304      	movs	r3, #4
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e070      	b.n	80054c4 <UART_SetConfig+0x348>
 80053e2:	2308      	movs	r3, #8
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e06d      	b.n	80054c4 <UART_SetConfig+0x348>
 80053e8:	2310      	movs	r3, #16
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e06a      	b.n	80054c4 <UART_SetConfig+0x348>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <UART_SetConfig+0x2e4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d138      	bne.n	800546a <UART_SetConfig+0x2ee>
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <UART_SetConfig+0x2cc>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005402:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005406:	d017      	beq.n	8005438 <UART_SetConfig+0x2bc>
 8005408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800540c:	d82a      	bhi.n	8005464 <UART_SetConfig+0x2e8>
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	d00b      	beq.n	800542c <UART_SetConfig+0x2b0>
 8005414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005418:	d824      	bhi.n	8005464 <UART_SetConfig+0x2e8>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <UART_SetConfig+0x2aa>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d006      	beq.n	8005432 <UART_SetConfig+0x2b6>
 8005424:	e01e      	b.n	8005464 <UART_SetConfig+0x2e8>
 8005426:	2300      	movs	r3, #0
 8005428:	77fb      	strb	r3, [r7, #31]
 800542a:	e04b      	b.n	80054c4 <UART_SetConfig+0x348>
 800542c:	2302      	movs	r3, #2
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e048      	b.n	80054c4 <UART_SetConfig+0x348>
 8005432:	2304      	movs	r3, #4
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e045      	b.n	80054c4 <UART_SetConfig+0x348>
 8005438:	2308      	movs	r3, #8
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e042      	b.n	80054c4 <UART_SetConfig+0x348>
 800543e:	bf00      	nop
 8005440:	efff69f3 	.word	0xefff69f3
 8005444:	40011000 	.word	0x40011000
 8005448:	40023800 	.word	0x40023800
 800544c:	40004400 	.word	0x40004400
 8005450:	40004800 	.word	0x40004800
 8005454:	40004c00 	.word	0x40004c00
 8005458:	40005000 	.word	0x40005000
 800545c:	40011400 	.word	0x40011400
 8005460:	40007800 	.word	0x40007800
 8005464:	2310      	movs	r3, #16
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e02c      	b.n	80054c4 <UART_SetConfig+0x348>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a72      	ldr	r2, [pc, #456]	; (8005638 <UART_SetConfig+0x4bc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d125      	bne.n	80054c0 <UART_SetConfig+0x344>
 8005474:	4b71      	ldr	r3, [pc, #452]	; (800563c <UART_SetConfig+0x4c0>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800547e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005482:	d017      	beq.n	80054b4 <UART_SetConfig+0x338>
 8005484:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005488:	d817      	bhi.n	80054ba <UART_SetConfig+0x33e>
 800548a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548e:	d00b      	beq.n	80054a8 <UART_SetConfig+0x32c>
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	d811      	bhi.n	80054ba <UART_SetConfig+0x33e>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <UART_SetConfig+0x326>
 800549a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800549e:	d006      	beq.n	80054ae <UART_SetConfig+0x332>
 80054a0:	e00b      	b.n	80054ba <UART_SetConfig+0x33e>
 80054a2:	2300      	movs	r3, #0
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e00d      	b.n	80054c4 <UART_SetConfig+0x348>
 80054a8:	2302      	movs	r3, #2
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e00a      	b.n	80054c4 <UART_SetConfig+0x348>
 80054ae:	2304      	movs	r3, #4
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e007      	b.n	80054c4 <UART_SetConfig+0x348>
 80054b4:	2308      	movs	r3, #8
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e004      	b.n	80054c4 <UART_SetConfig+0x348>
 80054ba:	2310      	movs	r3, #16
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e001      	b.n	80054c4 <UART_SetConfig+0x348>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054cc:	d15b      	bne.n	8005586 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d828      	bhi.n	8005526 <UART_SetConfig+0x3aa>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x360>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005527 	.word	0x08005527
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005527 	.word	0x08005527
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fe fdb0 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8005504:	61b8      	str	r0, [r7, #24]
        break;
 8005506:	e013      	b.n	8005530 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fe fdc0 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 800550c:	61b8      	str	r0, [r7, #24]
        break;
 800550e:	e00f      	b.n	8005530 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <UART_SetConfig+0x4c4>)
 8005512:	61bb      	str	r3, [r7, #24]
        break;
 8005514:	e00c      	b.n	8005530 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fe fcd3 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 800551a:	61b8      	str	r0, [r7, #24]
        break;
 800551c:	e008      	b.n	8005530 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	61bb      	str	r3, [r7, #24]
        break;
 8005524:	e004      	b.n	8005530 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	77bb      	strb	r3, [r7, #30]
        break;
 800552e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d074      	beq.n	8005620 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	005a      	lsls	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	441a      	add	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b0f      	cmp	r3, #15
 8005550:	d916      	bls.n	8005580 <UART_SetConfig+0x404>
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d212      	bcs.n	8005580 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f023 030f 	bic.w	r3, r3, #15
 8005562:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	b29a      	uxth	r2, r3
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	4313      	orrs	r3, r2
 8005574:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	89fa      	ldrh	r2, [r7, #14]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e04f      	b.n	8005620 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	77bb      	strb	r3, [r7, #30]
 8005584:	e04c      	b.n	8005620 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005586:	7ffb      	ldrb	r3, [r7, #31]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d828      	bhi.n	80055de <UART_SetConfig+0x462>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x418>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055c1 	.word	0x080055c1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	080055df 	.word	0x080055df
 80055a4:	080055cf 	.word	0x080055cf
 80055a8:	080055df 	.word	0x080055df
 80055ac:	080055df 	.word	0x080055df
 80055b0:	080055df 	.word	0x080055df
 80055b4:	080055d7 	.word	0x080055d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7fe fd54 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 80055bc:	61b8      	str	r0, [r7, #24]
        break;
 80055be:	e013      	b.n	80055e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fd64 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 80055c4:	61b8      	str	r0, [r7, #24]
        break;
 80055c6:	e00f      	b.n	80055e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <UART_SetConfig+0x4c4>)
 80055ca:	61bb      	str	r3, [r7, #24]
        break;
 80055cc:	e00c      	b.n	80055e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ce:	f7fe fc77 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80055d2:	61b8      	str	r0, [r7, #24]
        break;
 80055d4:	e008      	b.n	80055e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055da:	61bb      	str	r3, [r7, #24]
        break;
 80055dc:	e004      	b.n	80055e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	77bb      	strb	r3, [r7, #30]
        break;
 80055e6:	bf00      	nop
    }

    if (pclk != 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	085a      	lsrs	r2, r3, #1
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	441a      	add	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	d909      	bls.n	800561c <UART_SetConfig+0x4a0>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560e:	d205      	bcs.n	800561c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e001      	b.n	8005620 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800562c:	7fbb      	ldrb	r3, [r7, #30]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40007c00 	.word	0x40007c00
 800563c:	40023800 	.word	0x40023800
 8005640:	00f42400 	.word	0x00f42400

08005644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01a      	beq.n	800575a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005742:	d10a      	bne.n	800575a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af02      	add	r7, sp, #8
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005798:	f7fc fee4 	bl	8002564 <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10e      	bne.n	80057ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f81b 	bl	80057f6 <UART_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e011      	b.n	80057ee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b09c      	sub	sp, #112	; 0x70
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005806:	e0a7      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	f000 80a3 	beq.w	8005958 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005812:	f7fc fea7 	bl	8002564 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <UART_WaitOnFlagUntilTimeout+0x32>
 8005822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005824:	2b00      	cmp	r3, #0
 8005826:	d13f      	bne.n	80058a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800583c:	667b      	str	r3, [r7, #100]	; 0x64
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005848:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800584c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	663b      	str	r3, [r7, #96]	; 0x60
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800587a:	64ba      	str	r2, [r7, #72]	; 0x48
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e068      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d050      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c4:	d148      	bne.n	8005958 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
 80058f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e6      	bne.n	80058d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	613b      	str	r3, [r7, #16]
   return(result);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	66bb      	str	r3, [r7, #104]	; 0x68
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3308      	adds	r3, #8
 8005920:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005922:	623a      	str	r2, [r7, #32]
 8005924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	69f9      	ldr	r1, [r7, #28]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e5      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e010      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	429a      	cmp	r2, r3
 8005974:	f43f af48 	beq.w	8005808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3770      	adds	r7, #112	; 0x70
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <arm_rfft_fast_init_f32>:
 8005984:	084b      	lsrs	r3, r1, #1
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	b430      	push	{r4, r5}
 800598a:	8201      	strh	r1, [r0, #16]
 800598c:	8003      	strh	r3, [r0, #0]
 800598e:	d06f      	beq.n	8005a70 <arm_rfft_fast_init_f32+0xec>
 8005990:	d916      	bls.n	80059c0 <arm_rfft_fast_init_f32+0x3c>
 8005992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005996:	d05e      	beq.n	8005a56 <arm_rfft_fast_init_f32+0xd2>
 8005998:	d935      	bls.n	8005a06 <arm_rfft_fast_init_f32+0x82>
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d025      	beq.n	80059ec <arm_rfft_fast_init_f32+0x68>
 80059a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a4:	d112      	bne.n	80059cc <arm_rfft_fast_init_f32+0x48>
 80059a6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80059aa:	4c37      	ldr	r4, [pc, #220]	; (8005a88 <arm_rfft_fast_init_f32+0x104>)
 80059ac:	4937      	ldr	r1, [pc, #220]	; (8005a8c <arm_rfft_fast_init_f32+0x108>)
 80059ae:	2300      	movs	r3, #0
 80059b0:	4a37      	ldr	r2, [pc, #220]	; (8005a90 <arm_rfft_fast_init_f32+0x10c>)
 80059b2:	8185      	strh	r5, [r0, #12]
 80059b4:	6084      	str	r4, [r0, #8]
 80059b6:	6041      	str	r1, [r0, #4]
 80059b8:	6142      	str	r2, [r0, #20]
 80059ba:	b258      	sxtb	r0, r3
 80059bc:	bc30      	pop	{r4, r5}
 80059be:	4770      	bx	lr
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d030      	beq.n	8005a26 <arm_rfft_fast_init_f32+0xa2>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d005      	beq.n	80059d4 <arm_rfft_fast_init_f32+0x50>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d038      	beq.n	8005a3e <arm_rfft_fast_init_f32+0xba>
 80059cc:	23ff      	movs	r3, #255	; 0xff
 80059ce:	bc30      	pop	{r4, r5}
 80059d0:	b258      	sxtb	r0, r3
 80059d2:	4770      	bx	lr
 80059d4:	2538      	movs	r5, #56	; 0x38
 80059d6:	4c2f      	ldr	r4, [pc, #188]	; (8005a94 <arm_rfft_fast_init_f32+0x110>)
 80059d8:	492f      	ldr	r1, [pc, #188]	; (8005a98 <arm_rfft_fast_init_f32+0x114>)
 80059da:	2300      	movs	r3, #0
 80059dc:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <arm_rfft_fast_init_f32+0x118>)
 80059de:	8185      	strh	r5, [r0, #12]
 80059e0:	6084      	str	r4, [r0, #8]
 80059e2:	6041      	str	r1, [r0, #4]
 80059e4:	6142      	str	r2, [r0, #20]
 80059e6:	b258      	sxtb	r0, r3
 80059e8:	bc30      	pop	{r4, r5}
 80059ea:	4770      	bx	lr
 80059ec:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80059f0:	4c2b      	ldr	r4, [pc, #172]	; (8005aa0 <arm_rfft_fast_init_f32+0x11c>)
 80059f2:	492c      	ldr	r1, [pc, #176]	; (8005aa4 <arm_rfft_fast_init_f32+0x120>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <arm_rfft_fast_init_f32+0x124>)
 80059f8:	8185      	strh	r5, [r0, #12]
 80059fa:	6084      	str	r4, [r0, #8]
 80059fc:	6041      	str	r1, [r0, #4]
 80059fe:	6142      	str	r2, [r0, #20]
 8005a00:	b258      	sxtb	r0, r3
 8005a02:	bc30      	pop	{r4, r5}
 8005a04:	4770      	bx	lr
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d1df      	bne.n	80059cc <arm_rfft_fast_init_f32+0x48>
 8005a0c:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8005a10:	4c26      	ldr	r4, [pc, #152]	; (8005aac <arm_rfft_fast_init_f32+0x128>)
 8005a12:	4927      	ldr	r1, [pc, #156]	; (8005ab0 <arm_rfft_fast_init_f32+0x12c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <arm_rfft_fast_init_f32+0x130>)
 8005a18:	8185      	strh	r5, [r0, #12]
 8005a1a:	6084      	str	r4, [r0, #8]
 8005a1c:	6041      	str	r1, [r0, #4]
 8005a1e:	6142      	str	r2, [r0, #20]
 8005a20:	b258      	sxtb	r0, r3
 8005a22:	bc30      	pop	{r4, r5}
 8005a24:	4770      	bx	lr
 8005a26:	2530      	movs	r5, #48	; 0x30
 8005a28:	4c23      	ldr	r4, [pc, #140]	; (8005ab8 <arm_rfft_fast_init_f32+0x134>)
 8005a2a:	4924      	ldr	r1, [pc, #144]	; (8005abc <arm_rfft_fast_init_f32+0x138>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <arm_rfft_fast_init_f32+0x13c>)
 8005a30:	8185      	strh	r5, [r0, #12]
 8005a32:	6084      	str	r4, [r0, #8]
 8005a34:	6041      	str	r1, [r0, #4]
 8005a36:	6142      	str	r2, [r0, #20]
 8005a38:	b258      	sxtb	r0, r3
 8005a3a:	bc30      	pop	{r4, r5}
 8005a3c:	4770      	bx	lr
 8005a3e:	2514      	movs	r5, #20
 8005a40:	4c20      	ldr	r4, [pc, #128]	; (8005ac4 <arm_rfft_fast_init_f32+0x140>)
 8005a42:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <arm_rfft_fast_init_f32+0x144>)
 8005a44:	2300      	movs	r3, #0
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <arm_rfft_fast_init_f32+0x148>)
 8005a48:	8185      	strh	r5, [r0, #12]
 8005a4a:	6084      	str	r4, [r0, #8]
 8005a4c:	6041      	str	r1, [r0, #4]
 8005a4e:	6142      	str	r2, [r0, #20]
 8005a50:	b258      	sxtb	r0, r3
 8005a52:	bc30      	pop	{r4, r5}
 8005a54:	4770      	bx	lr
 8005a56:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8005a5a:	4c1d      	ldr	r4, [pc, #116]	; (8005ad0 <arm_rfft_fast_init_f32+0x14c>)
 8005a5c:	491d      	ldr	r1, [pc, #116]	; (8005ad4 <arm_rfft_fast_init_f32+0x150>)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <arm_rfft_fast_init_f32+0x154>)
 8005a62:	8185      	strh	r5, [r0, #12]
 8005a64:	6084      	str	r4, [r0, #8]
 8005a66:	6041      	str	r1, [r0, #4]
 8005a68:	6142      	str	r2, [r0, #20]
 8005a6a:	b258      	sxtb	r0, r3
 8005a6c:	bc30      	pop	{r4, r5}
 8005a6e:	4770      	bx	lr
 8005a70:	25d0      	movs	r5, #208	; 0xd0
 8005a72:	4c1a      	ldr	r4, [pc, #104]	; (8005adc <arm_rfft_fast_init_f32+0x158>)
 8005a74:	491a      	ldr	r1, [pc, #104]	; (8005ae0 <arm_rfft_fast_init_f32+0x15c>)
 8005a76:	2300      	movs	r3, #0
 8005a78:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <arm_rfft_fast_init_f32+0x160>)
 8005a7a:	8185      	strh	r5, [r0, #12]
 8005a7c:	6084      	str	r4, [r0, #8]
 8005a7e:	6041      	str	r1, [r0, #4]
 8005a80:	6142      	str	r2, [r0, #20]
 8005a82:	b258      	sxtb	r0, r3
 8005a84:	bc30      	pop	{r4, r5}
 8005a86:	4770      	bx	lr
 8005a88:	08018540 	.word	0x08018540
 8005a8c:	08009738 	.word	0x08009738
 8005a90:	0800f8a8 	.word	0x0800f8a8
 8005a94:	0800d838 	.word	0x0800d838
 8005a98:	0801a300 	.word	0x0801a300
 8005a9c:	0801c7f0 	.word	0x0801c7f0
 8005aa0:	08016228 	.word	0x08016228
 8005aa4:	08014128 	.word	0x08014128
 8005aa8:	0800d8a8 	.word	0x0800d8a8
 8005aac:	0801c480 	.word	0x0801c480
 8005ab0:	080138a8 	.word	0x080138a8
 8005ab4:	0801a500 	.word	0x0801a500
 8005ab8:	080170e0 	.word	0x080170e0
 8005abc:	08016128 	.word	0x08016128
 8005ac0:	0800d738 	.word	0x0800d738
 8005ac4:	08017038 	.word	0x08017038
 8005ac8:	080140a8 	.word	0x080140a8
 8005acc:	08017060 	.word	0x08017060
 8005ad0:	0801ad00 	.word	0x0801ad00
 8005ad4:	08017540 	.word	0x08017540
 8005ad8:	0801b080 	.word	0x0801b080
 8005adc:	0801c9f0 	.word	0x0801c9f0
 8005ae0:	08017140 	.word	0x08017140
 8005ae4:	0801c080 	.word	0x0801c080

08005ae8 <arm_rfft_fast_f32>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	8a05      	ldrh	r5, [r0, #16]
 8005aee:	4606      	mov	r6, r0
 8005af0:	4690      	mov	r8, r2
 8005af2:	460c      	mov	r4, r1
 8005af4:	086d      	lsrs	r5, r5, #1
 8005af6:	8005      	strh	r5, [r0, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d15e      	bne.n	8005bba <arm_rfft_fast_f32+0xd2>
 8005afc:	461a      	mov	r2, r3
 8005afe:	2301      	movs	r3, #1
 8005b00:	f000 fbe0 	bl	80062c4 <arm_cfft_f32>
 8005b04:	edd4 7a00 	vldr	s15, [r4]
 8005b08:	ed94 7a01 	vldr	s14, [r4, #4]
 8005b0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005b10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b14:	8837      	ldrh	r7, [r6, #0]
 8005b16:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005b1a:	6975      	ldr	r5, [r6, #20]
 8005b1c:	3f01      	subs	r7, #1
 8005b1e:	eef0 3a46 	vmov.f32	s7, s12
 8005b22:	3510      	adds	r5, #16
 8005b24:	f108 0610 	add.w	r6, r8, #16
 8005b28:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005b2c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8005b30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b34:	f104 0310 	add.w	r3, r4, #16
 8005b38:	3808      	subs	r0, #8
 8005b3a:	ee26 7a86 	vmul.f32	s14, s13, s12
 8005b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b42:	ed88 7a00 	vstr	s14, [r8]
 8005b46:	edc8 7a01 	vstr	s15, [r8, #4]
 8005b4a:	edd0 6a02 	vldr	s13, [r0, #8]
 8005b4e:	3f01      	subs	r7, #1
 8005b50:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005b54:	f1a0 0008 	sub.w	r0, r0, #8
 8005b58:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005b5c:	f105 0508 	add.w	r5, r5, #8
 8005b60:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8005b64:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005b68:	edd0 5a05 	vldr	s11, [r0, #20]
 8005b6c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8005b70:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005b74:	f103 0308 	add.w	r3, r3, #8
 8005b78:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005b7c:	f106 0608 	add.w	r6, r6, #8
 8005b80:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005b84:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005b88:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005b8c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005b90:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005b94:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005b98:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005b9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005ba0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005ba4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005ba8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005bac:	ed46 6a04 	vstr	s13, [r6, #-16]
 8005bb0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8005bb4:	d1c9      	bne.n	8005b4a <arm_rfft_fast_f32+0x62>
 8005bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bba:	edd1 7a00 	vldr	s15, [r1]
 8005bbe:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005bc2:	edd1 6a01 	vldr	s13, [r1, #4]
 8005bc6:	1e68      	subs	r0, r5, #1
 8005bc8:	6975      	ldr	r5, [r6, #20]
 8005bca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005bce:	00c1      	lsls	r1, r0, #3
 8005bd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bd4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005bd8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005bdc:	ed82 7a00 	vstr	s14, [r2]
 8005be0:	edc2 7a01 	vstr	s15, [r2, #4]
 8005be4:	b3e0      	cbz	r0, 8005c60 <arm_rfft_fast_f32+0x178>
 8005be6:	3908      	subs	r1, #8
 8005be8:	f104 0210 	add.w	r2, r4, #16
 8005bec:	3510      	adds	r5, #16
 8005bee:	440c      	add	r4, r1
 8005bf0:	f108 0110 	add.w	r1, r8, #16
 8005bf4:	ed94 7a02 	vldr	s14, [r4, #8]
 8005bf8:	3801      	subs	r0, #1
 8005bfa:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005bfe:	f1a4 0408 	sub.w	r4, r4, #8
 8005c02:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005c06:	f102 0208 	add.w	r2, r2, #8
 8005c0a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005c0e:	ed94 4a05 	vldr	s8, [r4, #20]
 8005c12:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005c16:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005c1a:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005c1e:	f101 0108 	add.w	r1, r1, #8
 8005c22:	ee26 3a27 	vmul.f32	s6, s12, s15
 8005c26:	f105 0508 	add.w	r5, r5, #8
 8005c2a:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005c2e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005c32:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005c36:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005c3a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005c3e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005c42:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005c46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005c4a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005c4e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005c52:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005c56:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005c5a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005c5e:	d1c9      	bne.n	8005bf4 <arm_rfft_fast_f32+0x10c>
 8005c60:	4630      	mov	r0, r6
 8005c62:	4641      	mov	r1, r8
 8005c64:	461a      	mov	r2, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	f000 bb2a 	b.w	80062c4 <arm_cfft_f32>

08005c70 <arm_cfft_radix8by2_f32>:
 8005c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c74:	ed2d 8b06 	vpush	{d8-d10}
 8005c78:	f8b0 e000 	ldrh.w	lr, [r0]
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	6842      	ldr	r2, [r0, #4]
 8005c80:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005c84:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005c88:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005c8c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005c90:	f000 80af 	beq.w	8005df2 <arm_cfft_radix8by2_f32+0x182>
 8005c94:	3310      	adds	r3, #16
 8005c96:	3210      	adds	r2, #16
 8005c98:	f101 0610 	add.w	r6, r1, #16
 8005c9c:	f108 0510 	add.w	r5, r8, #16
 8005ca0:	18cc      	adds	r4, r1, r3
 8005ca2:	4443      	add	r3, r8
 8005ca4:	ed55 6a04 	vldr	s13, [r5, #-16]
 8005ca8:	f1be 0e01 	subs.w	lr, lr, #1
 8005cac:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005cb0:	f104 0410 	add.w	r4, r4, #16
 8005cb4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005cb8:	f106 0610 	add.w	r6, r6, #16
 8005cbc:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8005cc0:	ed53 0a04 	vldr	s1, [r3, #-16]
 8005cc4:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005cc8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005ccc:	ed13 3a02 	vldr	s6, [r3, #-8]
 8005cd0:	f102 0210 	add.w	r2, r2, #16
 8005cd4:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005cd8:	f103 0310 	add.w	r3, r3, #16
 8005cdc:	ed55 2a01 	vldr	s5, [r5, #-4]
 8005ce0:	f105 0510 	add.w	r5, r5, #16
 8005ce4:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8005ce8:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8005cec:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005cf0:	ee33 8a83 	vadd.f32	s16, s7, s6
 8005cf4:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8005cf8:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8005cfc:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005d00:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8005d04:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005d08:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005d0c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005d10:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8005d14:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8005d18:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8005d1c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005d20:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005d24:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8005d28:	ee72 9a22 	vadd.f32	s19, s4, s5
 8005d2c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005d30:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005d34:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8005d38:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8005d3c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005d40:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8005d44:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8005d48:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8005d4c:	ee72 7a62 	vsub.f32	s15, s4, s5
 8005d50:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8005d54:	ee73 2a63 	vsub.f32	s5, s6, s7
 8005d58:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8005d5c:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8005d60:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8005d64:	ee24 3a84 	vmul.f32	s6, s9, s8
 8005d68:	ee27 2a26 	vmul.f32	s4, s14, s13
 8005d6c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005d70:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8005d74:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005d78:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005d7c:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005d80:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005d84:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005d88:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005d8c:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005d90:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005d94:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8005d98:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8005d9c:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005da0:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8005da4:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8005da8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005dac:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005db0:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005db4:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dbc:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005dc0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005dc4:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005dc8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8005dcc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005dd0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005dd4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005dd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ddc:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8005de0:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8005de4:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005de8:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8005dec:	f47f af5a 	bne.w	8005ca4 <arm_cfft_radix8by2_f32+0x34>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	fa1f f48c 	uxth.w	r4, ip
 8005df6:	4608      	mov	r0, r1
 8005df8:	2302      	movs	r3, #2
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	f000 fada 	bl	80063b4 <arm_radix8_butterfly_f32>
 8005e00:	4640      	mov	r0, r8
 8005e02:	4621      	mov	r1, r4
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	2302      	movs	r3, #2
 8005e08:	ecbd 8b06 	vpop	{d8-d10}
 8005e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	f000 bad0 	b.w	80063b4 <arm_radix8_butterfly_f32>

08005e14 <arm_cfft_radix8by4_f32>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	ed2d 8b06 	vpush	{d8-d10}
 8005e1c:	8804      	ldrh	r4, [r0, #0]
 8005e1e:	b08f      	sub	sp, #60	; 0x3c
 8005e20:	ed91 6a00 	vldr	s12, [r1]
 8005e24:	460a      	mov	r2, r1
 8005e26:	0864      	lsrs	r4, r4, #1
 8005e28:	ed91 7a01 	vldr	s14, [r1, #4]
 8005e2c:	9101      	str	r1, [sp, #4]
 8005e2e:	00a3      	lsls	r3, r4, #2
 8005e30:	9104      	str	r1, [sp, #16]
 8005e32:	0864      	lsrs	r4, r4, #1
 8005e34:	6841      	ldr	r1, [r0, #4]
 8005e36:	900c      	str	r0, [sp, #48]	; 0x30
 8005e38:	4625      	mov	r5, r4
 8005e3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e3c:	f101 0408 	add.w	r4, r1, #8
 8005e40:	f101 0610 	add.w	r6, r1, #16
 8005e44:	9406      	str	r4, [sp, #24]
 8005e46:	18d4      	adds	r4, r2, r3
 8005e48:	1eaa      	subs	r2, r5, #2
 8005e4a:	f101 0518 	add.w	r5, r1, #24
 8005e4e:	18e0      	adds	r0, r4, r3
 8005e50:	ed94 4a00 	vldr	s8, [r4]
 8005e54:	edd4 3a01 	vldr	s7, [r4, #4]
 8005e58:	46a6      	mov	lr, r4
 8005e5a:	edd0 6a00 	vldr	s13, [r0]
 8005e5e:	18c7      	adds	r7, r0, r3
 8005e60:	edd0 7a01 	vldr	s15, [r0, #4]
 8005e64:	46a0      	mov	r8, r4
 8005e66:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005e6a:	edd7 4a00 	vldr	s9, [r7]
 8005e6e:	9402      	str	r4, [sp, #8]
 8005e70:	4604      	mov	r4, r0
 8005e72:	9507      	str	r5, [sp, #28]
 8005e74:	4605      	mov	r5, r0
 8005e76:	ee75 2a84 	vadd.f32	s5, s11, s8
 8005e7a:	900a      	str	r0, [sp, #40]	; 0x28
 8005e7c:	9801      	ldr	r0, [sp, #4]
 8005e7e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005e82:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005e86:	ed97 5a01 	vldr	s10, [r7, #4]
 8005e8a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005e8e:	46bc      	mov	ip, r7
 8005e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e94:	9605      	str	r6, [sp, #20]
 8005e96:	ee36 7a63 	vsub.f32	s14, s12, s7
 8005e9a:	9703      	str	r7, [sp, #12]
 8005e9c:	ee12 9a90 	vmov	r9, s5
 8005ea0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8005ea4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005ea8:	1f3e      	subs	r6, r7, #4
 8005eaa:	f840 9b08 	str.w	r9, [r0], #8
 8005eae:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8005eb2:	edde 2a01 	vldr	s5, [lr, #4]
 8005eb6:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8005eba:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005ebe:	ed9c 4a01 	vldr	s8, [ip, #4]
 8005ec2:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005ec6:	9001      	str	r0, [sp, #4]
 8005ec8:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005ecc:	9804      	ldr	r0, [sp, #16]
 8005ece:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005ed2:	f1ae 0704 	sub.w	r7, lr, #4
 8005ed6:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005eda:	ee33 4a45 	vsub.f32	s8, s6, s10
 8005ede:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005ee2:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8005ee6:	ed80 6a01 	vstr	s12, [r0, #4]
 8005eea:	ee14 9a10 	vmov	r9, s8
 8005eee:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005ef2:	f848 9b08 	str.w	r9, [r8], #8
 8005ef6:	ed8e 5a01 	vstr	s10, [lr, #4]
 8005efa:	ee15 ea90 	vmov	lr, s11
 8005efe:	f844 eb08 	str.w	lr, [r4], #8
 8005f02:	ee16 ea90 	vmov	lr, s13
 8005f06:	9408      	str	r4, [sp, #32]
 8005f08:	462c      	mov	r4, r5
 8005f0a:	ed85 7a01 	vstr	s14, [r5, #4]
 8005f0e:	9d03      	ldr	r5, [sp, #12]
 8005f10:	f84c eb08 	str.w	lr, [ip], #8
 8005f14:	edc5 7a01 	vstr	s15, [r5, #4]
 8005f18:	0855      	lsrs	r5, r2, #1
 8005f1a:	9509      	str	r5, [sp, #36]	; 0x24
 8005f1c:	f000 8130 	beq.w	8006180 <arm_cfft_radix8by4_f32+0x36c>
 8005f20:	9804      	ldr	r0, [sp, #16]
 8005f22:	3b08      	subs	r3, #8
 8005f24:	46ab      	mov	fp, r5
 8005f26:	f1a4 020c 	sub.w	r2, r4, #12
 8005f2a:	f100 0510 	add.w	r5, r0, #16
 8005f2e:	f101 0920 	add.w	r9, r1, #32
 8005f32:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005f36:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005f3a:	4433      	add	r3, r6
 8005f3c:	3410      	adds	r4, #16
 8005f3e:	4660      	mov	r0, ip
 8005f40:	4641      	mov	r1, r8
 8005f42:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8005f46:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005f4a:	f1bb 0b01 	subs.w	fp, fp, #1
 8005f4e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005f52:	f10a 0a08 	add.w	sl, sl, #8
 8005f56:	edd1 7a00 	vldr	s15, [r1]
 8005f5a:	f105 0508 	add.w	r5, r5, #8
 8005f5e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005f62:	edd0 2a00 	vldr	s5, [r0]
 8005f66:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005f6a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005f6e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005f72:	f1a2 0208 	sub.w	r2, r2, #8
 8005f76:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005f7a:	ed90 2a01 	vldr	s4, [r0, #4]
 8005f7e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005f82:	ed91 6a01 	vldr	s12, [r1, #4]
 8005f86:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f8a:	f109 0910 	add.w	r9, r9, #16
 8005f8e:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005f92:	f104 0408 	add.w	r4, r4, #8
 8005f96:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005f9a:	f10e 0e18 	add.w	lr, lr, #24
 8005f9e:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005fa2:	f1a3 0308 	sub.w	r3, r3, #8
 8005fa6:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fae:	edd1 6a01 	vldr	s13, [r1, #4]
 8005fb2:	ee76 1a25 	vadd.f32	s3, s12, s11
 8005fb6:	edd0 4a01 	vldr	s9, [r0, #4]
 8005fba:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005fbe:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005fc2:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005fc6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005fca:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005fce:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005fd2:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005fd6:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005fda:	ee32 2a06 	vadd.f32	s4, s4, s12
 8005fde:	edd6 7a00 	vldr	s15, [r6]
 8005fe2:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005fe6:	ed97 1a00 	vldr	s2, [r7]
 8005fea:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005fee:	ed92 8a04 	vldr	s16, [r2, #16]
 8005ff2:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005ff6:	ed93 aa04 	vldr	s20, [r3, #16]
 8005ffa:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005ffe:	ee71 7a67 	vsub.f32	s15, s2, s15
 8006002:	ed57 0a01 	vldr	s1, [r7, #-4]
 8006006:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800600a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800600e:	edd3 9a03 	vldr	s19, [r3, #12]
 8006012:	ee30 0a87 	vadd.f32	s0, s1, s14
 8006016:	ed92 9a03 	vldr	s18, [r2, #12]
 800601a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800601e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8006022:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8006026:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800602a:	ee16 ca10 	vmov	ip, s12
 800602e:	ee30 6a49 	vsub.f32	s12, s0, s18
 8006032:	ee71 4a07 	vadd.f32	s9, s2, s14
 8006036:	f847 c908 	str.w	ip, [r7], #-8
 800603a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800603e:	edd2 8a03 	vldr	s17, [r2, #12]
 8006042:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8006046:	ed93 8a03 	vldr	s16, [r3, #12]
 800604a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800604e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8006052:	ee39 1a67 	vsub.f32	s2, s18, s15
 8006056:	ee36 6a69 	vsub.f32	s12, s12, s19
 800605a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800605e:	ee75 5aca 	vsub.f32	s11, s11, s20
 8006062:	ed87 0a01 	vstr	s0, [r7, #4]
 8006066:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800606a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800606e:	ee21 8a80 	vmul.f32	s16, s3, s0
 8006072:	ee23 7a26 	vmul.f32	s14, s6, s13
 8006076:	ee64 7a26 	vmul.f32	s15, s8, s13
 800607a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800607e:	ee24 4a00 	vmul.f32	s8, s8, s0
 8006082:	ee23 3a00 	vmul.f32	s6, s6, s0
 8006086:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800608a:	ee24 0a80 	vmul.f32	s0, s9, s0
 800608e:	ee38 7a07 	vadd.f32	s14, s16, s14
 8006092:	ee76 6a84 	vadd.f32	s13, s13, s8
 8006096:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800609a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800609e:	ee17 ca10 	vmov	ip, s14
 80060a2:	f841 cb08 	str.w	ip, [r1], #8
 80060a6:	ed01 3a01 	vstr	s6, [r1, #-4]
 80060aa:	ed82 0a04 	vstr	s0, [r2, #16]
 80060ae:	edc2 6a03 	vstr	s13, [r2, #12]
 80060b2:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 80060b6:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 80060ba:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80060be:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80060c2:	ee65 4a27 	vmul.f32	s9, s10, s15
 80060c6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80060ca:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80060ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060d2:	ee25 5a26 	vmul.f32	s10, s10, s13
 80060d6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80060da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060de:	ee34 6a24 	vadd.f32	s12, s8, s9
 80060e2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80060e6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80060ea:	ee17 ca90 	vmov	ip, s15
 80060ee:	ed04 6a04 	vstr	s12, [r4, #-16]
 80060f2:	ed04 5a03 	vstr	s10, [r4, #-12]
 80060f6:	f846 c908 	str.w	ip, [r6], #-8
 80060fa:	edc6 6a01 	vstr	s13, [r6, #4]
 80060fe:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8006102:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8006106:	ee62 5a27 	vmul.f32	s11, s4, s15
 800610a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800610e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006112:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8006116:	ee61 6a07 	vmul.f32	s13, s2, s14
 800611a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800611e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006122:	ee61 7a27 	vmul.f32	s15, s2, s15
 8006126:	ee35 6a86 	vadd.f32	s12, s11, s12
 800612a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800612e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8006132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006136:	ee16 ca10 	vmov	ip, s12
 800613a:	f840 cb08 	str.w	ip, [r0], #8
 800613e:	ed40 2a01 	vstr	s5, [r0, #-4]
 8006142:	edc3 0a04 	vstr	s1, [r3, #16]
 8006146:	edc3 7a03 	vstr	s15, [r3, #12]
 800614a:	f47f aefc 	bne.w	8005f46 <arm_cfft_radix8by4_f32+0x132>
 800614e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006150:	9805      	ldr	r0, [sp, #20]
 8006152:	00cb      	lsls	r3, r1, #3
 8006154:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8006158:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800615c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006160:	4498      	add	r8, r3
 8006162:	449c      	add	ip, r3
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	9901      	ldr	r1, [sp, #4]
 8006168:	4419      	add	r1, r3
 800616a:	9101      	str	r1, [sp, #4]
 800616c:	9906      	ldr	r1, [sp, #24]
 800616e:	4419      	add	r1, r3
 8006170:	9106      	str	r1, [sp, #24]
 8006172:	9908      	ldr	r1, [sp, #32]
 8006174:	4419      	add	r1, r3
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617c:	9108      	str	r1, [sp, #32]
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	9a01      	ldr	r2, [sp, #4]
 8006182:	2304      	movs	r3, #4
 8006184:	9e08      	ldr	r6, [sp, #32]
 8006186:	edd2 6a00 	vldr	s13, [r2]
 800618a:	ed96 4a00 	vldr	s8, [r6]
 800618e:	edd8 7a00 	vldr	s15, [r8]
 8006192:	ee36 6a84 	vadd.f32	s12, s13, s8
 8006196:	eddc 2a00 	vldr	s5, [ip]
 800619a:	ed96 7a01 	vldr	s14, [r6, #4]
 800619e:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80061a2:	edd2 6a01 	vldr	s13, [r2, #4]
 80061a6:	ee76 4a27 	vadd.f32	s9, s12, s15
 80061aa:	ed98 2a01 	vldr	s4, [r8, #4]
 80061ae:	ee76 5a87 	vadd.f32	s11, s13, s14
 80061b2:	ed9c 5a01 	vldr	s10, [ip, #4]
 80061b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80061ba:	9d05      	ldr	r5, [sp, #20]
 80061bc:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80061c0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80061c4:	ee72 3a04 	vadd.f32	s7, s4, s8
 80061c8:	9804      	ldr	r0, [sp, #16]
 80061ca:	ee77 4a67 	vsub.f32	s9, s14, s15
 80061ce:	4621      	mov	r1, r4
 80061d0:	edc2 6a00 	vstr	s13, [r2]
 80061d4:	ee76 6a67 	vsub.f32	s13, s12, s15
 80061d8:	ed98 3a01 	vldr	s6, [r8, #4]
 80061dc:	ee35 6ac2 	vsub.f32	s12, s11, s4
 80061e0:	eddc 1a01 	vldr	s3, [ip, #4]
 80061e4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80061e8:	ee35 3a83 	vadd.f32	s6, s11, s6
 80061ec:	ee34 4a42 	vsub.f32	s8, s8, s4
 80061f0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80061f4:	ee73 5a21 	vadd.f32	s11, s6, s3
 80061f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061fc:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006200:	edc2 5a01 	vstr	s11, [r2, #4]
 8006204:	ee35 5a04 	vadd.f32	s10, s10, s8
 8006208:	9a06      	ldr	r2, [sp, #24]
 800620a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800620e:	edd2 7a00 	vldr	s15, [r2]
 8006212:	edd2 5a01 	vldr	s11, [r2, #4]
 8006216:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800621a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800621e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8006222:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8006226:	ee77 7a62 	vsub.f32	s15, s14, s5
 800622a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800622e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8006232:	edc8 5a00 	vstr	s11, [r8]
 8006236:	edc8 4a01 	vstr	s9, [r8, #4]
 800623a:	edd5 4a01 	vldr	s9, [r5, #4]
 800623e:	ed95 7a00 	vldr	s14, [r5]
 8006242:	9d07      	ldr	r5, [sp, #28]
 8006244:	ee66 5a87 	vmul.f32	s11, s13, s14
 8006248:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800624c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006250:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006254:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006258:	ee35 6a86 	vadd.f32	s12, s11, s12
 800625c:	edc6 6a01 	vstr	s13, [r6, #4]
 8006260:	ed86 6a00 	vstr	s12, [r6]
 8006264:	ed95 6a01 	vldr	s12, [r5, #4]
 8006268:	ed95 7a00 	vldr	s14, [r5]
 800626c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800626e:	ee65 6a07 	vmul.f32	s13, s10, s14
 8006272:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006276:	ee25 5a06 	vmul.f32	s10, s10, s12
 800627a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800627e:	ee37 5a45 	vsub.f32	s10, s14, s10
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	ed8c 5a01 	vstr	s10, [ip, #4]
 800628a:	edcc 7a00 	vstr	s15, [ip]
 800628e:	6872      	ldr	r2, [r6, #4]
 8006290:	f000 f890 	bl	80063b4 <arm_radix8_butterfly_f32>
 8006294:	9802      	ldr	r0, [sp, #8]
 8006296:	4621      	mov	r1, r4
 8006298:	6872      	ldr	r2, [r6, #4]
 800629a:	2304      	movs	r3, #4
 800629c:	f000 f88a 	bl	80063b4 <arm_radix8_butterfly_f32>
 80062a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80062a2:	4621      	mov	r1, r4
 80062a4:	6872      	ldr	r2, [r6, #4]
 80062a6:	2304      	movs	r3, #4
 80062a8:	f000 f884 	bl	80063b4 <arm_radix8_butterfly_f32>
 80062ac:	9803      	ldr	r0, [sp, #12]
 80062ae:	4621      	mov	r1, r4
 80062b0:	6872      	ldr	r2, [r6, #4]
 80062b2:	2304      	movs	r3, #4
 80062b4:	b00f      	add	sp, #60	; 0x3c
 80062b6:	ecbd 8b06 	vpop	{d8-d10}
 80062ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062be:	f000 b879 	b.w	80063b4 <arm_radix8_butterfly_f32>
 80062c2:	bf00      	nop

080062c4 <arm_cfft_f32>:
 80062c4:	2a01      	cmp	r2, #1
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	4606      	mov	r6, r0
 80062cc:	4617      	mov	r7, r2
 80062ce:	460c      	mov	r4, r1
 80062d0:	4698      	mov	r8, r3
 80062d2:	8805      	ldrh	r5, [r0, #0]
 80062d4:	d053      	beq.n	800637e <arm_cfft_f32+0xba>
 80062d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80062da:	d04b      	beq.n	8006374 <arm_cfft_f32+0xb0>
 80062dc:	d916      	bls.n	800630c <arm_cfft_f32+0x48>
 80062de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80062e2:	d01a      	beq.n	800631a <arm_cfft_f32+0x56>
 80062e4:	d95a      	bls.n	800639c <arm_cfft_f32+0xd8>
 80062e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80062ea:	d043      	beq.n	8006374 <arm_cfft_f32+0xb0>
 80062ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80062f0:	d105      	bne.n	80062fe <arm_cfft_f32+0x3a>
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	6872      	ldr	r2, [r6, #4]
 80062f8:	2301      	movs	r3, #1
 80062fa:	f000 f85b 	bl	80063b4 <arm_radix8_butterfly_f32>
 80062fe:	f1b8 0f00 	cmp.w	r8, #0
 8006302:	d111      	bne.n	8006328 <arm_cfft_f32+0x64>
 8006304:	2f01      	cmp	r7, #1
 8006306:	d016      	beq.n	8006336 <arm_cfft_f32+0x72>
 8006308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630c:	2d20      	cmp	r5, #32
 800630e:	d031      	beq.n	8006374 <arm_cfft_f32+0xb0>
 8006310:	d948      	bls.n	80063a4 <arm_cfft_f32+0xe0>
 8006312:	2d40      	cmp	r5, #64	; 0x40
 8006314:	d0ed      	beq.n	80062f2 <arm_cfft_f32+0x2e>
 8006316:	2d80      	cmp	r5, #128	; 0x80
 8006318:	d1f1      	bne.n	80062fe <arm_cfft_f32+0x3a>
 800631a:	4630      	mov	r0, r6
 800631c:	4621      	mov	r1, r4
 800631e:	f7ff fca7 	bl	8005c70 <arm_cfft_radix8by2_f32>
 8006322:	f1b8 0f00 	cmp.w	r8, #0
 8006326:	d0ed      	beq.n	8006304 <arm_cfft_f32+0x40>
 8006328:	4620      	mov	r0, r4
 800632a:	89b1      	ldrh	r1, [r6, #12]
 800632c:	68b2      	ldr	r2, [r6, #8]
 800632e:	f7f9 ff6f 	bl	8000210 <arm_bitreversal_32>
 8006332:	2f01      	cmp	r7, #1
 8006334:	d1e8      	bne.n	8006308 <arm_cfft_f32+0x44>
 8006336:	ee07 5a90 	vmov	s15, r5
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006342:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8006346:	2d00      	cmp	r5, #0
 8006348:	d0de      	beq.n	8006308 <arm_cfft_f32+0x44>
 800634a:	f104 0108 	add.w	r1, r4, #8
 800634e:	2300      	movs	r3, #0
 8006350:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006354:	3301      	adds	r3, #1
 8006356:	ed51 7a01 	vldr	s15, [r1, #-4]
 800635a:	3108      	adds	r1, #8
 800635c:	429d      	cmp	r5, r3
 800635e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006362:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006366:	ed01 7a04 	vstr	s14, [r1, #-16]
 800636a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800636e:	d1ef      	bne.n	8006350 <arm_cfft_f32+0x8c>
 8006370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006374:	4630      	mov	r0, r6
 8006376:	4621      	mov	r1, r4
 8006378:	f7ff fd4c 	bl	8005e14 <arm_cfft_radix8by4_f32>
 800637c:	e7bf      	b.n	80062fe <arm_cfft_f32+0x3a>
 800637e:	b1a5      	cbz	r5, 80063aa <arm_cfft_f32+0xe6>
 8006380:	f101 030c 	add.w	r3, r1, #12
 8006384:	2200      	movs	r2, #0
 8006386:	ed53 7a02 	vldr	s15, [r3, #-8]
 800638a:	3201      	adds	r2, #1
 800638c:	3308      	adds	r3, #8
 800638e:	eef1 7a67 	vneg.f32	s15, s15
 8006392:	4295      	cmp	r5, r2
 8006394:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006398:	d1f5      	bne.n	8006386 <arm_cfft_f32+0xc2>
 800639a:	e79c      	b.n	80062d6 <arm_cfft_f32+0x12>
 800639c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80063a0:	d0a7      	beq.n	80062f2 <arm_cfft_f32+0x2e>
 80063a2:	e7ac      	b.n	80062fe <arm_cfft_f32+0x3a>
 80063a4:	2d10      	cmp	r5, #16
 80063a6:	d0b8      	beq.n	800631a <arm_cfft_f32+0x56>
 80063a8:	e7a9      	b.n	80062fe <arm_cfft_f32+0x3a>
 80063aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80063ae:	d896      	bhi.n	80062de <arm_cfft_f32+0x1a>
 80063b0:	e7ac      	b.n	800630c <arm_cfft_f32+0x48>
 80063b2:	bf00      	nop

080063b4 <arm_radix8_butterfly_f32>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	469e      	mov	lr, r3
 80063ba:	1d03      	adds	r3, r0, #4
 80063bc:	4683      	mov	fp, r0
 80063be:	468a      	mov	sl, r1
 80063c0:	4688      	mov	r8, r1
 80063c2:	469c      	mov	ip, r3
 80063c4:	ed2d 8b10 	vpush	{d8-d15}
 80063c8:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 80066dc <arm_radix8_butterfly_f32+0x328>
 80063cc:	b09f      	sub	sp, #124	; 0x7c
 80063ce:	921c      	str	r2, [sp, #112]	; 0x70
 80063d0:	931d      	str	r3, [sp, #116]	; 0x74
 80063d2:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80063d6:	f04f 0900 	mov.w	r9, #0
 80063da:	461a      	mov	r2, r3
 80063dc:	930e      	str	r3, [sp, #56]	; 0x38
 80063de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80063e2:	0051      	lsls	r1, r2, #1
 80063e4:	4608      	mov	r0, r1
 80063e6:	9103      	str	r1, [sp, #12]
 80063e8:	00d1      	lsls	r1, r2, #3
 80063ea:	1885      	adds	r5, r0, r2
 80063ec:	0110      	lsls	r0, r2, #4
 80063ee:	eb0b 0601 	add.w	r6, fp, r1
 80063f2:	9101      	str	r1, [sp, #4]
 80063f4:	18ac      	adds	r4, r5, r2
 80063f6:	9002      	str	r0, [sp, #8]
 80063f8:	1877      	adds	r7, r6, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	4422      	add	r2, r4
 80063fe:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8006402:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8006406:	1850      	adds	r0, r2, r1
 8006408:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800640c:	4401      	add	r1, r0
 800640e:	3204      	adds	r2, #4
 8006410:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8006414:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8006418:	3104      	adds	r1, #4
 800641a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800641e:	44c1      	add	r9, r8
 8006420:	edd4 6a00 	vldr	s13, [r4]
 8006424:	ed97 6a00 	vldr	s12, [r7]
 8006428:	45ca      	cmp	sl, r9
 800642a:	edd0 7a00 	vldr	s15, [r0]
 800642e:	ee37 5a66 	vsub.f32	s10, s14, s13
 8006432:	edd6 5a00 	vldr	s11, [r6]
 8006436:	ee37 2a26 	vadd.f32	s4, s14, s13
 800643a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800643e:	edd5 6a00 	vldr	s13, [r5]
 8006442:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006446:	ee76 4a27 	vadd.f32	s9, s12, s15
 800644a:	ed11 6a01 	vldr	s12, [r1, #-4]
 800644e:	ee75 1a87 	vadd.f32	s3, s11, s14
 8006452:	ee36 4a86 	vadd.f32	s8, s13, s12
 8006456:	ee72 7a24 	vadd.f32	s15, s4, s9
 800645a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800645e:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8006462:	ee31 6a84 	vadd.f32	s12, s3, s8
 8006466:	ee32 2a64 	vsub.f32	s4, s4, s9
 800646a:	ee77 6a65 	vsub.f32	s13, s14, s11
 800646e:	ee77 4a86 	vadd.f32	s9, s15, s12
 8006472:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006476:	ee37 7a25 	vadd.f32	s14, s14, s11
 800647a:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800647e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006482:	edc4 7a00 	vstr	s15, [r4]
 8006486:	ee66 6a89 	vmul.f32	s13, s13, s18
 800648a:	edd6 5a01 	vldr	s11, [r6, #4]
 800648e:	ee27 6a09 	vmul.f32	s12, s14, s18
 8006492:	edd5 3a01 	vldr	s7, [r5, #4]
 8006496:	ed92 4a00 	vldr	s8, [r2]
 800649a:	ee35 1a26 	vadd.f32	s2, s10, s13
 800649e:	edd1 4a00 	vldr	s9, [r1]
 80064a2:	ee75 6a66 	vsub.f32	s13, s10, s13
 80064a6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80064aa:	ed94 0a01 	vldr	s0, [r4, #4]
 80064ae:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80064b2:	ed9c 7a00 	vldr	s14, [ip]
 80064b6:	edd0 0a01 	vldr	s1, [r0, #4]
 80064ba:	ee35 4a84 	vadd.f32	s8, s11, s8
 80064be:	ed97 5a01 	vldr	s10, [r7, #4]
 80064c2:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80064c6:	ee73 5a27 	vadd.f32	s11, s6, s15
 80064ca:	ee77 3a00 	vadd.f32	s7, s14, s0
 80064ce:	ee33 3a67 	vsub.f32	s6, s6, s15
 80064d2:	ee37 7a40 	vsub.f32	s14, s14, s0
 80064d6:	ee35 0a20 	vadd.f32	s0, s10, s1
 80064da:	ee63 7a09 	vmul.f32	s15, s6, s18
 80064de:	ee35 5a60 	vsub.f32	s10, s10, s1
 80064e2:	ee33 3a80 	vadd.f32	s6, s7, s0
 80064e6:	ee74 0a24 	vadd.f32	s1, s8, s9
 80064ea:	ee65 5a89 	vmul.f32	s11, s11, s18
 80064ee:	ee74 4a64 	vsub.f32	s9, s8, s9
 80064f2:	ee33 4ac0 	vsub.f32	s8, s7, s0
 80064f6:	ee75 3a25 	vadd.f32	s7, s10, s11
 80064fa:	ee75 5a65 	vsub.f32	s11, s10, s11
 80064fe:	ee37 5a27 	vadd.f32	s10, s14, s15
 8006502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006506:	ee32 7a86 	vadd.f32	s14, s5, s12
 800650a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800650e:	ee73 2a20 	vadd.f32	s5, s6, s1
 8006512:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006516:	ee72 0a24 	vadd.f32	s1, s4, s9
 800651a:	edcc 2a00 	vstr	s5, [ip]
 800651e:	ee72 4a64 	vsub.f32	s9, s4, s9
 8006522:	ed84 3a01 	vstr	s6, [r4, #4]
 8006526:	ee74 2a61 	vsub.f32	s5, s8, s3
 800652a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800652e:	edc7 0a00 	vstr	s1, [r7]
 8006532:	ee31 1a63 	vsub.f32	s2, s2, s7
 8006536:	edc0 4a00 	vstr	s9, [r0]
 800653a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800653e:	edc7 2a01 	vstr	s5, [r7, #4]
 8006542:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8006546:	441c      	add	r4, r3
 8006548:	ee75 5a47 	vsub.f32	s11, s10, s14
 800654c:	449c      	add	ip, r3
 800654e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8006552:	441f      	add	r7, r3
 8006554:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8006558:	ee34 4a21 	vadd.f32	s8, s8, s3
 800655c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006560:	ed80 4a01 	vstr	s8, [r0, #4]
 8006564:	4418      	add	r0, r3
 8006566:	ed86 3a00 	vstr	s6, [r6]
 800656a:	ed01 1a01 	vstr	s2, [r1, #-4]
 800656e:	ed42 3a01 	vstr	s7, [r2, #-4]
 8006572:	edc5 6a00 	vstr	s13, [r5]
 8006576:	edc6 5a01 	vstr	s11, [r6, #4]
 800657a:	441e      	add	r6, r3
 800657c:	ed81 5a00 	vstr	s10, [r1]
 8006580:	4419      	add	r1, r3
 8006582:	ed82 7a00 	vstr	s14, [r2]
 8006586:	441a      	add	r2, r3
 8006588:	edc5 7a01 	vstr	s15, [r5, #4]
 800658c:	441d      	add	r5, r3
 800658e:	f63f af44 	bhi.w	800641a <arm_radix8_butterfly_f32+0x66>
 8006592:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006594:	2f07      	cmp	r7, #7
 8006596:	f240 81e8 	bls.w	800696a <arm_radix8_butterfly_f32+0x5b6>
 800659a:	9903      	ldr	r1, [sp, #12]
 800659c:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80065a0:	9e01      	ldr	r6, [sp, #4]
 80065a2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80065a6:	19ca      	adds	r2, r1, r7
 80065a8:	1c4c      	adds	r4, r1, #1
 80065aa:	eb05 010e 	add.w	r1, r5, lr
 80065ae:	00ed      	lsls	r5, r5, #3
 80065b0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80065b4:	3608      	adds	r6, #8
 80065b6:	950f      	str	r5, [sp, #60]	; 0x3c
 80065b8:	eb01 050e 	add.w	r5, r1, lr
 80065bc:	00c9      	lsls	r1, r1, #3
 80065be:	443c      	add	r4, r7
 80065c0:	9618      	str	r6, [sp, #96]	; 0x60
 80065c2:	00ee      	lsls	r6, r5, #3
 80065c4:	460f      	mov	r7, r1
 80065c6:	9114      	str	r1, [sp, #80]	; 0x50
 80065c8:	9902      	ldr	r1, [sp, #8]
 80065ca:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80065ce:	9611      	str	r6, [sp, #68]	; 0x44
 80065d0:	00c0      	lsls	r0, r0, #3
 80065d2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80065d4:	3108      	adds	r1, #8
 80065d6:	3404      	adds	r4, #4
 80065d8:	f04f 0901 	mov.w	r9, #1
 80065dc:	9119      	str	r1, [sp, #100]	; 0x64
 80065de:	eb05 010e 	add.w	r1, r5, lr
 80065e2:	4635      	mov	r5, r6
 80065e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	443d      	add	r5, r7
 80065ea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80065ec:	9507      	str	r5, [sp, #28]
 80065ee:	eb01 050e 	add.w	r5, r1, lr
 80065f2:	00c9      	lsls	r1, r1, #3
 80065f4:	19f7      	adds	r7, r6, r7
 80065f6:	00ed      	lsls	r5, r5, #3
 80065f8:	9110      	str	r1, [sp, #64]	; 0x40
 80065fa:	00d1      	lsls	r1, r2, #3
 80065fc:	970a      	str	r7, [sp, #40]	; 0x28
 80065fe:	462f      	mov	r7, r5
 8006600:	9515      	str	r5, [sp, #84]	; 0x54
 8006602:	0112      	lsls	r2, r2, #4
 8006604:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006606:	19f4      	adds	r4, r6, r7
 8006608:	320c      	adds	r2, #12
 800660a:	3108      	adds	r1, #8
 800660c:	1975      	adds	r5, r6, r5
 800660e:	9408      	str	r4, [sp, #32]
 8006610:	9217      	str	r2, [sp, #92]	; 0x5c
 8006612:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006616:	9509      	str	r5, [sp, #36]	; 0x24
 8006618:	f100 020c 	add.w	r2, r0, #12
 800661c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800661e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006620:	1975      	adds	r5, r6, r5
 8006622:	9216      	str	r2, [sp, #88]	; 0x58
 8006624:	1932      	adds	r2, r6, r4
 8006626:	911b      	str	r1, [sp, #108]	; 0x6c
 8006628:	9505      	str	r5, [sp, #20]
 800662a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800662e:	0179      	lsls	r1, r7, #5
 8006630:	9204      	str	r2, [sp, #16]
 8006632:	1972      	adds	r2, r6, r5
 8006634:	9412      	str	r4, [sp, #72]	; 0x48
 8006636:	9513      	str	r5, [sp, #76]	; 0x4c
 8006638:	9206      	str	r2, [sp, #24]
 800663a:	f101 0208 	add.w	r2, r1, #8
 800663e:	921a      	str	r2, [sp, #104]	; 0x68
 8006640:	2200      	movs	r2, #0
 8006642:	f102 0108 	add.w	r1, r2, #8
 8006646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006648:	46cc      	mov	ip, r9
 800664a:	460f      	mov	r7, r1
 800664c:	910c      	str	r1, [sp, #48]	; 0x30
 800664e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006650:	eb0b 0e07 	add.w	lr, fp, r7
 8006654:	9f04      	ldr	r7, [sp, #16]
 8006656:	188e      	adds	r6, r1, r2
 8006658:	9918      	ldr	r1, [sp, #96]	; 0x60
 800665a:	edd7 fa00 	vldr	s31, [r7]
 800665e:	9f06      	ldr	r7, [sp, #24]
 8006660:	188d      	adds	r5, r1, r2
 8006662:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006664:	445e      	add	r6, fp
 8006666:	ed97 fa00 	vldr	s30, [r7]
 800666a:	445d      	add	r5, fp
 800666c:	9f05      	ldr	r7, [sp, #20]
 800666e:	188c      	adds	r4, r1, r2
 8006670:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006672:	edd7 ea00 	vldr	s29, [r7]
 8006676:	445c      	add	r4, fp
 8006678:	9f07      	ldr	r7, [sp, #28]
 800667a:	1888      	adds	r0, r1, r2
 800667c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800667e:	ed97 ea00 	vldr	s28, [r7]
 8006682:	4458      	add	r0, fp
 8006684:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006686:	4411      	add	r1, r2
 8006688:	441a      	add	r2, r3
 800668a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668c:	edd7 da00 	vldr	s27, [r7]
 8006690:	4459      	add	r1, fp
 8006692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006694:	445a      	add	r2, fp
 8006696:	930d      	str	r3, [sp, #52]	; 0x34
 8006698:	ed97 da00 	vldr	s26, [r7]
 800669c:	9f08      	ldr	r7, [sp, #32]
 800669e:	edd7 ca00 	vldr	s25, [r7]
 80066a2:	9f04      	ldr	r7, [sp, #16]
 80066a4:	ed97 ca01 	vldr	s24, [r7, #4]
 80066a8:	9f06      	ldr	r7, [sp, #24]
 80066aa:	edd7 ba01 	vldr	s23, [r7, #4]
 80066ae:	9f05      	ldr	r7, [sp, #20]
 80066b0:	ed97 ba01 	vldr	s22, [r7, #4]
 80066b4:	9f07      	ldr	r7, [sp, #28]
 80066b6:	edd7 aa01 	vldr	s21, [r7, #4]
 80066ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80066bc:	ed97 aa01 	vldr	s20, [r7, #4]
 80066c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80066c8:	9f08      	ldr	r7, [sp, #32]
 80066ca:	edcd 7a02 	vstr	s15, [sp, #8]
 80066ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80066d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066d4:	edcd 7a03 	vstr	s15, [sp, #12]
 80066d8:	e002      	b.n	80066e0 <arm_radix8_butterfly_f32+0x32c>
 80066da:	bf00      	nop
 80066dc:	3f3504f3 	.word	0x3f3504f3
 80066e0:	ed90 2a00 	vldr	s4, [r0]
 80066e4:	44c4      	add	ip, r8
 80066e6:	ed96 7a00 	vldr	s14, [r6]
 80066ea:	ed94 8a00 	vldr	s16, [r4]
 80066ee:	45e2      	cmp	sl, ip
 80066f0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80066f4:	ed95 5a00 	vldr	s10, [r5]
 80066f8:	ed51 5a01 	vldr	s11, [r1, #-4]
 80066fc:	ee38 6a27 	vadd.f32	s12, s16, s15
 8006700:	ed9e 1a00 	vldr	s2, [lr]
 8006704:	ee78 2a67 	vsub.f32	s5, s16, s15
 8006708:	ed17 4a01 	vldr	s8, [r7, #-4]
 800670c:	ee75 3a25 	vadd.f32	s7, s10, s11
 8006710:	ee31 3a07 	vadd.f32	s6, s2, s14
 8006714:	edde 4a01 	vldr	s9, [lr, #4]
 8006718:	ee72 6a04 	vadd.f32	s13, s4, s8
 800671c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006720:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006724:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8006728:	ee32 4a44 	vsub.f32	s8, s4, s8
 800672c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8006730:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006734:	ee75 7a84 	vadd.f32	s15, s11, s8
 8006738:	ee33 3a46 	vsub.f32	s6, s6, s12
 800673c:	ed8e 7a00 	vstr	s14, [lr]
 8006740:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006744:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006748:	ed90 2a01 	vldr	s4, [r0, #4]
 800674c:	ed95 7a01 	vldr	s14, [r5, #4]
 8006750:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8006754:	ed91 6a00 	vldr	s12, [r1]
 8006758:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800675c:	edd7 8a00 	vldr	s17, [r7]
 8006760:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8006764:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8006768:	edd2 0a00 	vldr	s1, [r2]
 800676c:	ee72 6a68 	vsub.f32	s13, s4, s17
 8006770:	edd6 7a01 	vldr	s15, [r6, #4]
 8006774:	ee77 2a46 	vsub.f32	s5, s14, s12
 8006778:	ee37 0a06 	vadd.f32	s0, s14, s12
 800677c:	ed94 7a01 	vldr	s14, [r4, #4]
 8006780:	ee32 6a28 	vadd.f32	s12, s4, s17
 8006784:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8006788:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800678c:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8006790:	ee77 6a20 	vadd.f32	s13, s14, s1
 8006794:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8006798:	ee37 7a60 	vsub.f32	s14, s14, s1
 800679c:	ee24 4a09 	vmul.f32	s8, s8, s18
 80067a0:	ee70 0a06 	vadd.f32	s1, s0, s12
 80067a4:	ee69 7a89 	vmul.f32	s15, s19, s18
 80067a8:	ee62 2a89 	vmul.f32	s5, s5, s18
 80067ac:	ee30 6a46 	vsub.f32	s12, s0, s12
 80067b0:	ee32 0a26 	vadd.f32	s0, s4, s13
 80067b4:	ee72 6a66 	vsub.f32	s13, s4, s13
 80067b8:	ee77 8a62 	vsub.f32	s17, s14, s5
 80067bc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80067c0:	ee74 7ae7 	vsub.f32	s15, s9, s15
 80067c4:	ee77 4a22 	vadd.f32	s9, s14, s5
 80067c8:	ee71 2a04 	vadd.f32	s5, s2, s8
 80067cc:	ee31 7a44 	vsub.f32	s14, s2, s8
 80067d0:	ee30 1a60 	vsub.f32	s2, s0, s1
 80067d4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80067d8:	ee33 6a46 	vsub.f32	s12, s6, s12
 80067dc:	ee36 3ae3 	vsub.f32	s6, s13, s7
 80067e0:	ee37 4ac8 	vsub.f32	s8, s15, s16
 80067e4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80067e8:	ee77 7a88 	vadd.f32	s15, s15, s16
 80067ec:	ee72 3a65 	vsub.f32	s7, s4, s11
 80067f0:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80067f4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80067f8:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80067fc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8006800:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8006804:	ee77 2a28 	vadd.f32	s5, s14, s17
 8006808:	ee37 7a68 	vsub.f32	s14, s14, s17
 800680c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8006810:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8006814:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8006818:	ee70 0a20 	vadd.f32	s1, s0, s1
 800681c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8006820:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8006824:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8006828:	edce 0a01 	vstr	s1, [lr, #4]
 800682c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006830:	449e      	add	lr, r3
 8006832:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8006836:	ee31 5a45 	vsub.f32	s10, s2, s10
 800683a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800683e:	ed86 8a00 	vstr	s16, [r6]
 8006842:	ee39 0a80 	vadd.f32	s0, s19, s0
 8006846:	ee33 3a61 	vsub.f32	s6, s6, s3
 800684a:	ed86 5a01 	vstr	s10, [r6, #4]
 800684e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8006852:	edcd 3a01 	vstr	s7, [sp, #4]
 8006856:	ed9d 5a03 	vldr	s10, [sp, #12]
 800685a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800685e:	eddd 3a02 	vldr	s7, [sp, #8]
 8006862:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8006866:	ed84 0a00 	vstr	s0, [r4]
 800686a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800686e:	ed84 3a01 	vstr	s6, [r4, #4]
 8006872:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8006876:	ee23 6a86 	vmul.f32	s12, s7, s12
 800687a:	eddd 3a01 	vldr	s7, [sp, #4]
 800687e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8006882:	441e      	add	r6, r3
 8006884:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8006888:	441c      	add	r4, r3
 800688a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800688e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8006892:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8006896:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800689a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800689e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80068a2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80068a6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80068aa:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80068ae:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80068b2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80068b6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80068ba:	ee38 8a01 	vadd.f32	s16, s16, s2
 80068be:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80068c2:	ee39 5a85 	vadd.f32	s10, s19, s10
 80068c6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80068ca:	ed02 8a01 	vstr	s16, [r2, #-4]
 80068ce:	ee30 0a21 	vadd.f32	s0, s0, s3
 80068d2:	ed82 6a00 	vstr	s12, [r2]
 80068d6:	ee74 2a62 	vsub.f32	s5, s8, s5
 80068da:	edc5 0a00 	vstr	s1, [r5]
 80068de:	ee33 3a28 	vadd.f32	s6, s6, s17
 80068e2:	edc5 3a01 	vstr	s7, [r5, #4]
 80068e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80068ea:	ed07 5a01 	vstr	s10, [r7, #-4]
 80068ee:	edc7 4a00 	vstr	s9, [r7]
 80068f2:	441d      	add	r5, r3
 80068f4:	ed01 0a01 	vstr	s0, [r1, #-4]
 80068f8:	441a      	add	r2, r3
 80068fa:	edc1 2a00 	vstr	s5, [r1]
 80068fe:	441f      	add	r7, r3
 8006900:	ed80 3a00 	vstr	s6, [r0]
 8006904:	4419      	add	r1, r3
 8006906:	ed80 7a01 	vstr	s14, [r0, #4]
 800690a:	4418      	add	r0, r3
 800690c:	f63f aee8 	bhi.w	80066e0 <arm_radix8_butterfly_f32+0x32c>
 8006910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006912:	f109 0901 	add.w	r9, r9, #1
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	4413      	add	r3, r2
 800691c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	4413      	add	r3, r2
 8006924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006926:	9306      	str	r3, [sp, #24]
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	4413      	add	r3, r2
 800692c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	4413      	add	r3, r2
 8006934:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693a:	4413      	add	r3, r2
 800693c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800693e:	930a      	str	r3, [sp, #40]	; 0x28
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	4413      	add	r3, r2
 8006944:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	4413      	add	r3, r2
 800694c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800694e:	9308      	str	r3, [sp, #32]
 8006950:	3208      	adds	r2, #8
 8006952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006954:	920b      	str	r2, [sp, #44]	; 0x2c
 8006956:	4599      	cmp	r9, r3
 8006958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800695a:	f47f ae72 	bne.w	8006642 <arm_radix8_butterfly_f32+0x28e>
 800695e:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8006962:	46c8      	mov	r8, r9
 8006964:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8006968:	e533      	b.n	80063d2 <arm_radix8_butterfly_f32+0x1e>
 800696a:	b01f      	add	sp, #124	; 0x7c
 800696c:	ecbd 8b10 	vpop	{d8-d15}
 8006970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000010 	.word	0x20000010

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4d0d      	ldr	r5, [pc, #52]	; (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006986:	1b64      	subs	r4, r4, r5
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2600      	movs	r6, #0
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4d0b      	ldr	r5, [pc, #44]	; (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	; (80069c4 <__libc_init_array+0x44>)
 8006994:	f002 fd72 	bl	800947c <_init>
 8006998:	1b64      	subs	r4, r4, r5
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2600      	movs	r6, #0
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	0801cf74 	.word	0x0801cf74
 80069bc:	0801cf74 	.word	0x0801cf74
 80069c0:	0801cf74 	.word	0x0801cf74
 80069c4:	0801cf78 	.word	0x0801cf78

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <__cvt>:
 80069d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	ec55 4b10 	vmov	r4, r5, d0
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	460e      	mov	r6, r1
 80069e4:	4619      	mov	r1, r3
 80069e6:	462b      	mov	r3, r5
 80069e8:	bfbb      	ittet	lt
 80069ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069ee:	461d      	movlt	r5, r3
 80069f0:	2300      	movge	r3, #0
 80069f2:	232d      	movlt	r3, #45	; 0x2d
 80069f4:	700b      	strb	r3, [r1, #0]
 80069f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069fc:	4691      	mov	r9, r2
 80069fe:	f023 0820 	bic.w	r8, r3, #32
 8006a02:	bfbc      	itt	lt
 8006a04:	4622      	movlt	r2, r4
 8006a06:	4614      	movlt	r4, r2
 8006a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a0c:	d005      	beq.n	8006a1a <__cvt+0x42>
 8006a0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a12:	d100      	bne.n	8006a16 <__cvt+0x3e>
 8006a14:	3601      	adds	r6, #1
 8006a16:	2102      	movs	r1, #2
 8006a18:	e000      	b.n	8006a1c <__cvt+0x44>
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	ab03      	add	r3, sp, #12
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	ab02      	add	r3, sp, #8
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	ec45 4b10 	vmov	d0, r4, r5
 8006a28:	4653      	mov	r3, sl
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	f000 fce4 	bl	80073f8 <_dtoa_r>
 8006a30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a34:	4607      	mov	r7, r0
 8006a36:	d102      	bne.n	8006a3e <__cvt+0x66>
 8006a38:	f019 0f01 	tst.w	r9, #1
 8006a3c:	d022      	beq.n	8006a84 <__cvt+0xac>
 8006a3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a42:	eb07 0906 	add.w	r9, r7, r6
 8006a46:	d110      	bne.n	8006a6a <__cvt+0x92>
 8006a48:	783b      	ldrb	r3, [r7, #0]
 8006a4a:	2b30      	cmp	r3, #48	; 0x30
 8006a4c:	d10a      	bne.n	8006a64 <__cvt+0x8c>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2300      	movs	r3, #0
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7fa f8b7 	bl	8000bc8 <__aeabi_dcmpeq>
 8006a5a:	b918      	cbnz	r0, 8006a64 <__cvt+0x8c>
 8006a5c:	f1c6 0601 	rsb	r6, r6, #1
 8006a60:	f8ca 6000 	str.w	r6, [sl]
 8006a64:	f8da 3000 	ldr.w	r3, [sl]
 8006a68:	4499      	add	r9, r3
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7fa f8a9 	bl	8000bc8 <__aeabi_dcmpeq>
 8006a76:	b108      	cbz	r0, 8006a7c <__cvt+0xa4>
 8006a78:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a7c:	2230      	movs	r2, #48	; 0x30
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	454b      	cmp	r3, r9
 8006a82:	d307      	bcc.n	8006a94 <__cvt+0xbc>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a88:	1bdb      	subs	r3, r3, r7
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	b004      	add	sp, #16
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	1c59      	adds	r1, r3, #1
 8006a96:	9103      	str	r1, [sp, #12]
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e7f0      	b.n	8006a7e <__cvt+0xa6>

08006a9c <__exponent>:
 8006a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	bfb8      	it	lt
 8006aa4:	4249      	neglt	r1, r1
 8006aa6:	f803 2b02 	strb.w	r2, [r3], #2
 8006aaa:	bfb4      	ite	lt
 8006aac:	222d      	movlt	r2, #45	; 0x2d
 8006aae:	222b      	movge	r2, #43	; 0x2b
 8006ab0:	2909      	cmp	r1, #9
 8006ab2:	7042      	strb	r2, [r0, #1]
 8006ab4:	dd2a      	ble.n	8006b0c <__exponent+0x70>
 8006ab6:	f10d 0407 	add.w	r4, sp, #7
 8006aba:	46a4      	mov	ip, r4
 8006abc:	270a      	movs	r7, #10
 8006abe:	46a6      	mov	lr, r4
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ac6:	fb07 1516 	mls	r5, r7, r6, r1
 8006aca:	3530      	adds	r5, #48	; 0x30
 8006acc:	2a63      	cmp	r2, #99	; 0x63
 8006ace:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ad2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	dcf1      	bgt.n	8006abe <__exponent+0x22>
 8006ada:	3130      	adds	r1, #48	; 0x30
 8006adc:	f1ae 0502 	sub.w	r5, lr, #2
 8006ae0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ae4:	1c44      	adds	r4, r0, #1
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	4561      	cmp	r1, ip
 8006aea:	d30a      	bcc.n	8006b02 <__exponent+0x66>
 8006aec:	f10d 0209 	add.w	r2, sp, #9
 8006af0:	eba2 020e 	sub.w	r2, r2, lr
 8006af4:	4565      	cmp	r5, ip
 8006af6:	bf88      	it	hi
 8006af8:	2200      	movhi	r2, #0
 8006afa:	4413      	add	r3, r2
 8006afc:	1a18      	subs	r0, r3, r0
 8006afe:	b003      	add	sp, #12
 8006b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b0a:	e7ed      	b.n	8006ae8 <__exponent+0x4c>
 8006b0c:	2330      	movs	r3, #48	; 0x30
 8006b0e:	3130      	adds	r1, #48	; 0x30
 8006b10:	7083      	strb	r3, [r0, #2]
 8006b12:	70c1      	strb	r1, [r0, #3]
 8006b14:	1d03      	adds	r3, r0, #4
 8006b16:	e7f1      	b.n	8006afc <__exponent+0x60>

08006b18 <_printf_float>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	ed2d 8b02 	vpush	{d8}
 8006b20:	b08d      	sub	sp, #52	; 0x34
 8006b22:	460c      	mov	r4, r1
 8006b24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b28:	4616      	mov	r6, r2
 8006b2a:	461f      	mov	r7, r3
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	f001 fb47 	bl	80081c0 <_localeconv_r>
 8006b32:	f8d0 a000 	ldr.w	sl, [r0]
 8006b36:	4650      	mov	r0, sl
 8006b38:	f7f9 fbca 	bl	80002d0 <strlen>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	f8d8 3000 	ldr.w	r3, [r8]
 8006b48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b4c:	3307      	adds	r3, #7
 8006b4e:	f023 0307 	bic.w	r3, r3, #7
 8006b52:	f103 0208 	add.w	r2, r3, #8
 8006b56:	f8c8 2000 	str.w	r2, [r8]
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b70:	ee08 0a10 	vmov	s16, r0
 8006b74:	4b9f      	ldr	r3, [pc, #636]	; (8006df4 <_printf_float+0x2dc>)
 8006b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	f7fa f855 	bl	8000c2c <__aeabi_dcmpun>
 8006b82:	bb88      	cbnz	r0, 8006be8 <_printf_float+0xd0>
 8006b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b88:	4b9a      	ldr	r3, [pc, #616]	; (8006df4 <_printf_float+0x2dc>)
 8006b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8e:	f7fa f82f 	bl	8000bf0 <__aeabi_dcmple>
 8006b92:	bb48      	cbnz	r0, 8006be8 <_printf_float+0xd0>
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7fa f81e 	bl	8000bdc <__aeabi_dcmplt>
 8006ba0:	b110      	cbz	r0, 8006ba8 <_printf_float+0x90>
 8006ba2:	232d      	movs	r3, #45	; 0x2d
 8006ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba8:	4b93      	ldr	r3, [pc, #588]	; (8006df8 <_printf_float+0x2e0>)
 8006baa:	4894      	ldr	r0, [pc, #592]	; (8006dfc <_printf_float+0x2e4>)
 8006bac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bb0:	bf94      	ite	ls
 8006bb2:	4698      	movls	r8, r3
 8006bb4:	4680      	movhi	r8, r0
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	f023 0204 	bic.w	r2, r3, #4
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	f04f 0900 	mov.w	r9, #0
 8006bc6:	9700      	str	r7, [sp, #0]
 8006bc8:	4633      	mov	r3, r6
 8006bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f9d8 	bl	8006f84 <_printf_common>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f040 8090 	bne.w	8006cfa <_printf_float+0x1e2>
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	b00d      	add	sp, #52	; 0x34
 8006be0:	ecbd 8b02 	vpop	{d8}
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7fa f81c 	bl	8000c2c <__aeabi_dcmpun>
 8006bf4:	b140      	cbz	r0, 8006c08 <_printf_float+0xf0>
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfbc      	itt	lt
 8006bfc:	232d      	movlt	r3, #45	; 0x2d
 8006bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c02:	487f      	ldr	r0, [pc, #508]	; (8006e00 <_printf_float+0x2e8>)
 8006c04:	4b7f      	ldr	r3, [pc, #508]	; (8006e04 <_printf_float+0x2ec>)
 8006c06:	e7d1      	b.n	8006bac <_printf_float+0x94>
 8006c08:	6863      	ldr	r3, [r4, #4]
 8006c0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c0e:	9206      	str	r2, [sp, #24]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	d13f      	bne.n	8006c94 <_printf_float+0x17c>
 8006c14:	2306      	movs	r3, #6
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	6861      	ldr	r1, [r4, #4]
 8006c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c20:	2300      	movs	r3, #0
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	ab0a      	add	r3, sp, #40	; 0x28
 8006c26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c2a:	ab09      	add	r3, sp, #36	; 0x24
 8006c2c:	ec49 8b10 	vmov	d0, r8, r9
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7ff fecd 	bl	80069d8 <__cvt>
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c42:	2b47      	cmp	r3, #71	; 0x47
 8006c44:	4680      	mov	r8, r0
 8006c46:	d108      	bne.n	8006c5a <_printf_float+0x142>
 8006c48:	1cc8      	adds	r0, r1, #3
 8006c4a:	db02      	blt.n	8006c52 <_printf_float+0x13a>
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	dd41      	ble.n	8006cd6 <_printf_float+0x1be>
 8006c52:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c56:	fa5f fb8b 	uxtb.w	fp, fp
 8006c5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c5e:	d820      	bhi.n	8006ca2 <_printf_float+0x18a>
 8006c60:	3901      	subs	r1, #1
 8006c62:	465a      	mov	r2, fp
 8006c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c68:	9109      	str	r1, [sp, #36]	; 0x24
 8006c6a:	f7ff ff17 	bl	8006a9c <__exponent>
 8006c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c70:	1813      	adds	r3, r2, r0
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	4681      	mov	r9, r0
 8006c76:	6123      	str	r3, [r4, #16]
 8006c78:	dc02      	bgt.n	8006c80 <_printf_float+0x168>
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	07d2      	lsls	r2, r2, #31
 8006c7e:	d501      	bpl.n	8006c84 <_printf_float+0x16c>
 8006c80:	3301      	adds	r3, #1
 8006c82:	6123      	str	r3, [r4, #16]
 8006c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d09c      	beq.n	8006bc6 <_printf_float+0xae>
 8006c8c:	232d      	movs	r3, #45	; 0x2d
 8006c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c92:	e798      	b.n	8006bc6 <_printf_float+0xae>
 8006c94:	9a06      	ldr	r2, [sp, #24]
 8006c96:	2a47      	cmp	r2, #71	; 0x47
 8006c98:	d1be      	bne.n	8006c18 <_printf_float+0x100>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1bc      	bne.n	8006c18 <_printf_float+0x100>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e7b9      	b.n	8006c16 <_printf_float+0xfe>
 8006ca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ca6:	d118      	bne.n	8006cda <_printf_float+0x1c2>
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	dd0b      	ble.n	8006cc6 <_printf_float+0x1ae>
 8006cae:	6121      	str	r1, [r4, #16]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_printf_float+0x1a0>
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d502      	bpl.n	8006cbe <_printf_float+0x1a6>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	440b      	add	r3, r1
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cc0:	f04f 0900 	mov.w	r9, #0
 8006cc4:	e7de      	b.n	8006c84 <_printf_float+0x16c>
 8006cc6:	b913      	cbnz	r3, 8006cce <_printf_float+0x1b6>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	07d2      	lsls	r2, r2, #31
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_float+0x1ba>
 8006cce:	3302      	adds	r3, #2
 8006cd0:	e7f4      	b.n	8006cbc <_printf_float+0x1a4>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7f2      	b.n	8006cbc <_printf_float+0x1a4>
 8006cd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	db05      	blt.n	8006cec <_printf_float+0x1d4>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	6121      	str	r1, [r4, #16]
 8006ce4:	07d8      	lsls	r0, r3, #31
 8006ce6:	d5ea      	bpl.n	8006cbe <_printf_float+0x1a6>
 8006ce8:	1c4b      	adds	r3, r1, #1
 8006cea:	e7e7      	b.n	8006cbc <_printf_float+0x1a4>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfd4      	ite	le
 8006cf0:	f1c1 0202 	rsble	r2, r1, #2
 8006cf4:	2201      	movgt	r2, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	e7e0      	b.n	8006cbc <_printf_float+0x1a4>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	055a      	lsls	r2, r3, #21
 8006cfe:	d407      	bmi.n	8006d10 <_printf_float+0x1f8>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	4642      	mov	r2, r8
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d12c      	bne.n	8006d68 <_printf_float+0x250>
 8006d0e:	e764      	b.n	8006bda <_printf_float+0xc2>
 8006d10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d14:	f240 80e0 	bls.w	8006ed8 <_printf_float+0x3c0>
 8006d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f7f9 ff52 	bl	8000bc8 <__aeabi_dcmpeq>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d034      	beq.n	8006d92 <_printf_float+0x27a>
 8006d28:	4a37      	ldr	r2, [pc, #220]	; (8006e08 <_printf_float+0x2f0>)
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af51 	beq.w	8006bda <_printf_float+0xc2>
 8006d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	db02      	blt.n	8006d46 <_printf_float+0x22e>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	07d8      	lsls	r0, r3, #31
 8006d44:	d510      	bpl.n	8006d68 <_printf_float+0x250>
 8006d46:	ee18 3a10 	vmov	r3, s16
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af41 	beq.w	8006bda <_printf_float+0xc2>
 8006d58:	f04f 0800 	mov.w	r8, #0
 8006d5c:	f104 091a 	add.w	r9, r4, #26
 8006d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	4543      	cmp	r3, r8
 8006d66:	dc09      	bgt.n	8006d7c <_printf_float+0x264>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	079b      	lsls	r3, r3, #30
 8006d6c:	f100 8105 	bmi.w	8006f7a <_printf_float+0x462>
 8006d70:	68e0      	ldr	r0, [r4, #12]
 8006d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d74:	4298      	cmp	r0, r3
 8006d76:	bfb8      	it	lt
 8006d78:	4618      	movlt	r0, r3
 8006d7a:	e730      	b.n	8006bde <_printf_float+0xc6>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	464a      	mov	r2, r9
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af27 	beq.w	8006bda <_printf_float+0xc2>
 8006d8c:	f108 0801 	add.w	r8, r8, #1
 8006d90:	e7e6      	b.n	8006d60 <_printf_float+0x248>
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc39      	bgt.n	8006e0c <_printf_float+0x2f4>
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <_printf_float+0x2f0>)
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af19 	beq.w	8006bda <_printf_float+0xc2>
 8006da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d102      	bne.n	8006db6 <_printf_float+0x29e>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	07d9      	lsls	r1, r3, #31
 8006db4:	d5d8      	bpl.n	8006d68 <_printf_float+0x250>
 8006db6:	ee18 3a10 	vmov	r3, s16
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f af09 	beq.w	8006bda <_printf_float+0xc2>
 8006dc8:	f04f 0900 	mov.w	r9, #0
 8006dcc:	f104 0a1a 	add.w	sl, r4, #26
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	425b      	negs	r3, r3
 8006dd4:	454b      	cmp	r3, r9
 8006dd6:	dc01      	bgt.n	8006ddc <_printf_float+0x2c4>
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dda:	e792      	b.n	8006d02 <_printf_float+0x1ea>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4652      	mov	r2, sl
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f aef7 	beq.w	8006bda <_printf_float+0xc2>
 8006dec:	f109 0901 	add.w	r9, r9, #1
 8006df0:	e7ee      	b.n	8006dd0 <_printf_float+0x2b8>
 8006df2:	bf00      	nop
 8006df4:	7fefffff 	.word	0x7fefffff
 8006df8:	0801cb94 	.word	0x0801cb94
 8006dfc:	0801cb98 	.word	0x0801cb98
 8006e00:	0801cba0 	.word	0x0801cba0
 8006e04:	0801cb9c 	.word	0x0801cb9c
 8006e08:	0801cba4 	.word	0x0801cba4
 8006e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e10:	429a      	cmp	r2, r3
 8006e12:	bfa8      	it	ge
 8006e14:	461a      	movge	r2, r3
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	4691      	mov	r9, r2
 8006e1a:	dc37      	bgt.n	8006e8c <_printf_float+0x374>
 8006e1c:	f04f 0b00 	mov.w	fp, #0
 8006e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e24:	f104 021a 	add.w	r2, r4, #26
 8006e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e2a:	9305      	str	r3, [sp, #20]
 8006e2c:	eba3 0309 	sub.w	r3, r3, r9
 8006e30:	455b      	cmp	r3, fp
 8006e32:	dc33      	bgt.n	8006e9c <_printf_float+0x384>
 8006e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	db3b      	blt.n	8006eb4 <_printf_float+0x39c>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	07da      	lsls	r2, r3, #31
 8006e40:	d438      	bmi.n	8006eb4 <_printf_float+0x39c>
 8006e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e44:	9a05      	ldr	r2, [sp, #20]
 8006e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e48:	1a9a      	subs	r2, r3, r2
 8006e4a:	eba3 0901 	sub.w	r9, r3, r1
 8006e4e:	4591      	cmp	r9, r2
 8006e50:	bfa8      	it	ge
 8006e52:	4691      	movge	r9, r2
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	dc35      	bgt.n	8006ec6 <_printf_float+0x3ae>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e62:	f104 0a1a 	add.w	sl, r4, #26
 8006e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	eba3 0309 	sub.w	r3, r3, r9
 8006e70:	4543      	cmp	r3, r8
 8006e72:	f77f af79 	ble.w	8006d68 <_printf_float+0x250>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4652      	mov	r2, sl
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f aeaa 	beq.w	8006bda <_printf_float+0xc2>
 8006e86:	f108 0801 	add.w	r8, r8, #1
 8006e8a:	e7ec      	b.n	8006e66 <_printf_float+0x34e>
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4642      	mov	r2, r8
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c0      	bne.n	8006e1c <_printf_float+0x304>
 8006e9a:	e69e      	b.n	8006bda <_printf_float+0xc2>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	9205      	str	r2, [sp, #20]
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f ae97 	beq.w	8006bda <_printf_float+0xc2>
 8006eac:	9a05      	ldr	r2, [sp, #20]
 8006eae:	f10b 0b01 	add.w	fp, fp, #1
 8006eb2:	e7b9      	b.n	8006e28 <_printf_float+0x310>
 8006eb4:	ee18 3a10 	vmov	r3, s16
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d1be      	bne.n	8006e42 <_printf_float+0x32a>
 8006ec4:	e689      	b.n	8006bda <_printf_float+0xc2>
 8006ec6:	9a05      	ldr	r2, [sp, #20]
 8006ec8:	464b      	mov	r3, r9
 8006eca:	4442      	add	r2, r8
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d1c1      	bne.n	8006e5a <_printf_float+0x342>
 8006ed6:	e680      	b.n	8006bda <_printf_float+0xc2>
 8006ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eda:	2a01      	cmp	r2, #1
 8006edc:	dc01      	bgt.n	8006ee2 <_printf_float+0x3ca>
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d538      	bpl.n	8006f54 <_printf_float+0x43c>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	f43f ae74 	beq.w	8006bda <_printf_float+0xc2>
 8006ef2:	ee18 3a10 	vmov	r3, s16
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f ae6b 	beq.w	8006bda <_printf_float+0xc2>
 8006f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f7f9 fe5c 	bl	8000bc8 <__aeabi_dcmpeq>
 8006f10:	b9d8      	cbnz	r0, 8006f4a <_printf_float+0x432>
 8006f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f14:	f108 0201 	add.w	r2, r8, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	d10e      	bne.n	8006f42 <_printf_float+0x42a>
 8006f24:	e659      	b.n	8006bda <_printf_float+0xc2>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4652      	mov	r2, sl
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f ae52 	beq.w	8006bda <_printf_float+0xc2>
 8006f36:	f108 0801 	add.w	r8, r8, #1
 8006f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	4543      	cmp	r3, r8
 8006f40:	dcf1      	bgt.n	8006f26 <_printf_float+0x40e>
 8006f42:	464b      	mov	r3, r9
 8006f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f48:	e6dc      	b.n	8006d04 <_printf_float+0x1ec>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	f104 0a1a 	add.w	sl, r4, #26
 8006f52:	e7f2      	b.n	8006f3a <_printf_float+0x422>
 8006f54:	2301      	movs	r3, #1
 8006f56:	4642      	mov	r2, r8
 8006f58:	e7df      	b.n	8006f1a <_printf_float+0x402>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	464a      	mov	r2, r9
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f ae38 	beq.w	8006bda <_printf_float+0xc2>
 8006f6a:	f108 0801 	add.w	r8, r8, #1
 8006f6e:	68e3      	ldr	r3, [r4, #12]
 8006f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f72:	1a5b      	subs	r3, r3, r1
 8006f74:	4543      	cmp	r3, r8
 8006f76:	dcf0      	bgt.n	8006f5a <_printf_float+0x442>
 8006f78:	e6fa      	b.n	8006d70 <_printf_float+0x258>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	f104 0919 	add.w	r9, r4, #25
 8006f82:	e7f4      	b.n	8006f6e <_printf_float+0x456>

08006f84 <_printf_common>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	4616      	mov	r6, r2
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bfb8      	it	lt
 8006f98:	4613      	movlt	r3, r2
 8006f9a:	6033      	str	r3, [r6, #0]
 8006f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	b10a      	cbz	r2, 8006faa <_printf_common+0x26>
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	0699      	lsls	r1, r3, #26
 8006fae:	bf42      	ittt	mi
 8006fb0:	6833      	ldrmi	r3, [r6, #0]
 8006fb2:	3302      	addmi	r3, #2
 8006fb4:	6033      	strmi	r3, [r6, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	f015 0506 	ands.w	r5, r5, #6
 8006fbc:	d106      	bne.n	8006fcc <_printf_common+0x48>
 8006fbe:	f104 0a19 	add.w	sl, r4, #25
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dc26      	bgt.n	800701a <_printf_common+0x96>
 8006fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fd0:	1e13      	subs	r3, r2, #0
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	bf18      	it	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	0692      	lsls	r2, r2, #26
 8006fda:	d42b      	bmi.n	8007034 <_printf_common+0xb0>
 8006fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d01e      	beq.n	8007028 <_printf_common+0xa4>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	68e5      	ldr	r5, [r4, #12]
 8006fee:	6832      	ldr	r2, [r6, #0]
 8006ff0:	f003 0306 	and.w	r3, r3, #6
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	bf08      	it	eq
 8006ff8:	1aad      	subeq	r5, r5, r2
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	6922      	ldr	r2, [r4, #16]
 8006ffe:	bf0c      	ite	eq
 8007000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007004:	2500      	movne	r5, #0
 8007006:	4293      	cmp	r3, r2
 8007008:	bfc4      	itt	gt
 800700a:	1a9b      	subgt	r3, r3, r2
 800700c:	18ed      	addgt	r5, r5, r3
 800700e:	2600      	movs	r6, #0
 8007010:	341a      	adds	r4, #26
 8007012:	42b5      	cmp	r5, r6
 8007014:	d11a      	bne.n	800704c <_printf_common+0xc8>
 8007016:	2000      	movs	r0, #0
 8007018:	e008      	b.n	800702c <_printf_common+0xa8>
 800701a:	2301      	movs	r3, #1
 800701c:	4652      	mov	r2, sl
 800701e:	4649      	mov	r1, r9
 8007020:	4638      	mov	r0, r7
 8007022:	47c0      	blx	r8
 8007024:	3001      	adds	r0, #1
 8007026:	d103      	bne.n	8007030 <_printf_common+0xac>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	3501      	adds	r5, #1
 8007032:	e7c6      	b.n	8006fc2 <_printf_common+0x3e>
 8007034:	18e1      	adds	r1, r4, r3
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	2030      	movs	r0, #48	; 0x30
 800703a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703e:	4422      	add	r2, r4
 8007040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007048:	3302      	adds	r3, #2
 800704a:	e7c7      	b.n	8006fdc <_printf_common+0x58>
 800704c:	2301      	movs	r3, #1
 800704e:	4622      	mov	r2, r4
 8007050:	4649      	mov	r1, r9
 8007052:	4638      	mov	r0, r7
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d0e6      	beq.n	8007028 <_printf_common+0xa4>
 800705a:	3601      	adds	r6, #1
 800705c:	e7d9      	b.n	8007012 <_printf_common+0x8e>
	...

08007060 <_printf_i>:
 8007060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	7e0f      	ldrb	r7, [r1, #24]
 8007066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007068:	2f78      	cmp	r7, #120	; 0x78
 800706a:	4691      	mov	r9, r2
 800706c:	4680      	mov	r8, r0
 800706e:	460c      	mov	r4, r1
 8007070:	469a      	mov	sl, r3
 8007072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007076:	d807      	bhi.n	8007088 <_printf_i+0x28>
 8007078:	2f62      	cmp	r7, #98	; 0x62
 800707a:	d80a      	bhi.n	8007092 <_printf_i+0x32>
 800707c:	2f00      	cmp	r7, #0
 800707e:	f000 80d8 	beq.w	8007232 <_printf_i+0x1d2>
 8007082:	2f58      	cmp	r7, #88	; 0x58
 8007084:	f000 80a3 	beq.w	80071ce <_printf_i+0x16e>
 8007088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800708c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007090:	e03a      	b.n	8007108 <_printf_i+0xa8>
 8007092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007096:	2b15      	cmp	r3, #21
 8007098:	d8f6      	bhi.n	8007088 <_printf_i+0x28>
 800709a:	a101      	add	r1, pc, #4	; (adr r1, 80070a0 <_printf_i+0x40>)
 800709c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	08007089 	.word	0x08007089
 80070ac:	08007089 	.word	0x08007089
 80070b0:	08007089 	.word	0x08007089
 80070b4:	08007089 	.word	0x08007089
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007089 	.word	0x08007089
 80070c0:	08007089 	.word	0x08007089
 80070c4:	08007089 	.word	0x08007089
 80070c8:	08007089 	.word	0x08007089
 80070cc:	08007219 	.word	0x08007219
 80070d0:	0800713d 	.word	0x0800713d
 80070d4:	080071fb 	.word	0x080071fb
 80070d8:	08007089 	.word	0x08007089
 80070dc:	08007089 	.word	0x08007089
 80070e0:	0800723b 	.word	0x0800723b
 80070e4:	08007089 	.word	0x08007089
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	08007089 	.word	0x08007089
 80070f0:	08007089 	.word	0x08007089
 80070f4:	08007203 	.word	0x08007203
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007108:	2301      	movs	r3, #1
 800710a:	e0a3      	b.n	8007254 <_printf_i+0x1f4>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	6829      	ldr	r1, [r5, #0]
 8007110:	0606      	lsls	r6, r0, #24
 8007112:	f101 0304 	add.w	r3, r1, #4
 8007116:	d50a      	bpl.n	800712e <_printf_i+0xce>
 8007118:	680e      	ldr	r6, [r1, #0]
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	2e00      	cmp	r6, #0
 800711e:	da03      	bge.n	8007128 <_printf_i+0xc8>
 8007120:	232d      	movs	r3, #45	; 0x2d
 8007122:	4276      	negs	r6, r6
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	485e      	ldr	r0, [pc, #376]	; (80072a4 <_printf_i+0x244>)
 800712a:	230a      	movs	r3, #10
 800712c:	e019      	b.n	8007162 <_printf_i+0x102>
 800712e:	680e      	ldr	r6, [r1, #0]
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007136:	bf18      	it	ne
 8007138:	b236      	sxthne	r6, r6
 800713a:	e7ef      	b.n	800711c <_printf_i+0xbc>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	6029      	str	r1, [r5, #0]
 8007144:	0601      	lsls	r1, r0, #24
 8007146:	d501      	bpl.n	800714c <_printf_i+0xec>
 8007148:	681e      	ldr	r6, [r3, #0]
 800714a:	e002      	b.n	8007152 <_printf_i+0xf2>
 800714c:	0646      	lsls	r6, r0, #25
 800714e:	d5fb      	bpl.n	8007148 <_printf_i+0xe8>
 8007150:	881e      	ldrh	r6, [r3, #0]
 8007152:	4854      	ldr	r0, [pc, #336]	; (80072a4 <_printf_i+0x244>)
 8007154:	2f6f      	cmp	r7, #111	; 0x6f
 8007156:	bf0c      	ite	eq
 8007158:	2308      	moveq	r3, #8
 800715a:	230a      	movne	r3, #10
 800715c:	2100      	movs	r1, #0
 800715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007162:	6865      	ldr	r5, [r4, #4]
 8007164:	60a5      	str	r5, [r4, #8]
 8007166:	2d00      	cmp	r5, #0
 8007168:	bfa2      	ittt	ge
 800716a:	6821      	ldrge	r1, [r4, #0]
 800716c:	f021 0104 	bicge.w	r1, r1, #4
 8007170:	6021      	strge	r1, [r4, #0]
 8007172:	b90e      	cbnz	r6, 8007178 <_printf_i+0x118>
 8007174:	2d00      	cmp	r5, #0
 8007176:	d04d      	beq.n	8007214 <_printf_i+0x1b4>
 8007178:	4615      	mov	r5, r2
 800717a:	fbb6 f1f3 	udiv	r1, r6, r3
 800717e:	fb03 6711 	mls	r7, r3, r1, r6
 8007182:	5dc7      	ldrb	r7, [r0, r7]
 8007184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007188:	4637      	mov	r7, r6
 800718a:	42bb      	cmp	r3, r7
 800718c:	460e      	mov	r6, r1
 800718e:	d9f4      	bls.n	800717a <_printf_i+0x11a>
 8007190:	2b08      	cmp	r3, #8
 8007192:	d10b      	bne.n	80071ac <_printf_i+0x14c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07de      	lsls	r6, r3, #31
 8007198:	d508      	bpl.n	80071ac <_printf_i+0x14c>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4299      	cmp	r1, r3
 80071a0:	bfde      	ittt	le
 80071a2:	2330      	movle	r3, #48	; 0x30
 80071a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ac:	1b52      	subs	r2, r2, r5
 80071ae:	6122      	str	r2, [r4, #16]
 80071b0:	f8cd a000 	str.w	sl, [sp]
 80071b4:	464b      	mov	r3, r9
 80071b6:	aa03      	add	r2, sp, #12
 80071b8:	4621      	mov	r1, r4
 80071ba:	4640      	mov	r0, r8
 80071bc:	f7ff fee2 	bl	8006f84 <_printf_common>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d14c      	bne.n	800725e <_printf_i+0x1fe>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b004      	add	sp, #16
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	4835      	ldr	r0, [pc, #212]	; (80072a4 <_printf_i+0x244>)
 80071d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071d4:	6829      	ldr	r1, [r5, #0]
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071dc:	6029      	str	r1, [r5, #0]
 80071de:	061d      	lsls	r5, r3, #24
 80071e0:	d514      	bpl.n	800720c <_printf_i+0x1ac>
 80071e2:	07df      	lsls	r7, r3, #31
 80071e4:	bf44      	itt	mi
 80071e6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ea:	6023      	strmi	r3, [r4, #0]
 80071ec:	b91e      	cbnz	r6, 80071f6 <_printf_i+0x196>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f023 0320 	bic.w	r3, r3, #32
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	2310      	movs	r3, #16
 80071f8:	e7b0      	b.n	800715c <_printf_i+0xfc>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	f043 0320 	orr.w	r3, r3, #32
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	2378      	movs	r3, #120	; 0x78
 8007204:	4828      	ldr	r0, [pc, #160]	; (80072a8 <_printf_i+0x248>)
 8007206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800720a:	e7e3      	b.n	80071d4 <_printf_i+0x174>
 800720c:	0659      	lsls	r1, r3, #25
 800720e:	bf48      	it	mi
 8007210:	b2b6      	uxthmi	r6, r6
 8007212:	e7e6      	b.n	80071e2 <_printf_i+0x182>
 8007214:	4615      	mov	r5, r2
 8007216:	e7bb      	b.n	8007190 <_printf_i+0x130>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6826      	ldr	r6, [r4, #0]
 800721c:	6961      	ldr	r1, [r4, #20]
 800721e:	1d18      	adds	r0, r3, #4
 8007220:	6028      	str	r0, [r5, #0]
 8007222:	0635      	lsls	r5, r6, #24
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	d501      	bpl.n	800722c <_printf_i+0x1cc>
 8007228:	6019      	str	r1, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0x1d2>
 800722c:	0670      	lsls	r0, r6, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0x1c8>
 8007230:	8019      	strh	r1, [r3, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	4615      	mov	r5, r2
 8007238:	e7ba      	b.n	80071b0 <_printf_i+0x150>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	602a      	str	r2, [r5, #0]
 8007240:	681d      	ldr	r5, [r3, #0]
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	2100      	movs	r1, #0
 8007246:	4628      	mov	r0, r5
 8007248:	f7f9 f84a 	bl	80002e0 <memchr>
 800724c:	b108      	cbz	r0, 8007252 <_printf_i+0x1f2>
 800724e:	1b40      	subs	r0, r0, r5
 8007250:	6060      	str	r0, [r4, #4]
 8007252:	6863      	ldr	r3, [r4, #4]
 8007254:	6123      	str	r3, [r4, #16]
 8007256:	2300      	movs	r3, #0
 8007258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725c:	e7a8      	b.n	80071b0 <_printf_i+0x150>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	462a      	mov	r2, r5
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	47d0      	blx	sl
 8007268:	3001      	adds	r0, #1
 800726a:	d0ab      	beq.n	80071c4 <_printf_i+0x164>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	079b      	lsls	r3, r3, #30
 8007270:	d413      	bmi.n	800729a <_printf_i+0x23a>
 8007272:	68e0      	ldr	r0, [r4, #12]
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	4298      	cmp	r0, r3
 8007278:	bfb8      	it	lt
 800727a:	4618      	movlt	r0, r3
 800727c:	e7a4      	b.n	80071c8 <_printf_i+0x168>
 800727e:	2301      	movs	r3, #1
 8007280:	4632      	mov	r2, r6
 8007282:	4649      	mov	r1, r9
 8007284:	4640      	mov	r0, r8
 8007286:	47d0      	blx	sl
 8007288:	3001      	adds	r0, #1
 800728a:	d09b      	beq.n	80071c4 <_printf_i+0x164>
 800728c:	3501      	adds	r5, #1
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	9903      	ldr	r1, [sp, #12]
 8007292:	1a5b      	subs	r3, r3, r1
 8007294:	42ab      	cmp	r3, r5
 8007296:	dcf2      	bgt.n	800727e <_printf_i+0x21e>
 8007298:	e7eb      	b.n	8007272 <_printf_i+0x212>
 800729a:	2500      	movs	r5, #0
 800729c:	f104 0619 	add.w	r6, r4, #25
 80072a0:	e7f5      	b.n	800728e <_printf_i+0x22e>
 80072a2:	bf00      	nop
 80072a4:	0801cba6 	.word	0x0801cba6
 80072a8:	0801cbb7 	.word	0x0801cbb7

080072ac <iprintf>:
 80072ac:	b40f      	push	{r0, r1, r2, r3}
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <iprintf+0x2c>)
 80072b0:	b513      	push	{r0, r1, r4, lr}
 80072b2:	681c      	ldr	r4, [r3, #0]
 80072b4:	b124      	cbz	r4, 80072c0 <iprintf+0x14>
 80072b6:	69a3      	ldr	r3, [r4, #24]
 80072b8:	b913      	cbnz	r3, 80072c0 <iprintf+0x14>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fee2 	bl	8008084 <__sinit>
 80072c0:	ab05      	add	r3, sp, #20
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	68a1      	ldr	r1, [r4, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	4620      	mov	r0, r4
 80072ca:	f001 fc3b 	bl	8008b44 <_vfiprintf_r>
 80072ce:	b002      	add	sp, #8
 80072d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d4:	b004      	add	sp, #16
 80072d6:	4770      	bx	lr
 80072d8:	20000010 	.word	0x20000010

080072dc <quorem>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	6903      	ldr	r3, [r0, #16]
 80072e2:	690c      	ldr	r4, [r1, #16]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	4607      	mov	r7, r0
 80072e8:	f2c0 8081 	blt.w	80073ee <quorem+0x112>
 80072ec:	3c01      	subs	r4, #1
 80072ee:	f101 0814 	add.w	r8, r1, #20
 80072f2:	f100 0514 	add.w	r5, r0, #20
 80072f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007304:	3301      	adds	r3, #1
 8007306:	429a      	cmp	r2, r3
 8007308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800730c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007310:	fbb2 f6f3 	udiv	r6, r2, r3
 8007314:	d331      	bcc.n	800737a <quorem+0x9e>
 8007316:	f04f 0e00 	mov.w	lr, #0
 800731a:	4640      	mov	r0, r8
 800731c:	46ac      	mov	ip, r5
 800731e:	46f2      	mov	sl, lr
 8007320:	f850 2b04 	ldr.w	r2, [r0], #4
 8007324:	b293      	uxth	r3, r2
 8007326:	fb06 e303 	mla	r3, r6, r3, lr
 800732a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800732e:	b29b      	uxth	r3, r3
 8007330:	ebaa 0303 	sub.w	r3, sl, r3
 8007334:	f8dc a000 	ldr.w	sl, [ip]
 8007338:	0c12      	lsrs	r2, r2, #16
 800733a:	fa13 f38a 	uxtah	r3, r3, sl
 800733e:	fb06 e202 	mla	r2, r6, r2, lr
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800734a:	b292      	uxth	r2, r2
 800734c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007354:	f8bd 3000 	ldrh.w	r3, [sp]
 8007358:	4581      	cmp	r9, r0
 800735a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800735e:	f84c 3b04 	str.w	r3, [ip], #4
 8007362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007366:	d2db      	bcs.n	8007320 <quorem+0x44>
 8007368:	f855 300b 	ldr.w	r3, [r5, fp]
 800736c:	b92b      	cbnz	r3, 800737a <quorem+0x9e>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	3b04      	subs	r3, #4
 8007372:	429d      	cmp	r5, r3
 8007374:	461a      	mov	r2, r3
 8007376:	d32e      	bcc.n	80073d6 <quorem+0xfa>
 8007378:	613c      	str	r4, [r7, #16]
 800737a:	4638      	mov	r0, r7
 800737c:	f001 f9c0 	bl	8008700 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	db24      	blt.n	80073ce <quorem+0xf2>
 8007384:	3601      	adds	r6, #1
 8007386:	4628      	mov	r0, r5
 8007388:	f04f 0c00 	mov.w	ip, #0
 800738c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007390:	f8d0 e000 	ldr.w	lr, [r0]
 8007394:	b293      	uxth	r3, r2
 8007396:	ebac 0303 	sub.w	r3, ip, r3
 800739a:	0c12      	lsrs	r2, r2, #16
 800739c:	fa13 f38e 	uxtah	r3, r3, lr
 80073a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ae:	45c1      	cmp	r9, r8
 80073b0:	f840 3b04 	str.w	r3, [r0], #4
 80073b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073b8:	d2e8      	bcs.n	800738c <quorem+0xb0>
 80073ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073c2:	b922      	cbnz	r2, 80073ce <quorem+0xf2>
 80073c4:	3b04      	subs	r3, #4
 80073c6:	429d      	cmp	r5, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	d30a      	bcc.n	80073e2 <quorem+0x106>
 80073cc:	613c      	str	r4, [r7, #16]
 80073ce:	4630      	mov	r0, r6
 80073d0:	b003      	add	sp, #12
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	3b04      	subs	r3, #4
 80073da:	2a00      	cmp	r2, #0
 80073dc:	d1cc      	bne.n	8007378 <quorem+0x9c>
 80073de:	3c01      	subs	r4, #1
 80073e0:	e7c7      	b.n	8007372 <quorem+0x96>
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d1f0      	bne.n	80073cc <quorem+0xf0>
 80073ea:	3c01      	subs	r4, #1
 80073ec:	e7eb      	b.n	80073c6 <quorem+0xea>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7ee      	b.n	80073d0 <quorem+0xf4>
 80073f2:	0000      	movs	r0, r0
 80073f4:	0000      	movs	r0, r0
	...

080073f8 <_dtoa_r>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	ed2d 8b04 	vpush	{d8-d9}
 8007400:	ec57 6b10 	vmov	r6, r7, d0
 8007404:	b093      	sub	sp, #76	; 0x4c
 8007406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800740c:	9106      	str	r1, [sp, #24]
 800740e:	ee10 aa10 	vmov	sl, s0
 8007412:	4604      	mov	r4, r0
 8007414:	9209      	str	r2, [sp, #36]	; 0x24
 8007416:	930c      	str	r3, [sp, #48]	; 0x30
 8007418:	46bb      	mov	fp, r7
 800741a:	b975      	cbnz	r5, 800743a <_dtoa_r+0x42>
 800741c:	2010      	movs	r0, #16
 800741e:	f000 fed7 	bl	80081d0 <malloc>
 8007422:	4602      	mov	r2, r0
 8007424:	6260      	str	r0, [r4, #36]	; 0x24
 8007426:	b920      	cbnz	r0, 8007432 <_dtoa_r+0x3a>
 8007428:	4ba7      	ldr	r3, [pc, #668]	; (80076c8 <_dtoa_r+0x2d0>)
 800742a:	21ea      	movs	r1, #234	; 0xea
 800742c:	48a7      	ldr	r0, [pc, #668]	; (80076cc <_dtoa_r+0x2d4>)
 800742e:	f001 fddf 	bl	8008ff0 <__assert_func>
 8007432:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007436:	6005      	str	r5, [r0, #0]
 8007438:	60c5      	str	r5, [r0, #12]
 800743a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	b151      	cbz	r1, 8007456 <_dtoa_r+0x5e>
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	604a      	str	r2, [r1, #4]
 8007444:	2301      	movs	r3, #1
 8007446:	4093      	lsls	r3, r2
 8007448:	608b      	str	r3, [r1, #8]
 800744a:	4620      	mov	r0, r4
 800744c:	f000 ff16 	bl	800827c <_Bfree>
 8007450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	1e3b      	subs	r3, r7, #0
 8007458:	bfaa      	itet	ge
 800745a:	2300      	movge	r3, #0
 800745c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007460:	f8c8 3000 	strge.w	r3, [r8]
 8007464:	4b9a      	ldr	r3, [pc, #616]	; (80076d0 <_dtoa_r+0x2d8>)
 8007466:	bfbc      	itt	lt
 8007468:	2201      	movlt	r2, #1
 800746a:	f8c8 2000 	strlt.w	r2, [r8]
 800746e:	ea33 030b 	bics.w	r3, r3, fp
 8007472:	d11b      	bne.n	80074ac <_dtoa_r+0xb4>
 8007474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007476:	f242 730f 	movw	r3, #9999	; 0x270f
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007480:	4333      	orrs	r3, r6
 8007482:	f000 8592 	beq.w	8007faa <_dtoa_r+0xbb2>
 8007486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007488:	b963      	cbnz	r3, 80074a4 <_dtoa_r+0xac>
 800748a:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <_dtoa_r+0x2dc>)
 800748c:	e022      	b.n	80074d4 <_dtoa_r+0xdc>
 800748e:	4b92      	ldr	r3, [pc, #584]	; (80076d8 <_dtoa_r+0x2e0>)
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	3308      	adds	r3, #8
 8007494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	9801      	ldr	r0, [sp, #4]
 800749a:	b013      	add	sp, #76	; 0x4c
 800749c:	ecbd 8b04 	vpop	{d8-d9}
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <_dtoa_r+0x2dc>)
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	3303      	adds	r3, #3
 80074aa:	e7f3      	b.n	8007494 <_dtoa_r+0x9c>
 80074ac:	2200      	movs	r2, #0
 80074ae:	2300      	movs	r3, #0
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f9 fb88 	bl	8000bc8 <__aeabi_dcmpeq>
 80074b8:	ec4b ab19 	vmov	d9, sl, fp
 80074bc:	4680      	mov	r8, r0
 80074be:	b158      	cbz	r0, 80074d8 <_dtoa_r+0xe0>
 80074c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074c2:	2301      	movs	r3, #1
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 856b 	beq.w	8007fa4 <_dtoa_r+0xbac>
 80074ce:	4883      	ldr	r0, [pc, #524]	; (80076dc <_dtoa_r+0x2e4>)
 80074d0:	6018      	str	r0, [r3, #0]
 80074d2:	1e43      	subs	r3, r0, #1
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	e7df      	b.n	8007498 <_dtoa_r+0xa0>
 80074d8:	ec4b ab10 	vmov	d0, sl, fp
 80074dc:	aa10      	add	r2, sp, #64	; 0x40
 80074de:	a911      	add	r1, sp, #68	; 0x44
 80074e0:	4620      	mov	r0, r4
 80074e2:	f001 f9b3 	bl	800884c <__d2b>
 80074e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074ea:	ee08 0a10 	vmov	s16, r0
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f000 8084 	beq.w	80075fc <_dtoa_r+0x204>
 80074f4:	ee19 3a90 	vmov	r3, s19
 80074f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007500:	4656      	mov	r6, sl
 8007502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800750a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800750e:	4b74      	ldr	r3, [pc, #464]	; (80076e0 <_dtoa_r+0x2e8>)
 8007510:	2200      	movs	r2, #0
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f8 ff37 	bl	8000388 <__aeabi_dsub>
 800751a:	a365      	add	r3, pc, #404	; (adr r3, 80076b0 <_dtoa_r+0x2b8>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f9 f8ea 	bl	80006f8 <__aeabi_dmul>
 8007524:	a364      	add	r3, pc, #400	; (adr r3, 80076b8 <_dtoa_r+0x2c0>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f8 ff2f 	bl	800038c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	4628      	mov	r0, r5
 8007532:	460f      	mov	r7, r1
 8007534:	f7f9 f876 	bl	8000624 <__aeabi_i2d>
 8007538:	a361      	add	r3, pc, #388	; (adr r3, 80076c0 <_dtoa_r+0x2c8>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f8db 	bl	80006f8 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f8 ff1f 	bl	800038c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	f7f9 fb81 	bl	8000c58 <__aeabi_d2iz>
 8007556:	2200      	movs	r2, #0
 8007558:	9000      	str	r0, [sp, #0]
 800755a:	2300      	movs	r3, #0
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fb3c 	bl	8000bdc <__aeabi_dcmplt>
 8007564:	b150      	cbz	r0, 800757c <_dtoa_r+0x184>
 8007566:	9800      	ldr	r0, [sp, #0]
 8007568:	f7f9 f85c 	bl	8000624 <__aeabi_i2d>
 800756c:	4632      	mov	r2, r6
 800756e:	463b      	mov	r3, r7
 8007570:	f7f9 fb2a 	bl	8000bc8 <__aeabi_dcmpeq>
 8007574:	b910      	cbnz	r0, 800757c <_dtoa_r+0x184>
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	2b16      	cmp	r3, #22
 8007580:	d85a      	bhi.n	8007638 <_dtoa_r+0x240>
 8007582:	9a00      	ldr	r2, [sp, #0]
 8007584:	4b57      	ldr	r3, [pc, #348]	; (80076e4 <_dtoa_r+0x2ec>)
 8007586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	ec51 0b19 	vmov	r0, r1, d9
 8007592:	f7f9 fb23 	bl	8000bdc <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d050      	beq.n	800763c <_dtoa_r+0x244>
 800759a:	9b00      	ldr	r3, [sp, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075a6:	1b5d      	subs	r5, r3, r5
 80075a8:	1e6b      	subs	r3, r5, #1
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	bf45      	ittet	mi
 80075ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80075b2:	9304      	strmi	r3, [sp, #16]
 80075b4:	2300      	movpl	r3, #0
 80075b6:	2300      	movmi	r3, #0
 80075b8:	bf4c      	ite	mi
 80075ba:	9305      	strmi	r3, [sp, #20]
 80075bc:	9304      	strpl	r3, [sp, #16]
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db3d      	blt.n	8007640 <_dtoa_r+0x248>
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	9a00      	ldr	r2, [sp, #0]
 80075c8:	920a      	str	r2, [sp, #40]	; 0x28
 80075ca:	4413      	add	r3, r2
 80075cc:	9305      	str	r3, [sp, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	f200 8089 	bhi.w	80076ec <_dtoa_r+0x2f4>
 80075da:	2b05      	cmp	r3, #5
 80075dc:	bfc4      	itt	gt
 80075de:	3b04      	subgt	r3, #4
 80075e0:	9306      	strgt	r3, [sp, #24]
 80075e2:	9b06      	ldr	r3, [sp, #24]
 80075e4:	f1a3 0302 	sub.w	r3, r3, #2
 80075e8:	bfcc      	ite	gt
 80075ea:	2500      	movgt	r5, #0
 80075ec:	2501      	movle	r5, #1
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f200 8087 	bhi.w	8007702 <_dtoa_r+0x30a>
 80075f4:	e8df f003 	tbb	[pc, r3]
 80075f8:	59383a2d 	.word	0x59383a2d
 80075fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007600:	441d      	add	r5, r3
 8007602:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007606:	2b20      	cmp	r3, #32
 8007608:	bfc1      	itttt	gt
 800760a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800760e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007612:	fa0b f303 	lslgt.w	r3, fp, r3
 8007616:	fa26 f000 	lsrgt.w	r0, r6, r0
 800761a:	bfda      	itte	le
 800761c:	f1c3 0320 	rsble	r3, r3, #32
 8007620:	fa06 f003 	lslle.w	r0, r6, r3
 8007624:	4318      	orrgt	r0, r3
 8007626:	f7f8 ffed 	bl	8000604 <__aeabi_ui2d>
 800762a:	2301      	movs	r3, #1
 800762c:	4606      	mov	r6, r0
 800762e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007632:	3d01      	subs	r5, #1
 8007634:	930e      	str	r3, [sp, #56]	; 0x38
 8007636:	e76a      	b.n	800750e <_dtoa_r+0x116>
 8007638:	2301      	movs	r3, #1
 800763a:	e7b2      	b.n	80075a2 <_dtoa_r+0x1aa>
 800763c:	900b      	str	r0, [sp, #44]	; 0x2c
 800763e:	e7b1      	b.n	80075a4 <_dtoa_r+0x1ac>
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	9a00      	ldr	r2, [sp, #0]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	4253      	negs	r3, r2
 800764a:	9307      	str	r3, [sp, #28]
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	; 0x28
 8007650:	e7bf      	b.n	80075d2 <_dtoa_r+0x1da>
 8007652:	2300      	movs	r3, #0
 8007654:	9308      	str	r3, [sp, #32]
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc55      	bgt.n	8007708 <_dtoa_r+0x310>
 800765c:	2301      	movs	r3, #1
 800765e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007662:	461a      	mov	r2, r3
 8007664:	9209      	str	r2, [sp, #36]	; 0x24
 8007666:	e00c      	b.n	8007682 <_dtoa_r+0x28a>
 8007668:	2301      	movs	r3, #1
 800766a:	e7f3      	b.n	8007654 <_dtoa_r+0x25c>
 800766c:	2300      	movs	r3, #0
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	4413      	add	r3, r2
 8007676:	9302      	str	r3, [sp, #8]
 8007678:	3301      	adds	r3, #1
 800767a:	2b01      	cmp	r3, #1
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	bfb8      	it	lt
 8007680:	2301      	movlt	r3, #1
 8007682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007684:	2200      	movs	r2, #0
 8007686:	6042      	str	r2, [r0, #4]
 8007688:	2204      	movs	r2, #4
 800768a:	f102 0614 	add.w	r6, r2, #20
 800768e:	429e      	cmp	r6, r3
 8007690:	6841      	ldr	r1, [r0, #4]
 8007692:	d93d      	bls.n	8007710 <_dtoa_r+0x318>
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fdb1 	bl	80081fc <_Balloc>
 800769a:	9001      	str	r0, [sp, #4]
 800769c:	2800      	cmp	r0, #0
 800769e:	d13b      	bne.n	8007718 <_dtoa_r+0x320>
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <_dtoa_r+0x2f0>)
 80076a2:	4602      	mov	r2, r0
 80076a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076a8:	e6c0      	b.n	800742c <_dtoa_r+0x34>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7df      	b.n	800766e <_dtoa_r+0x276>
 80076ae:	bf00      	nop
 80076b0:	636f4361 	.word	0x636f4361
 80076b4:	3fd287a7 	.word	0x3fd287a7
 80076b8:	8b60c8b3 	.word	0x8b60c8b3
 80076bc:	3fc68a28 	.word	0x3fc68a28
 80076c0:	509f79fb 	.word	0x509f79fb
 80076c4:	3fd34413 	.word	0x3fd34413
 80076c8:	0801cbd5 	.word	0x0801cbd5
 80076cc:	0801cbec 	.word	0x0801cbec
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	0801cbd1 	.word	0x0801cbd1
 80076d8:	0801cbc8 	.word	0x0801cbc8
 80076dc:	0801cba5 	.word	0x0801cba5
 80076e0:	3ff80000 	.word	0x3ff80000
 80076e4:	0801cd40 	.word	0x0801cd40
 80076e8:	0801cc47 	.word	0x0801cc47
 80076ec:	2501      	movs	r5, #1
 80076ee:	2300      	movs	r3, #0
 80076f0:	9306      	str	r3, [sp, #24]
 80076f2:	9508      	str	r5, [sp, #32]
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2312      	movs	r3, #18
 8007700:	e7b0      	b.n	8007664 <_dtoa_r+0x26c>
 8007702:	2301      	movs	r3, #1
 8007704:	9308      	str	r3, [sp, #32]
 8007706:	e7f5      	b.n	80076f4 <_dtoa_r+0x2fc>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800770e:	e7b8      	b.n	8007682 <_dtoa_r+0x28a>
 8007710:	3101      	adds	r1, #1
 8007712:	6041      	str	r1, [r0, #4]
 8007714:	0052      	lsls	r2, r2, #1
 8007716:	e7b8      	b.n	800768a <_dtoa_r+0x292>
 8007718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	2b0e      	cmp	r3, #14
 8007722:	f200 809d 	bhi.w	8007860 <_dtoa_r+0x468>
 8007726:	2d00      	cmp	r5, #0
 8007728:	f000 809a 	beq.w	8007860 <_dtoa_r+0x468>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd32      	ble.n	8007798 <_dtoa_r+0x3a0>
 8007732:	4ab7      	ldr	r2, [pc, #732]	; (8007a10 <_dtoa_r+0x618>)
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800773c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	05d8      	lsls	r0, r3, #23
 8007744:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007748:	d516      	bpl.n	8007778 <_dtoa_r+0x380>
 800774a:	4bb2      	ldr	r3, [pc, #712]	; (8007a14 <_dtoa_r+0x61c>)
 800774c:	ec51 0b19 	vmov	r0, r1, d9
 8007750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007754:	f7f9 f8fa 	bl	800094c <__aeabi_ddiv>
 8007758:	f007 070f 	and.w	r7, r7, #15
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	2503      	movs	r5, #3
 8007762:	4eac      	ldr	r6, [pc, #688]	; (8007a14 <_dtoa_r+0x61c>)
 8007764:	b957      	cbnz	r7, 800777c <_dtoa_r+0x384>
 8007766:	4642      	mov	r2, r8
 8007768:	464b      	mov	r3, r9
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	f7f9 f8ed 	bl	800094c <__aeabi_ddiv>
 8007772:	4682      	mov	sl, r0
 8007774:	468b      	mov	fp, r1
 8007776:	e028      	b.n	80077ca <_dtoa_r+0x3d2>
 8007778:	2502      	movs	r5, #2
 800777a:	e7f2      	b.n	8007762 <_dtoa_r+0x36a>
 800777c:	07f9      	lsls	r1, r7, #31
 800777e:	d508      	bpl.n	8007792 <_dtoa_r+0x39a>
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007788:	f7f8 ffb6 	bl	80006f8 <__aeabi_dmul>
 800778c:	3501      	adds	r5, #1
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	107f      	asrs	r7, r7, #1
 8007794:	3608      	adds	r6, #8
 8007796:	e7e5      	b.n	8007764 <_dtoa_r+0x36c>
 8007798:	f000 809b 	beq.w	80078d2 <_dtoa_r+0x4da>
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	4f9d      	ldr	r7, [pc, #628]	; (8007a14 <_dtoa_r+0x61c>)
 80077a0:	425e      	negs	r6, r3
 80077a2:	4b9b      	ldr	r3, [pc, #620]	; (8007a10 <_dtoa_r+0x618>)
 80077a4:	f006 020f 	and.w	r2, r6, #15
 80077a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	ec51 0b19 	vmov	r0, r1, d9
 80077b4:	f7f8 ffa0 	bl	80006f8 <__aeabi_dmul>
 80077b8:	1136      	asrs	r6, r6, #4
 80077ba:	4682      	mov	sl, r0
 80077bc:	468b      	mov	fp, r1
 80077be:	2300      	movs	r3, #0
 80077c0:	2502      	movs	r5, #2
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	d17a      	bne.n	80078bc <_dtoa_r+0x4c4>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1d3      	bne.n	8007772 <_dtoa_r+0x37a>
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8082 	beq.w	80078d6 <_dtoa_r+0x4de>
 80077d2:	4b91      	ldr	r3, [pc, #580]	; (8007a18 <_dtoa_r+0x620>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	4650      	mov	r0, sl
 80077d8:	4659      	mov	r1, fp
 80077da:	f7f9 f9ff 	bl	8000bdc <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d079      	beq.n	80078d6 <_dtoa_r+0x4de>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d076      	beq.n	80078d6 <_dtoa_r+0x4de>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd36      	ble.n	800785c <_dtoa_r+0x464>
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	1e5f      	subs	r7, r3, #1
 80077f6:	2200      	movs	r2, #0
 80077f8:	4b88      	ldr	r3, [pc, #544]	; (8007a1c <_dtoa_r+0x624>)
 80077fa:	f7f8 ff7d 	bl	80006f8 <__aeabi_dmul>
 80077fe:	9e02      	ldr	r6, [sp, #8]
 8007800:	4682      	mov	sl, r0
 8007802:	468b      	mov	fp, r1
 8007804:	3501      	adds	r5, #1
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 ff0c 	bl	8000624 <__aeabi_i2d>
 800780c:	4652      	mov	r2, sl
 800780e:	465b      	mov	r3, fp
 8007810:	f7f8 ff72 	bl	80006f8 <__aeabi_dmul>
 8007814:	4b82      	ldr	r3, [pc, #520]	; (8007a20 <_dtoa_r+0x628>)
 8007816:	2200      	movs	r2, #0
 8007818:	f7f8 fdb8 	bl	800038c <__adddf3>
 800781c:	46d0      	mov	r8, sl
 800781e:	46d9      	mov	r9, fp
 8007820:	4682      	mov	sl, r0
 8007822:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007826:	2e00      	cmp	r6, #0
 8007828:	d158      	bne.n	80078dc <_dtoa_r+0x4e4>
 800782a:	4b7e      	ldr	r3, [pc, #504]	; (8007a24 <_dtoa_r+0x62c>)
 800782c:	2200      	movs	r2, #0
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fda9 	bl	8000388 <__aeabi_dsub>
 8007836:	4652      	mov	r2, sl
 8007838:	465b      	mov	r3, fp
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	f7f9 f9eb 	bl	8000c18 <__aeabi_dcmpgt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f040 8295 	bne.w	8007d72 <_dtoa_r+0x97a>
 8007848:	4652      	mov	r2, sl
 800784a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f7f9 f9c3 	bl	8000bdc <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8289 	bne.w	8007d6e <_dtoa_r+0x976>
 800785c:	ec5b ab19 	vmov	sl, fp, d9
 8007860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007862:	2b00      	cmp	r3, #0
 8007864:	f2c0 8148 	blt.w	8007af8 <_dtoa_r+0x700>
 8007868:	9a00      	ldr	r2, [sp, #0]
 800786a:	2a0e      	cmp	r2, #14
 800786c:	f300 8144 	bgt.w	8007af8 <_dtoa_r+0x700>
 8007870:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <_dtoa_r+0x618>)
 8007872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	f280 80d5 	bge.w	8007a2c <_dtoa_r+0x634>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f300 80d1 	bgt.w	8007a2c <_dtoa_r+0x634>
 800788a:	f040 826f 	bne.w	8007d6c <_dtoa_r+0x974>
 800788e:	4b65      	ldr	r3, [pc, #404]	; (8007a24 <_dtoa_r+0x62c>)
 8007890:	2200      	movs	r2, #0
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f7f8 ff2f 	bl	80006f8 <__aeabi_dmul>
 800789a:	4652      	mov	r2, sl
 800789c:	465b      	mov	r3, fp
 800789e:	f7f9 f9b1 	bl	8000c04 <__aeabi_dcmpge>
 80078a2:	9e03      	ldr	r6, [sp, #12]
 80078a4:	4637      	mov	r7, r6
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f040 8245 	bne.w	8007d36 <_dtoa_r+0x93e>
 80078ac:	9d01      	ldr	r5, [sp, #4]
 80078ae:	2331      	movs	r3, #49	; 0x31
 80078b0:	f805 3b01 	strb.w	r3, [r5], #1
 80078b4:	9b00      	ldr	r3, [sp, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	e240      	b.n	8007d3e <_dtoa_r+0x946>
 80078bc:	07f2      	lsls	r2, r6, #31
 80078be:	d505      	bpl.n	80078cc <_dtoa_r+0x4d4>
 80078c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c4:	f7f8 ff18 	bl	80006f8 <__aeabi_dmul>
 80078c8:	3501      	adds	r5, #1
 80078ca:	2301      	movs	r3, #1
 80078cc:	1076      	asrs	r6, r6, #1
 80078ce:	3708      	adds	r7, #8
 80078d0:	e777      	b.n	80077c2 <_dtoa_r+0x3ca>
 80078d2:	2502      	movs	r5, #2
 80078d4:	e779      	b.n	80077ca <_dtoa_r+0x3d2>
 80078d6:	9f00      	ldr	r7, [sp, #0]
 80078d8:	9e03      	ldr	r6, [sp, #12]
 80078da:	e794      	b.n	8007806 <_dtoa_r+0x40e>
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <_dtoa_r+0x618>)
 80078e0:	4431      	add	r1, r6
 80078e2:	910d      	str	r1, [sp, #52]	; 0x34
 80078e4:	9908      	ldr	r1, [sp, #32]
 80078e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d043      	beq.n	800797a <_dtoa_r+0x582>
 80078f2:	494d      	ldr	r1, [pc, #308]	; (8007a28 <_dtoa_r+0x630>)
 80078f4:	2000      	movs	r0, #0
 80078f6:	f7f9 f829 	bl	800094c <__aeabi_ddiv>
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	f7f8 fd43 	bl	8000388 <__aeabi_dsub>
 8007902:	9d01      	ldr	r5, [sp, #4]
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	4649      	mov	r1, r9
 800790a:	4640      	mov	r0, r8
 800790c:	f7f9 f9a4 	bl	8000c58 <__aeabi_d2iz>
 8007910:	4606      	mov	r6, r0
 8007912:	f7f8 fe87 	bl	8000624 <__aeabi_i2d>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f8 fd33 	bl	8000388 <__aeabi_dsub>
 8007922:	3630      	adds	r6, #48	; 0x30
 8007924:	f805 6b01 	strb.w	r6, [r5], #1
 8007928:	4652      	mov	r2, sl
 800792a:	465b      	mov	r3, fp
 800792c:	4680      	mov	r8, r0
 800792e:	4689      	mov	r9, r1
 8007930:	f7f9 f954 	bl	8000bdc <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d163      	bne.n	8007a00 <_dtoa_r+0x608>
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	4936      	ldr	r1, [pc, #216]	; (8007a18 <_dtoa_r+0x620>)
 800793e:	2000      	movs	r0, #0
 8007940:	f7f8 fd22 	bl	8000388 <__aeabi_dsub>
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	f7f9 f948 	bl	8000bdc <__aeabi_dcmplt>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 80b5 	bne.w	8007abc <_dtoa_r+0x6c4>
 8007952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007954:	429d      	cmp	r5, r3
 8007956:	d081      	beq.n	800785c <_dtoa_r+0x464>
 8007958:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <_dtoa_r+0x624>)
 800795a:	2200      	movs	r2, #0
 800795c:	4650      	mov	r0, sl
 800795e:	4659      	mov	r1, fp
 8007960:	f7f8 feca 	bl	80006f8 <__aeabi_dmul>
 8007964:	4b2d      	ldr	r3, [pc, #180]	; (8007a1c <_dtoa_r+0x624>)
 8007966:	4682      	mov	sl, r0
 8007968:	468b      	mov	fp, r1
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	2200      	movs	r2, #0
 8007970:	f7f8 fec2 	bl	80006f8 <__aeabi_dmul>
 8007974:	4680      	mov	r8, r0
 8007976:	4689      	mov	r9, r1
 8007978:	e7c6      	b.n	8007908 <_dtoa_r+0x510>
 800797a:	4650      	mov	r0, sl
 800797c:	4659      	mov	r1, fp
 800797e:	f7f8 febb 	bl	80006f8 <__aeabi_dmul>
 8007982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007984:	9d01      	ldr	r5, [sp, #4]
 8007986:	930f      	str	r3, [sp, #60]	; 0x3c
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	4649      	mov	r1, r9
 800798e:	4640      	mov	r0, r8
 8007990:	f7f9 f962 	bl	8000c58 <__aeabi_d2iz>
 8007994:	4606      	mov	r6, r0
 8007996:	f7f8 fe45 	bl	8000624 <__aeabi_i2d>
 800799a:	3630      	adds	r6, #48	; 0x30
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f8 fcf0 	bl	8000388 <__aeabi_dsub>
 80079a8:	f805 6b01 	strb.w	r6, [r5], #1
 80079ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ae:	429d      	cmp	r5, r3
 80079b0:	4680      	mov	r8, r0
 80079b2:	4689      	mov	r9, r1
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	d124      	bne.n	8007a04 <_dtoa_r+0x60c>
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <_dtoa_r+0x630>)
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7f8 fce4 	bl	800038c <__adddf3>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f9 f924 	bl	8000c18 <__aeabi_dcmpgt>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d173      	bne.n	8007abc <_dtoa_r+0x6c4>
 80079d4:	4652      	mov	r2, sl
 80079d6:	465b      	mov	r3, fp
 80079d8:	4913      	ldr	r1, [pc, #76]	; (8007a28 <_dtoa_r+0x630>)
 80079da:	2000      	movs	r0, #0
 80079dc:	f7f8 fcd4 	bl	8000388 <__aeabi_dsub>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f9 f8f8 	bl	8000bdc <__aeabi_dcmplt>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f43f af35 	beq.w	800785c <_dtoa_r+0x464>
 80079f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079f4:	1e6b      	subs	r3, r5, #1
 80079f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079fc:	2b30      	cmp	r3, #48	; 0x30
 80079fe:	d0f8      	beq.n	80079f2 <_dtoa_r+0x5fa>
 8007a00:	9700      	str	r7, [sp, #0]
 8007a02:	e049      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <_dtoa_r+0x624>)
 8007a06:	f7f8 fe77 	bl	80006f8 <__aeabi_dmul>
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	e7bd      	b.n	800798c <_dtoa_r+0x594>
 8007a10:	0801cd40 	.word	0x0801cd40
 8007a14:	0801cd18 	.word	0x0801cd18
 8007a18:	3ff00000 	.word	0x3ff00000
 8007a1c:	40240000 	.word	0x40240000
 8007a20:	401c0000 	.word	0x401c0000
 8007a24:	40140000 	.word	0x40140000
 8007a28:	3fe00000 	.word	0x3fe00000
 8007a2c:	9d01      	ldr	r5, [sp, #4]
 8007a2e:	4656      	mov	r6, sl
 8007a30:	465f      	mov	r7, fp
 8007a32:	4642      	mov	r2, r8
 8007a34:	464b      	mov	r3, r9
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 ff87 	bl	800094c <__aeabi_ddiv>
 8007a3e:	f7f9 f90b 	bl	8000c58 <__aeabi_d2iz>
 8007a42:	4682      	mov	sl, r0
 8007a44:	f7f8 fdee 	bl	8000624 <__aeabi_i2d>
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	f7f8 fe54 	bl	80006f8 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a5c:	f7f8 fc94 	bl	8000388 <__aeabi_dsub>
 8007a60:	f805 6b01 	strb.w	r6, [r5], #1
 8007a64:	9e01      	ldr	r6, [sp, #4]
 8007a66:	9f03      	ldr	r7, [sp, #12]
 8007a68:	1bae      	subs	r6, r5, r6
 8007a6a:	42b7      	cmp	r7, r6
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	d135      	bne.n	8007ade <_dtoa_r+0x6e6>
 8007a72:	f7f8 fc8b 	bl	800038c <__adddf3>
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	f7f9 f8cb 	bl	8000c18 <__aeabi_dcmpgt>
 8007a82:	b9d0      	cbnz	r0, 8007aba <_dtoa_r+0x6c2>
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f9 f89c 	bl	8000bc8 <__aeabi_dcmpeq>
 8007a90:	b110      	cbz	r0, 8007a98 <_dtoa_r+0x6a0>
 8007a92:	f01a 0f01 	tst.w	sl, #1
 8007a96:	d110      	bne.n	8007aba <_dtoa_r+0x6c2>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	ee18 1a10 	vmov	r1, s16
 8007a9e:	f000 fbed 	bl	800827c <_Bfree>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9800      	ldr	r0, [sp, #0]
 8007aa6:	702b      	strb	r3, [r5, #0]
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aaa:	3001      	adds	r0, #1
 8007aac:	6018      	str	r0, [r3, #0]
 8007aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f43f acf1 	beq.w	8007498 <_dtoa_r+0xa0>
 8007ab6:	601d      	str	r5, [r3, #0]
 8007ab8:	e4ee      	b.n	8007498 <_dtoa_r+0xa0>
 8007aba:	9f00      	ldr	r7, [sp, #0]
 8007abc:	462b      	mov	r3, r5
 8007abe:	461d      	mov	r5, r3
 8007ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	d106      	bne.n	8007ad6 <_dtoa_r+0x6de>
 8007ac8:	9a01      	ldr	r2, [sp, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d1f7      	bne.n	8007abe <_dtoa_r+0x6c6>
 8007ace:	9901      	ldr	r1, [sp, #4]
 8007ad0:	2230      	movs	r2, #48	; 0x30
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	700a      	strb	r2, [r1, #0]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	3201      	adds	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e790      	b.n	8007a00 <_dtoa_r+0x608>
 8007ade:	4ba6      	ldr	r3, [pc, #664]	; (8007d78 <_dtoa_r+0x980>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fe09 	bl	80006f8 <__aeabi_dmul>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	f7f9 f86b 	bl	8000bc8 <__aeabi_dcmpeq>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d09d      	beq.n	8007a32 <_dtoa_r+0x63a>
 8007af6:	e7cf      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007af8:	9a08      	ldr	r2, [sp, #32]
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	f000 80d7 	beq.w	8007cae <_dtoa_r+0x8b6>
 8007b00:	9a06      	ldr	r2, [sp, #24]
 8007b02:	2a01      	cmp	r2, #1
 8007b04:	f300 80ba 	bgt.w	8007c7c <_dtoa_r+0x884>
 8007b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	f000 80b2 	beq.w	8007c74 <_dtoa_r+0x87c>
 8007b10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b14:	9e07      	ldr	r6, [sp, #28]
 8007b16:	9d04      	ldr	r5, [sp, #16]
 8007b18:	9a04      	ldr	r2, [sp, #16]
 8007b1a:	441a      	add	r2, r3
 8007b1c:	9204      	str	r2, [sp, #16]
 8007b1e:	9a05      	ldr	r2, [sp, #20]
 8007b20:	2101      	movs	r1, #1
 8007b22:	441a      	add	r2, r3
 8007b24:	4620      	mov	r0, r4
 8007b26:	9205      	str	r2, [sp, #20]
 8007b28:	f000 fc60 	bl	80083ec <__i2b>
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	dd0c      	ble.n	8007b4c <_dtoa_r+0x754>
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dd09      	ble.n	8007b4c <_dtoa_r+0x754>
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	bfa8      	it	ge
 8007b3e:	462b      	movge	r3, r5
 8007b40:	1ad2      	subs	r2, r2, r3
 8007b42:	9204      	str	r2, [sp, #16]
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	1aed      	subs	r5, r5, r3
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	b31b      	cbz	r3, 8007b98 <_dtoa_r+0x7a0>
 8007b50:	9b08      	ldr	r3, [sp, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80af 	beq.w	8007cb6 <_dtoa_r+0x8be>
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	dd13      	ble.n	8007b84 <_dtoa_r+0x78c>
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fd03 	bl	800856c <__pow5mult>
 8007b66:	ee18 2a10 	vmov	r2, s16
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fc52 	bl	8008418 <__multiply>
 8007b74:	ee18 1a10 	vmov	r1, s16
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fb7e 	bl	800827c <_Bfree>
 8007b80:	ee08 8a10 	vmov	s16, r8
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	1b9a      	subs	r2, r3, r6
 8007b88:	d006      	beq.n	8007b98 <_dtoa_r+0x7a0>
 8007b8a:	ee18 1a10 	vmov	r1, s16
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 fcec 	bl	800856c <__pow5mult>
 8007b94:	ee08 0a10 	vmov	s16, r0
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fc26 	bl	80083ec <__i2b>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	f340 8088 	ble.w	8007cba <_dtoa_r+0x8c2>
 8007baa:	461a      	mov	r2, r3
 8007bac:	4601      	mov	r1, r0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fcdc 	bl	800856c <__pow5mult>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	4606      	mov	r6, r0
 8007bba:	f340 8081 	ble.w	8007cc0 <_dtoa_r+0x8c8>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	6933      	ldr	r3, [r6, #16]
 8007bc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bc8:	6918      	ldr	r0, [r3, #16]
 8007bca:	f000 fbbf 	bl	800834c <__hi0bits>
 8007bce:	f1c0 0020 	rsb	r0, r0, #32
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	4418      	add	r0, r3
 8007bd6:	f010 001f 	ands.w	r0, r0, #31
 8007bda:	f000 8092 	beq.w	8007d02 <_dtoa_r+0x90a>
 8007bde:	f1c0 0320 	rsb	r3, r0, #32
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	f340 808a 	ble.w	8007cfc <_dtoa_r+0x904>
 8007be8:	f1c0 001c 	rsb	r0, r0, #28
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	4403      	add	r3, r0
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	4403      	add	r3, r0
 8007bf6:	4405      	add	r5, r0
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd07      	ble.n	8007c10 <_dtoa_r+0x818>
 8007c00:	ee18 1a10 	vmov	r1, s16
 8007c04:	461a      	mov	r2, r3
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 fd0a 	bl	8008620 <__lshift>
 8007c0c:	ee08 0a10 	vmov	s16, r0
 8007c10:	9b05      	ldr	r3, [sp, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dd05      	ble.n	8007c22 <_dtoa_r+0x82a>
 8007c16:	4631      	mov	r1, r6
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fd00 	bl	8008620 <__lshift>
 8007c20:	4606      	mov	r6, r0
 8007c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d06e      	beq.n	8007d06 <_dtoa_r+0x90e>
 8007c28:	ee18 0a10 	vmov	r0, s16
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	f000 fd67 	bl	8008700 <__mcmp>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	da67      	bge.n	8007d06 <_dtoa_r+0x90e>
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	ee18 1a10 	vmov	r1, s16
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	220a      	movs	r2, #10
 8007c42:	2300      	movs	r3, #0
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fb3b 	bl	80082c0 <__multadd>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	ee08 0a10 	vmov	s16, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 81b1 	beq.w	8007fb8 <_dtoa_r+0xbc0>
 8007c56:	2300      	movs	r3, #0
 8007c58:	4639      	mov	r1, r7
 8007c5a:	220a      	movs	r2, #10
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fb2f 	bl	80082c0 <__multadd>
 8007c62:	9b02      	ldr	r3, [sp, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	4607      	mov	r7, r0
 8007c68:	f300 808e 	bgt.w	8007d88 <_dtoa_r+0x990>
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	dc51      	bgt.n	8007d16 <_dtoa_r+0x91e>
 8007c72:	e089      	b.n	8007d88 <_dtoa_r+0x990>
 8007c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c7a:	e74b      	b.n	8007b14 <_dtoa_r+0x71c>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	1e5e      	subs	r6, r3, #1
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	42b3      	cmp	r3, r6
 8007c84:	bfbf      	itttt	lt
 8007c86:	9b07      	ldrlt	r3, [sp, #28]
 8007c88:	9607      	strlt	r6, [sp, #28]
 8007c8a:	1af2      	sublt	r2, r6, r3
 8007c8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c8e:	bfb6      	itet	lt
 8007c90:	189b      	addlt	r3, r3, r2
 8007c92:	1b9e      	subge	r6, r3, r6
 8007c94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	bfb8      	it	lt
 8007c9a:	2600      	movlt	r6, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfb7      	itett	lt
 8007ca0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ca4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ca8:	1a9d      	sublt	r5, r3, r2
 8007caa:	2300      	movlt	r3, #0
 8007cac:	e734      	b.n	8007b18 <_dtoa_r+0x720>
 8007cae:	9e07      	ldr	r6, [sp, #28]
 8007cb0:	9d04      	ldr	r5, [sp, #16]
 8007cb2:	9f08      	ldr	r7, [sp, #32]
 8007cb4:	e73b      	b.n	8007b2e <_dtoa_r+0x736>
 8007cb6:	9a07      	ldr	r2, [sp, #28]
 8007cb8:	e767      	b.n	8007b8a <_dtoa_r+0x792>
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	dc18      	bgt.n	8007cf2 <_dtoa_r+0x8fa>
 8007cc0:	f1ba 0f00 	cmp.w	sl, #0
 8007cc4:	d115      	bne.n	8007cf2 <_dtoa_r+0x8fa>
 8007cc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cca:	b993      	cbnz	r3, 8007cf2 <_dtoa_r+0x8fa>
 8007ccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd0:	0d1b      	lsrs	r3, r3, #20
 8007cd2:	051b      	lsls	r3, r3, #20
 8007cd4:	b183      	cbz	r3, 8007cf8 <_dtoa_r+0x900>
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9b05      	ldr	r3, [sp, #20]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	9305      	str	r3, [sp, #20]
 8007ce2:	f04f 0801 	mov.w	r8, #1
 8007ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af6a 	bne.w	8007bc2 <_dtoa_r+0x7ca>
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e76f      	b.n	8007bd2 <_dtoa_r+0x7da>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	e7f6      	b.n	8007ce6 <_dtoa_r+0x8ee>
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	e7f4      	b.n	8007ce6 <_dtoa_r+0x8ee>
 8007cfc:	f43f af7d 	beq.w	8007bfa <_dtoa_r+0x802>
 8007d00:	4618      	mov	r0, r3
 8007d02:	301c      	adds	r0, #28
 8007d04:	e772      	b.n	8007bec <_dtoa_r+0x7f4>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc37      	bgt.n	8007d7c <_dtoa_r+0x984>
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	dd34      	ble.n	8007d7c <_dtoa_r+0x984>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	9302      	str	r3, [sp, #8]
 8007d16:	9b02      	ldr	r3, [sp, #8]
 8007d18:	b96b      	cbnz	r3, 8007d36 <_dtoa_r+0x93e>
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 face 	bl	80082c0 <__multadd>
 8007d24:	4601      	mov	r1, r0
 8007d26:	4606      	mov	r6, r0
 8007d28:	ee18 0a10 	vmov	r0, s16
 8007d2c:	f000 fce8 	bl	8008700 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f73f adbb 	bgt.w	80078ac <_dtoa_r+0x4b4>
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	9d01      	ldr	r5, [sp, #4]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	4631      	mov	r1, r6
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 fa99 	bl	800827c <_Bfree>
 8007d4a:	2f00      	cmp	r7, #0
 8007d4c:	f43f aea4 	beq.w	8007a98 <_dtoa_r+0x6a0>
 8007d50:	f1b8 0f00 	cmp.w	r8, #0
 8007d54:	d005      	beq.n	8007d62 <_dtoa_r+0x96a>
 8007d56:	45b8      	cmp	r8, r7
 8007d58:	d003      	beq.n	8007d62 <_dtoa_r+0x96a>
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fa8d 	bl	800827c <_Bfree>
 8007d62:	4639      	mov	r1, r7
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 fa89 	bl	800827c <_Bfree>
 8007d6a:	e695      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	4637      	mov	r7, r6
 8007d70:	e7e1      	b.n	8007d36 <_dtoa_r+0x93e>
 8007d72:	9700      	str	r7, [sp, #0]
 8007d74:	4637      	mov	r7, r6
 8007d76:	e599      	b.n	80078ac <_dtoa_r+0x4b4>
 8007d78:	40240000 	.word	0x40240000
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80ca 	beq.w	8007f18 <_dtoa_r+0xb20>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	dd05      	ble.n	8007d98 <_dtoa_r+0x9a0>
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fc45 	bl	8008620 <__lshift>
 8007d96:	4607      	mov	r7, r0
 8007d98:	f1b8 0f00 	cmp.w	r8, #0
 8007d9c:	d05b      	beq.n	8007e56 <_dtoa_r+0xa5e>
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fa2b 	bl	80081fc <_Balloc>
 8007da6:	4605      	mov	r5, r0
 8007da8:	b928      	cbnz	r0, 8007db6 <_dtoa_r+0x9be>
 8007daa:	4b87      	ldr	r3, [pc, #540]	; (8007fc8 <_dtoa_r+0xbd0>)
 8007dac:	4602      	mov	r2, r0
 8007dae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007db2:	f7ff bb3b 	b.w	800742c <_dtoa_r+0x34>
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	3202      	adds	r2, #2
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	f107 010c 	add.w	r1, r7, #12
 8007dc0:	300c      	adds	r0, #12
 8007dc2:	f000 fa0d 	bl	80081e0 <memcpy>
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fc28 	bl	8008620 <__lshift>
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	f103 0901 	add.w	r9, r3, #1
 8007dd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	f00a 0301 	and.w	r3, sl, #1
 8007de2:	46b8      	mov	r8, r7
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	4607      	mov	r7, r0
 8007de8:	4631      	mov	r1, r6
 8007dea:	ee18 0a10 	vmov	r0, s16
 8007dee:	f7ff fa75 	bl	80072dc <quorem>
 8007df2:	4641      	mov	r1, r8
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dfa:	ee18 0a10 	vmov	r0, s16
 8007dfe:	f000 fc7f 	bl	8008700 <__mcmp>
 8007e02:	463a      	mov	r2, r7
 8007e04:	9003      	str	r0, [sp, #12]
 8007e06:	4631      	mov	r1, r6
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fc95 	bl	8008738 <__mdiff>
 8007e0e:	68c2      	ldr	r2, [r0, #12]
 8007e10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e14:	4605      	mov	r5, r0
 8007e16:	bb02      	cbnz	r2, 8007e5a <_dtoa_r+0xa62>
 8007e18:	4601      	mov	r1, r0
 8007e1a:	ee18 0a10 	vmov	r0, s16
 8007e1e:	f000 fc6f 	bl	8008700 <__mcmp>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4629      	mov	r1, r5
 8007e26:	4620      	mov	r0, r4
 8007e28:	9207      	str	r2, [sp, #28]
 8007e2a:	f000 fa27 	bl	800827c <_Bfree>
 8007e2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e32:	ea43 0102 	orr.w	r1, r3, r2
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	464d      	mov	r5, r9
 8007e3c:	d10f      	bne.n	8007e5e <_dtoa_r+0xa66>
 8007e3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e42:	d02a      	beq.n	8007e9a <_dtoa_r+0xaa2>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd02      	ble.n	8007e50 <_dtoa_r+0xa58>
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e50:	f88b a000 	strb.w	sl, [fp]
 8007e54:	e775      	b.n	8007d42 <_dtoa_r+0x94a>
 8007e56:	4638      	mov	r0, r7
 8007e58:	e7ba      	b.n	8007dd0 <_dtoa_r+0x9d8>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	e7e2      	b.n	8007e24 <_dtoa_r+0xa2c>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db04      	blt.n	8007e6e <_dtoa_r+0xa76>
 8007e64:	9906      	ldr	r1, [sp, #24]
 8007e66:	430b      	orrs	r3, r1
 8007e68:	9904      	ldr	r1, [sp, #16]
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	d122      	bne.n	8007eb4 <_dtoa_r+0xabc>
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	ddee      	ble.n	8007e50 <_dtoa_r+0xa58>
 8007e72:	ee18 1a10 	vmov	r1, s16
 8007e76:	2201      	movs	r2, #1
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fbd1 	bl	8008620 <__lshift>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	ee08 0a10 	vmov	s16, r0
 8007e84:	f000 fc3c 	bl	8008700 <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dc03      	bgt.n	8007e94 <_dtoa_r+0xa9c>
 8007e8c:	d1e0      	bne.n	8007e50 <_dtoa_r+0xa58>
 8007e8e:	f01a 0f01 	tst.w	sl, #1
 8007e92:	d0dd      	beq.n	8007e50 <_dtoa_r+0xa58>
 8007e94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e98:	d1d7      	bne.n	8007e4a <_dtoa_r+0xa52>
 8007e9a:	2339      	movs	r3, #57	; 0x39
 8007e9c:	f88b 3000 	strb.w	r3, [fp]
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	461d      	mov	r5, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eaa:	2a39      	cmp	r2, #57	; 0x39
 8007eac:	d071      	beq.n	8007f92 <_dtoa_r+0xb9a>
 8007eae:	3201      	adds	r2, #1
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e746      	b.n	8007d42 <_dtoa_r+0x94a>
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	dd07      	ble.n	8007ec8 <_dtoa_r+0xad0>
 8007eb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ebc:	d0ed      	beq.n	8007e9a <_dtoa_r+0xaa2>
 8007ebe:	f10a 0301 	add.w	r3, sl, #1
 8007ec2:	f88b 3000 	strb.w	r3, [fp]
 8007ec6:	e73c      	b.n	8007d42 <_dtoa_r+0x94a>
 8007ec8:	9b05      	ldr	r3, [sp, #20]
 8007eca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ece:	4599      	cmp	r9, r3
 8007ed0:	d047      	beq.n	8007f62 <_dtoa_r+0xb6a>
 8007ed2:	ee18 1a10 	vmov	r1, s16
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f9f0 	bl	80082c0 <__multadd>
 8007ee0:	45b8      	cmp	r8, r7
 8007ee2:	ee08 0a10 	vmov	s16, r0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	f04f 020a 	mov.w	r2, #10
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	d106      	bne.n	8007f02 <_dtoa_r+0xb0a>
 8007ef4:	f000 f9e4 	bl	80082c0 <__multadd>
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4607      	mov	r7, r0
 8007efc:	f109 0901 	add.w	r9, r9, #1
 8007f00:	e772      	b.n	8007de8 <_dtoa_r+0x9f0>
 8007f02:	f000 f9dd 	bl	80082c0 <__multadd>
 8007f06:	4639      	mov	r1, r7
 8007f08:	4680      	mov	r8, r0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f9d6 	bl	80082c0 <__multadd>
 8007f14:	4607      	mov	r7, r0
 8007f16:	e7f1      	b.n	8007efc <_dtoa_r+0xb04>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	9d01      	ldr	r5, [sp, #4]
 8007f1e:	ee18 0a10 	vmov	r0, s16
 8007f22:	4631      	mov	r1, r6
 8007f24:	f7ff f9da 	bl	80072dc <quorem>
 8007f28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007f32:	1aea      	subs	r2, r5, r3
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	dd09      	ble.n	8007f4e <_dtoa_r+0xb56>
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	2300      	movs	r3, #0
 8007f40:	220a      	movs	r2, #10
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f9bc 	bl	80082c0 <__multadd>
 8007f48:	ee08 0a10 	vmov	s16, r0
 8007f4c:	e7e7      	b.n	8007f1e <_dtoa_r+0xb26>
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfc8      	it	gt
 8007f54:	461d      	movgt	r5, r3
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	bfd8      	it	le
 8007f5a:	2501      	movle	r5, #1
 8007f5c:	441d      	add	r5, r3
 8007f5e:	f04f 0800 	mov.w	r8, #0
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	2201      	movs	r2, #1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fb59 	bl	8008620 <__lshift>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	ee08 0a10 	vmov	s16, r0
 8007f74:	f000 fbc4 	bl	8008700 <__mcmp>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	dc91      	bgt.n	8007ea0 <_dtoa_r+0xaa8>
 8007f7c:	d102      	bne.n	8007f84 <_dtoa_r+0xb8c>
 8007f7e:	f01a 0f01 	tst.w	sl, #1
 8007f82:	d18d      	bne.n	8007ea0 <_dtoa_r+0xaa8>
 8007f84:	462b      	mov	r3, r5
 8007f86:	461d      	mov	r5, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a30      	cmp	r2, #48	; 0x30
 8007f8e:	d0fa      	beq.n	8007f86 <_dtoa_r+0xb8e>
 8007f90:	e6d7      	b.n	8007d42 <_dtoa_r+0x94a>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d184      	bne.n	8007ea2 <_dtoa_r+0xaaa>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2331      	movs	r3, #49	; 0x31
 8007fa0:	7013      	strb	r3, [r2, #0]
 8007fa2:	e6ce      	b.n	8007d42 <_dtoa_r+0x94a>
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <_dtoa_r+0xbd4>)
 8007fa6:	f7ff ba95 	b.w	80074d4 <_dtoa_r+0xdc>
 8007faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f aa6e 	bne.w	800748e <_dtoa_r+0x96>
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <_dtoa_r+0xbd8>)
 8007fb4:	f7ff ba8e 	b.w	80074d4 <_dtoa_r+0xdc>
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dcae      	bgt.n	8007f1c <_dtoa_r+0xb24>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	f73f aea8 	bgt.w	8007d16 <_dtoa_r+0x91e>
 8007fc6:	e7a9      	b.n	8007f1c <_dtoa_r+0xb24>
 8007fc8:	0801cc47 	.word	0x0801cc47
 8007fcc:	0801cba4 	.word	0x0801cba4
 8007fd0:	0801cbc8 	.word	0x0801cbc8

08007fd4 <std>:
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	4604      	mov	r4, r0
 8007fda:	e9c0 3300 	strd	r3, r3, [r0]
 8007fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fe2:	6083      	str	r3, [r0, #8]
 8007fe4:	8181      	strh	r1, [r0, #12]
 8007fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe8:	81c2      	strh	r2, [r0, #14]
 8007fea:	6183      	str	r3, [r0, #24]
 8007fec:	4619      	mov	r1, r3
 8007fee:	2208      	movs	r2, #8
 8007ff0:	305c      	adds	r0, #92	; 0x5c
 8007ff2:	f7fe fce9 	bl	80069c8 <memset>
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x38>)
 8007ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <std+0x3c>)
 8007ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <std+0x40>)
 8008000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <std+0x44>)
 8008004:	6224      	str	r4, [r4, #32]
 8008006:	6323      	str	r3, [r4, #48]	; 0x30
 8008008:	bd10      	pop	{r4, pc}
 800800a:	bf00      	nop
 800800c:	08008dc5 	.word	0x08008dc5
 8008010:	08008de7 	.word	0x08008de7
 8008014:	08008e1f 	.word	0x08008e1f
 8008018:	08008e43 	.word	0x08008e43

0800801c <_cleanup_r>:
 800801c:	4901      	ldr	r1, [pc, #4]	; (8008024 <_cleanup_r+0x8>)
 800801e:	f000 b8af 	b.w	8008180 <_fwalk_reent>
 8008022:	bf00      	nop
 8008024:	08009159 	.word	0x08009159

08008028 <__sfmoreglue>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	2268      	movs	r2, #104	; 0x68
 800802c:	1e4d      	subs	r5, r1, #1
 800802e:	4355      	muls	r5, r2
 8008030:	460e      	mov	r6, r1
 8008032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008036:	f000 fce7 	bl	8008a08 <_malloc_r>
 800803a:	4604      	mov	r4, r0
 800803c:	b140      	cbz	r0, 8008050 <__sfmoreglue+0x28>
 800803e:	2100      	movs	r1, #0
 8008040:	e9c0 1600 	strd	r1, r6, [r0]
 8008044:	300c      	adds	r0, #12
 8008046:	60a0      	str	r0, [r4, #8]
 8008048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800804c:	f7fe fcbc 	bl	80069c8 <memset>
 8008050:	4620      	mov	r0, r4
 8008052:	bd70      	pop	{r4, r5, r6, pc}

08008054 <__sfp_lock_acquire>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sfp_lock_acquire+0x8>)
 8008056:	f000 b8b8 	b.w	80081ca <__retarget_lock_acquire_recursive>
 800805a:	bf00      	nop
 800805c:	200064d1 	.word	0x200064d1

08008060 <__sfp_lock_release>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sfp_lock_release+0x8>)
 8008062:	f000 b8b3 	b.w	80081cc <__retarget_lock_release_recursive>
 8008066:	bf00      	nop
 8008068:	200064d1 	.word	0x200064d1

0800806c <__sinit_lock_acquire>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sinit_lock_acquire+0x8>)
 800806e:	f000 b8ac 	b.w	80081ca <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	200064d2 	.word	0x200064d2

08008078 <__sinit_lock_release>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__sinit_lock_release+0x8>)
 800807a:	f000 b8a7 	b.w	80081cc <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	200064d2 	.word	0x200064d2

08008084 <__sinit>:
 8008084:	b510      	push	{r4, lr}
 8008086:	4604      	mov	r4, r0
 8008088:	f7ff fff0 	bl	800806c <__sinit_lock_acquire>
 800808c:	69a3      	ldr	r3, [r4, #24]
 800808e:	b11b      	cbz	r3, 8008098 <__sinit+0x14>
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f7ff bff0 	b.w	8008078 <__sinit_lock_release>
 8008098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800809c:	6523      	str	r3, [r4, #80]	; 0x50
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <__sinit+0x68>)
 80080a0:	4a13      	ldr	r2, [pc, #76]	; (80080f0 <__sinit+0x6c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080a6:	42a3      	cmp	r3, r4
 80080a8:	bf04      	itt	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	61a3      	streq	r3, [r4, #24]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f820 	bl	80080f4 <__sfp>
 80080b4:	6060      	str	r0, [r4, #4]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f81c 	bl	80080f4 <__sfp>
 80080bc:	60a0      	str	r0, [r4, #8]
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f818 	bl	80080f4 <__sfp>
 80080c4:	2200      	movs	r2, #0
 80080c6:	60e0      	str	r0, [r4, #12]
 80080c8:	2104      	movs	r1, #4
 80080ca:	6860      	ldr	r0, [r4, #4]
 80080cc:	f7ff ff82 	bl	8007fd4 <std>
 80080d0:	68a0      	ldr	r0, [r4, #8]
 80080d2:	2201      	movs	r2, #1
 80080d4:	2109      	movs	r1, #9
 80080d6:	f7ff ff7d 	bl	8007fd4 <std>
 80080da:	68e0      	ldr	r0, [r4, #12]
 80080dc:	2202      	movs	r2, #2
 80080de:	2112      	movs	r1, #18
 80080e0:	f7ff ff78 	bl	8007fd4 <std>
 80080e4:	2301      	movs	r3, #1
 80080e6:	61a3      	str	r3, [r4, #24]
 80080e8:	e7d2      	b.n	8008090 <__sinit+0xc>
 80080ea:	bf00      	nop
 80080ec:	0801cb90 	.word	0x0801cb90
 80080f0:	0800801d 	.word	0x0800801d

080080f4 <__sfp>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	4607      	mov	r7, r0
 80080f8:	f7ff ffac 	bl	8008054 <__sfp_lock_acquire>
 80080fc:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <__sfp+0x84>)
 80080fe:	681e      	ldr	r6, [r3, #0]
 8008100:	69b3      	ldr	r3, [r6, #24]
 8008102:	b913      	cbnz	r3, 800810a <__sfp+0x16>
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff ffbd 	bl	8008084 <__sinit>
 800810a:	3648      	adds	r6, #72	; 0x48
 800810c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008110:	3b01      	subs	r3, #1
 8008112:	d503      	bpl.n	800811c <__sfp+0x28>
 8008114:	6833      	ldr	r3, [r6, #0]
 8008116:	b30b      	cbz	r3, 800815c <__sfp+0x68>
 8008118:	6836      	ldr	r6, [r6, #0]
 800811a:	e7f7      	b.n	800810c <__sfp+0x18>
 800811c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008120:	b9d5      	cbnz	r5, 8008158 <__sfp+0x64>
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <__sfp+0x88>)
 8008124:	60e3      	str	r3, [r4, #12]
 8008126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800812a:	6665      	str	r5, [r4, #100]	; 0x64
 800812c:	f000 f84c 	bl	80081c8 <__retarget_lock_init_recursive>
 8008130:	f7ff ff96 	bl	8008060 <__sfp_lock_release>
 8008134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	61a5      	str	r5, [r4, #24]
 8008140:	2208      	movs	r2, #8
 8008142:	4629      	mov	r1, r5
 8008144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008148:	f7fe fc3e 	bl	80069c8 <memset>
 800814c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008154:	4620      	mov	r0, r4
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008158:	3468      	adds	r4, #104	; 0x68
 800815a:	e7d9      	b.n	8008110 <__sfp+0x1c>
 800815c:	2104      	movs	r1, #4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff62 	bl	8008028 <__sfmoreglue>
 8008164:	4604      	mov	r4, r0
 8008166:	6030      	str	r0, [r6, #0]
 8008168:	2800      	cmp	r0, #0
 800816a:	d1d5      	bne.n	8008118 <__sfp+0x24>
 800816c:	f7ff ff78 	bl	8008060 <__sfp_lock_release>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	e7ee      	b.n	8008154 <__sfp+0x60>
 8008176:	bf00      	nop
 8008178:	0801cb90 	.word	0x0801cb90
 800817c:	ffff0001 	.word	0xffff0001

08008180 <_fwalk_reent>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4606      	mov	r6, r0
 8008186:	4688      	mov	r8, r1
 8008188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800818c:	2700      	movs	r7, #0
 800818e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008192:	f1b9 0901 	subs.w	r9, r9, #1
 8008196:	d505      	bpl.n	80081a4 <_fwalk_reent+0x24>
 8008198:	6824      	ldr	r4, [r4, #0]
 800819a:	2c00      	cmp	r4, #0
 800819c:	d1f7      	bne.n	800818e <_fwalk_reent+0xe>
 800819e:	4638      	mov	r0, r7
 80081a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a4:	89ab      	ldrh	r3, [r5, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d907      	bls.n	80081ba <_fwalk_reent+0x3a>
 80081aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ae:	3301      	adds	r3, #1
 80081b0:	d003      	beq.n	80081ba <_fwalk_reent+0x3a>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	47c0      	blx	r8
 80081b8:	4307      	orrs	r7, r0
 80081ba:	3568      	adds	r5, #104	; 0x68
 80081bc:	e7e9      	b.n	8008192 <_fwalk_reent+0x12>
	...

080081c0 <_localeconv_r>:
 80081c0:	4800      	ldr	r0, [pc, #0]	; (80081c4 <_localeconv_r+0x4>)
 80081c2:	4770      	bx	lr
 80081c4:	20000164 	.word	0x20000164

080081c8 <__retarget_lock_init_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_acquire_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__retarget_lock_release_recursive>:
 80081cc:	4770      	bx	lr
	...

080081d0 <malloc>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <malloc+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	f000 bc17 	b.w	8008a08 <_malloc_r>
 80081da:	bf00      	nop
 80081dc:	20000010 	.word	0x20000010

080081e0 <memcpy>:
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e8:	d100      	bne.n	80081ec <memcpy+0xc>
 80081ea:	4770      	bx	lr
 80081ec:	b510      	push	{r4, lr}
 80081ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d1f9      	bne.n	80081ee <memcpy+0xe>
 80081fa:	bd10      	pop	{r4, pc}

080081fc <_Balloc>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	b976      	cbnz	r6, 8008224 <_Balloc+0x28>
 8008206:	2010      	movs	r0, #16
 8008208:	f7ff ffe2 	bl	80081d0 <malloc>
 800820c:	4602      	mov	r2, r0
 800820e:	6260      	str	r0, [r4, #36]	; 0x24
 8008210:	b920      	cbnz	r0, 800821c <_Balloc+0x20>
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <_Balloc+0x78>)
 8008214:	4818      	ldr	r0, [pc, #96]	; (8008278 <_Balloc+0x7c>)
 8008216:	2166      	movs	r1, #102	; 0x66
 8008218:	f000 feea 	bl	8008ff0 <__assert_func>
 800821c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008220:	6006      	str	r6, [r0, #0]
 8008222:	60c6      	str	r6, [r0, #12]
 8008224:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008226:	68f3      	ldr	r3, [r6, #12]
 8008228:	b183      	cbz	r3, 800824c <_Balloc+0x50>
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008232:	b9b8      	cbnz	r0, 8008264 <_Balloc+0x68>
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f605 	lsl.w	r6, r1, r5
 800823a:	1d72      	adds	r2, r6, #5
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fb60 	bl	8008904 <_calloc_r>
 8008244:	b160      	cbz	r0, 8008260 <_Balloc+0x64>
 8008246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800824a:	e00e      	b.n	800826a <_Balloc+0x6e>
 800824c:	2221      	movs	r2, #33	; 0x21
 800824e:	2104      	movs	r1, #4
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb57 	bl	8008904 <_calloc_r>
 8008256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008258:	60f0      	str	r0, [r6, #12]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e4      	bne.n	800822a <_Balloc+0x2e>
 8008260:	2000      	movs	r0, #0
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800826a:	2300      	movs	r3, #0
 800826c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008270:	e7f7      	b.n	8008262 <_Balloc+0x66>
 8008272:	bf00      	nop
 8008274:	0801cbd5 	.word	0x0801cbd5
 8008278:	0801ccb8 	.word	0x0801ccb8

0800827c <_Bfree>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b976      	cbnz	r6, 80082a4 <_Bfree+0x28>
 8008286:	2010      	movs	r0, #16
 8008288:	f7ff ffa2 	bl	80081d0 <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	6268      	str	r0, [r5, #36]	; 0x24
 8008290:	b920      	cbnz	r0, 800829c <_Bfree+0x20>
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <_Bfree+0x3c>)
 8008294:	4809      	ldr	r0, [pc, #36]	; (80082bc <_Bfree+0x40>)
 8008296:	218a      	movs	r1, #138	; 0x8a
 8008298:	f000 feaa 	bl	8008ff0 <__assert_func>
 800829c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a0:	6006      	str	r6, [r0, #0]
 80082a2:	60c6      	str	r6, [r0, #12]
 80082a4:	b13c      	cbz	r4, 80082b6 <_Bfree+0x3a>
 80082a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	0801cbd5 	.word	0x0801cbd5
 80082bc:	0801ccb8 	.word	0x0801ccb8

080082c0 <__multadd>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	690d      	ldr	r5, [r1, #16]
 80082c6:	4607      	mov	r7, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	461e      	mov	r6, r3
 80082cc:	f101 0c14 	add.w	ip, r1, #20
 80082d0:	2000      	movs	r0, #0
 80082d2:	f8dc 3000 	ldr.w	r3, [ip]
 80082d6:	b299      	uxth	r1, r3
 80082d8:	fb02 6101 	mla	r1, r2, r1, r6
 80082dc:	0c1e      	lsrs	r6, r3, #16
 80082de:	0c0b      	lsrs	r3, r1, #16
 80082e0:	fb02 3306 	mla	r3, r2, r6, r3
 80082e4:	b289      	uxth	r1, r1
 80082e6:	3001      	adds	r0, #1
 80082e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082ec:	4285      	cmp	r5, r0
 80082ee:	f84c 1b04 	str.w	r1, [ip], #4
 80082f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082f6:	dcec      	bgt.n	80082d2 <__multadd+0x12>
 80082f8:	b30e      	cbz	r6, 800833e <__multadd+0x7e>
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc19      	bgt.n	8008334 <__multadd+0x74>
 8008300:	6861      	ldr	r1, [r4, #4]
 8008302:	4638      	mov	r0, r7
 8008304:	3101      	adds	r1, #1
 8008306:	f7ff ff79 	bl	80081fc <_Balloc>
 800830a:	4680      	mov	r8, r0
 800830c:	b928      	cbnz	r0, 800831a <__multadd+0x5a>
 800830e:	4602      	mov	r2, r0
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <__multadd+0x84>)
 8008312:	480d      	ldr	r0, [pc, #52]	; (8008348 <__multadd+0x88>)
 8008314:	21b5      	movs	r1, #181	; 0xb5
 8008316:	f000 fe6b 	bl	8008ff0 <__assert_func>
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	3202      	adds	r2, #2
 800831e:	f104 010c 	add.w	r1, r4, #12
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	300c      	adds	r0, #12
 8008326:	f7ff ff5b 	bl	80081e0 <memcpy>
 800832a:	4621      	mov	r1, r4
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <_Bfree>
 8008332:	4644      	mov	r4, r8
 8008334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008338:	3501      	adds	r5, #1
 800833a:	615e      	str	r6, [r3, #20]
 800833c:	6125      	str	r5, [r4, #16]
 800833e:	4620      	mov	r0, r4
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	0801cc47 	.word	0x0801cc47
 8008348:	0801ccb8 	.word	0x0801ccb8

0800834c <__hi0bits>:
 800834c:	0c03      	lsrs	r3, r0, #16
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	b9d3      	cbnz	r3, 8008388 <__hi0bits+0x3c>
 8008352:	0400      	lsls	r0, r0, #16
 8008354:	2310      	movs	r3, #16
 8008356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800835a:	bf04      	itt	eq
 800835c:	0200      	lsleq	r0, r0, #8
 800835e:	3308      	addeq	r3, #8
 8008360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008364:	bf04      	itt	eq
 8008366:	0100      	lsleq	r0, r0, #4
 8008368:	3304      	addeq	r3, #4
 800836a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800836e:	bf04      	itt	eq
 8008370:	0080      	lsleq	r0, r0, #2
 8008372:	3302      	addeq	r3, #2
 8008374:	2800      	cmp	r0, #0
 8008376:	db05      	blt.n	8008384 <__hi0bits+0x38>
 8008378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800837c:	f103 0301 	add.w	r3, r3, #1
 8008380:	bf08      	it	eq
 8008382:	2320      	moveq	r3, #32
 8008384:	4618      	mov	r0, r3
 8008386:	4770      	bx	lr
 8008388:	2300      	movs	r3, #0
 800838a:	e7e4      	b.n	8008356 <__hi0bits+0xa>

0800838c <__lo0bits>:
 800838c:	6803      	ldr	r3, [r0, #0]
 800838e:	f013 0207 	ands.w	r2, r3, #7
 8008392:	4601      	mov	r1, r0
 8008394:	d00b      	beq.n	80083ae <__lo0bits+0x22>
 8008396:	07da      	lsls	r2, r3, #31
 8008398:	d423      	bmi.n	80083e2 <__lo0bits+0x56>
 800839a:	0798      	lsls	r0, r3, #30
 800839c:	bf49      	itett	mi
 800839e:	085b      	lsrmi	r3, r3, #1
 80083a0:	089b      	lsrpl	r3, r3, #2
 80083a2:	2001      	movmi	r0, #1
 80083a4:	600b      	strmi	r3, [r1, #0]
 80083a6:	bf5c      	itt	pl
 80083a8:	600b      	strpl	r3, [r1, #0]
 80083aa:	2002      	movpl	r0, #2
 80083ac:	4770      	bx	lr
 80083ae:	b298      	uxth	r0, r3
 80083b0:	b9a8      	cbnz	r0, 80083de <__lo0bits+0x52>
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	2010      	movs	r0, #16
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	b90a      	cbnz	r2, 80083be <__lo0bits+0x32>
 80083ba:	3008      	adds	r0, #8
 80083bc:	0a1b      	lsrs	r3, r3, #8
 80083be:	071a      	lsls	r2, r3, #28
 80083c0:	bf04      	itt	eq
 80083c2:	091b      	lsreq	r3, r3, #4
 80083c4:	3004      	addeq	r0, #4
 80083c6:	079a      	lsls	r2, r3, #30
 80083c8:	bf04      	itt	eq
 80083ca:	089b      	lsreq	r3, r3, #2
 80083cc:	3002      	addeq	r0, #2
 80083ce:	07da      	lsls	r2, r3, #31
 80083d0:	d403      	bmi.n	80083da <__lo0bits+0x4e>
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	f100 0001 	add.w	r0, r0, #1
 80083d8:	d005      	beq.n	80083e6 <__lo0bits+0x5a>
 80083da:	600b      	str	r3, [r1, #0]
 80083dc:	4770      	bx	lr
 80083de:	4610      	mov	r0, r2
 80083e0:	e7e9      	b.n	80083b6 <__lo0bits+0x2a>
 80083e2:	2000      	movs	r0, #0
 80083e4:	4770      	bx	lr
 80083e6:	2020      	movs	r0, #32
 80083e8:	4770      	bx	lr
	...

080083ec <__i2b>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	2101      	movs	r1, #1
 80083f2:	f7ff ff03 	bl	80081fc <_Balloc>
 80083f6:	4602      	mov	r2, r0
 80083f8:	b928      	cbnz	r0, 8008406 <__i2b+0x1a>
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <__i2b+0x24>)
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <__i2b+0x28>)
 80083fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008402:	f000 fdf5 	bl	8008ff0 <__assert_func>
 8008406:	2301      	movs	r3, #1
 8008408:	6144      	str	r4, [r0, #20]
 800840a:	6103      	str	r3, [r0, #16]
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	0801cc47 	.word	0x0801cc47
 8008414:	0801ccb8 	.word	0x0801ccb8

08008418 <__multiply>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4691      	mov	r9, r2
 800841e:	690a      	ldr	r2, [r1, #16]
 8008420:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	bfb8      	it	lt
 8008428:	460b      	movlt	r3, r1
 800842a:	460c      	mov	r4, r1
 800842c:	bfbc      	itt	lt
 800842e:	464c      	movlt	r4, r9
 8008430:	4699      	movlt	r9, r3
 8008432:	6927      	ldr	r7, [r4, #16]
 8008434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	6861      	ldr	r1, [r4, #4]
 800843c:	eb07 060a 	add.w	r6, r7, sl
 8008440:	42b3      	cmp	r3, r6
 8008442:	b085      	sub	sp, #20
 8008444:	bfb8      	it	lt
 8008446:	3101      	addlt	r1, #1
 8008448:	f7ff fed8 	bl	80081fc <_Balloc>
 800844c:	b930      	cbnz	r0, 800845c <__multiply+0x44>
 800844e:	4602      	mov	r2, r0
 8008450:	4b44      	ldr	r3, [pc, #272]	; (8008564 <__multiply+0x14c>)
 8008452:	4845      	ldr	r0, [pc, #276]	; (8008568 <__multiply+0x150>)
 8008454:	f240 115d 	movw	r1, #349	; 0x15d
 8008458:	f000 fdca 	bl	8008ff0 <__assert_func>
 800845c:	f100 0514 	add.w	r5, r0, #20
 8008460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008464:	462b      	mov	r3, r5
 8008466:	2200      	movs	r2, #0
 8008468:	4543      	cmp	r3, r8
 800846a:	d321      	bcc.n	80084b0 <__multiply+0x98>
 800846c:	f104 0314 	add.w	r3, r4, #20
 8008470:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008474:	f109 0314 	add.w	r3, r9, #20
 8008478:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800847c:	9202      	str	r2, [sp, #8]
 800847e:	1b3a      	subs	r2, r7, r4
 8008480:	3a15      	subs	r2, #21
 8008482:	f022 0203 	bic.w	r2, r2, #3
 8008486:	3204      	adds	r2, #4
 8008488:	f104 0115 	add.w	r1, r4, #21
 800848c:	428f      	cmp	r7, r1
 800848e:	bf38      	it	cc
 8008490:	2204      	movcc	r2, #4
 8008492:	9201      	str	r2, [sp, #4]
 8008494:	9a02      	ldr	r2, [sp, #8]
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d80c      	bhi.n	80084b6 <__multiply+0x9e>
 800849c:	2e00      	cmp	r6, #0
 800849e:	dd03      	ble.n	80084a8 <__multiply+0x90>
 80084a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05a      	beq.n	800855e <__multiply+0x146>
 80084a8:	6106      	str	r6, [r0, #16]
 80084aa:	b005      	add	sp, #20
 80084ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b0:	f843 2b04 	str.w	r2, [r3], #4
 80084b4:	e7d8      	b.n	8008468 <__multiply+0x50>
 80084b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80084ba:	f1ba 0f00 	cmp.w	sl, #0
 80084be:	d024      	beq.n	800850a <__multiply+0xf2>
 80084c0:	f104 0e14 	add.w	lr, r4, #20
 80084c4:	46a9      	mov	r9, r5
 80084c6:	f04f 0c00 	mov.w	ip, #0
 80084ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084ce:	f8d9 1000 	ldr.w	r1, [r9]
 80084d2:	fa1f fb82 	uxth.w	fp, r2
 80084d6:	b289      	uxth	r1, r1
 80084d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80084dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084e0:	f8d9 2000 	ldr.w	r2, [r9]
 80084e4:	4461      	add	r1, ip
 80084e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084f2:	b289      	uxth	r1, r1
 80084f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084f8:	4577      	cmp	r7, lr
 80084fa:	f849 1b04 	str.w	r1, [r9], #4
 80084fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008502:	d8e2      	bhi.n	80084ca <__multiply+0xb2>
 8008504:	9a01      	ldr	r2, [sp, #4]
 8008506:	f845 c002 	str.w	ip, [r5, r2]
 800850a:	9a03      	ldr	r2, [sp, #12]
 800850c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008510:	3304      	adds	r3, #4
 8008512:	f1b9 0f00 	cmp.w	r9, #0
 8008516:	d020      	beq.n	800855a <__multiply+0x142>
 8008518:	6829      	ldr	r1, [r5, #0]
 800851a:	f104 0c14 	add.w	ip, r4, #20
 800851e:	46ae      	mov	lr, r5
 8008520:	f04f 0a00 	mov.w	sl, #0
 8008524:	f8bc b000 	ldrh.w	fp, [ip]
 8008528:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800852c:	fb09 220b 	mla	r2, r9, fp, r2
 8008530:	4492      	add	sl, r2
 8008532:	b289      	uxth	r1, r1
 8008534:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008538:	f84e 1b04 	str.w	r1, [lr], #4
 800853c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008540:	f8be 1000 	ldrh.w	r1, [lr]
 8008544:	0c12      	lsrs	r2, r2, #16
 8008546:	fb09 1102 	mla	r1, r9, r2, r1
 800854a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800854e:	4567      	cmp	r7, ip
 8008550:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008554:	d8e6      	bhi.n	8008524 <__multiply+0x10c>
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	50a9      	str	r1, [r5, r2]
 800855a:	3504      	adds	r5, #4
 800855c:	e79a      	b.n	8008494 <__multiply+0x7c>
 800855e:	3e01      	subs	r6, #1
 8008560:	e79c      	b.n	800849c <__multiply+0x84>
 8008562:	bf00      	nop
 8008564:	0801cc47 	.word	0x0801cc47
 8008568:	0801ccb8 	.word	0x0801ccb8

0800856c <__pow5mult>:
 800856c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008570:	4615      	mov	r5, r2
 8008572:	f012 0203 	ands.w	r2, r2, #3
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	d007      	beq.n	800858c <__pow5mult+0x20>
 800857c:	4c25      	ldr	r4, [pc, #148]	; (8008614 <__pow5mult+0xa8>)
 800857e:	3a01      	subs	r2, #1
 8008580:	2300      	movs	r3, #0
 8008582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008586:	f7ff fe9b 	bl	80082c0 <__multadd>
 800858a:	4607      	mov	r7, r0
 800858c:	10ad      	asrs	r5, r5, #2
 800858e:	d03d      	beq.n	800860c <__pow5mult+0xa0>
 8008590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008592:	b97c      	cbnz	r4, 80085b4 <__pow5mult+0x48>
 8008594:	2010      	movs	r0, #16
 8008596:	f7ff fe1b 	bl	80081d0 <malloc>
 800859a:	4602      	mov	r2, r0
 800859c:	6270      	str	r0, [r6, #36]	; 0x24
 800859e:	b928      	cbnz	r0, 80085ac <__pow5mult+0x40>
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <__pow5mult+0xac>)
 80085a2:	481e      	ldr	r0, [pc, #120]	; (800861c <__pow5mult+0xb0>)
 80085a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085a8:	f000 fd22 	bl	8008ff0 <__assert_func>
 80085ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085b0:	6004      	str	r4, [r0, #0]
 80085b2:	60c4      	str	r4, [r0, #12]
 80085b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085bc:	b94c      	cbnz	r4, 80085d2 <__pow5mult+0x66>
 80085be:	f240 2171 	movw	r1, #625	; 0x271
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7ff ff12 	bl	80083ec <__i2b>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ce:	4604      	mov	r4, r0
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	f04f 0900 	mov.w	r9, #0
 80085d6:	07eb      	lsls	r3, r5, #31
 80085d8:	d50a      	bpl.n	80085f0 <__pow5mult+0x84>
 80085da:	4639      	mov	r1, r7
 80085dc:	4622      	mov	r2, r4
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff ff1a 	bl	8008418 <__multiply>
 80085e4:	4639      	mov	r1, r7
 80085e6:	4680      	mov	r8, r0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff fe47 	bl	800827c <_Bfree>
 80085ee:	4647      	mov	r7, r8
 80085f0:	106d      	asrs	r5, r5, #1
 80085f2:	d00b      	beq.n	800860c <__pow5mult+0xa0>
 80085f4:	6820      	ldr	r0, [r4, #0]
 80085f6:	b938      	cbnz	r0, 8008608 <__pow5mult+0x9c>
 80085f8:	4622      	mov	r2, r4
 80085fa:	4621      	mov	r1, r4
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ff0b 	bl	8008418 <__multiply>
 8008602:	6020      	str	r0, [r4, #0]
 8008604:	f8c0 9000 	str.w	r9, [r0]
 8008608:	4604      	mov	r4, r0
 800860a:	e7e4      	b.n	80085d6 <__pow5mult+0x6a>
 800860c:	4638      	mov	r0, r7
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	bf00      	nop
 8008614:	0801ce08 	.word	0x0801ce08
 8008618:	0801cbd5 	.word	0x0801cbd5
 800861c:	0801ccb8 	.word	0x0801ccb8

08008620 <__lshift>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	6849      	ldr	r1, [r1, #4]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	4607      	mov	r7, r0
 8008632:	4691      	mov	r9, r2
 8008634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008638:	f108 0601 	add.w	r6, r8, #1
 800863c:	42b3      	cmp	r3, r6
 800863e:	db0b      	blt.n	8008658 <__lshift+0x38>
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff fddb 	bl	80081fc <_Balloc>
 8008646:	4605      	mov	r5, r0
 8008648:	b948      	cbnz	r0, 800865e <__lshift+0x3e>
 800864a:	4602      	mov	r2, r0
 800864c:	4b2a      	ldr	r3, [pc, #168]	; (80086f8 <__lshift+0xd8>)
 800864e:	482b      	ldr	r0, [pc, #172]	; (80086fc <__lshift+0xdc>)
 8008650:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008654:	f000 fccc 	bl	8008ff0 <__assert_func>
 8008658:	3101      	adds	r1, #1
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	e7ee      	b.n	800863c <__lshift+0x1c>
 800865e:	2300      	movs	r3, #0
 8008660:	f100 0114 	add.w	r1, r0, #20
 8008664:	f100 0210 	add.w	r2, r0, #16
 8008668:	4618      	mov	r0, r3
 800866a:	4553      	cmp	r3, sl
 800866c:	db37      	blt.n	80086de <__lshift+0xbe>
 800866e:	6920      	ldr	r0, [r4, #16]
 8008670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008674:	f104 0314 	add.w	r3, r4, #20
 8008678:	f019 091f 	ands.w	r9, r9, #31
 800867c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008680:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008684:	d02f      	beq.n	80086e6 <__lshift+0xc6>
 8008686:	f1c9 0e20 	rsb	lr, r9, #32
 800868a:	468a      	mov	sl, r1
 800868c:	f04f 0c00 	mov.w	ip, #0
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	fa02 f209 	lsl.w	r2, r2, r9
 8008696:	ea42 020c 	orr.w	r2, r2, ip
 800869a:	f84a 2b04 	str.w	r2, [sl], #4
 800869e:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a2:	4298      	cmp	r0, r3
 80086a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086a8:	d8f2      	bhi.n	8008690 <__lshift+0x70>
 80086aa:	1b03      	subs	r3, r0, r4
 80086ac:	3b15      	subs	r3, #21
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	3304      	adds	r3, #4
 80086b4:	f104 0215 	add.w	r2, r4, #21
 80086b8:	4290      	cmp	r0, r2
 80086ba:	bf38      	it	cc
 80086bc:	2304      	movcc	r3, #4
 80086be:	f841 c003 	str.w	ip, [r1, r3]
 80086c2:	f1bc 0f00 	cmp.w	ip, #0
 80086c6:	d001      	beq.n	80086cc <__lshift+0xac>
 80086c8:	f108 0602 	add.w	r6, r8, #2
 80086cc:	3e01      	subs	r6, #1
 80086ce:	4638      	mov	r0, r7
 80086d0:	612e      	str	r6, [r5, #16]
 80086d2:	4621      	mov	r1, r4
 80086d4:	f7ff fdd2 	bl	800827c <_Bfree>
 80086d8:	4628      	mov	r0, r5
 80086da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086de:	f842 0f04 	str.w	r0, [r2, #4]!
 80086e2:	3301      	adds	r3, #1
 80086e4:	e7c1      	b.n	800866a <__lshift+0x4a>
 80086e6:	3904      	subs	r1, #4
 80086e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80086f0:	4298      	cmp	r0, r3
 80086f2:	d8f9      	bhi.n	80086e8 <__lshift+0xc8>
 80086f4:	e7ea      	b.n	80086cc <__lshift+0xac>
 80086f6:	bf00      	nop
 80086f8:	0801cc47 	.word	0x0801cc47
 80086fc:	0801ccb8 	.word	0x0801ccb8

08008700 <__mcmp>:
 8008700:	b530      	push	{r4, r5, lr}
 8008702:	6902      	ldr	r2, [r0, #16]
 8008704:	690c      	ldr	r4, [r1, #16]
 8008706:	1b12      	subs	r2, r2, r4
 8008708:	d10e      	bne.n	8008728 <__mcmp+0x28>
 800870a:	f100 0314 	add.w	r3, r0, #20
 800870e:	3114      	adds	r1, #20
 8008710:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008714:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008718:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800871c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008720:	42a5      	cmp	r5, r4
 8008722:	d003      	beq.n	800872c <__mcmp+0x2c>
 8008724:	d305      	bcc.n	8008732 <__mcmp+0x32>
 8008726:	2201      	movs	r2, #1
 8008728:	4610      	mov	r0, r2
 800872a:	bd30      	pop	{r4, r5, pc}
 800872c:	4283      	cmp	r3, r0
 800872e:	d3f3      	bcc.n	8008718 <__mcmp+0x18>
 8008730:	e7fa      	b.n	8008728 <__mcmp+0x28>
 8008732:	f04f 32ff 	mov.w	r2, #4294967295
 8008736:	e7f7      	b.n	8008728 <__mcmp+0x28>

08008738 <__mdiff>:
 8008738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	4606      	mov	r6, r0
 8008740:	4611      	mov	r1, r2
 8008742:	4620      	mov	r0, r4
 8008744:	4690      	mov	r8, r2
 8008746:	f7ff ffdb 	bl	8008700 <__mcmp>
 800874a:	1e05      	subs	r5, r0, #0
 800874c:	d110      	bne.n	8008770 <__mdiff+0x38>
 800874e:	4629      	mov	r1, r5
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff fd53 	bl	80081fc <_Balloc>
 8008756:	b930      	cbnz	r0, 8008766 <__mdiff+0x2e>
 8008758:	4b3a      	ldr	r3, [pc, #232]	; (8008844 <__mdiff+0x10c>)
 800875a:	4602      	mov	r2, r0
 800875c:	f240 2132 	movw	r1, #562	; 0x232
 8008760:	4839      	ldr	r0, [pc, #228]	; (8008848 <__mdiff+0x110>)
 8008762:	f000 fc45 	bl	8008ff0 <__assert_func>
 8008766:	2301      	movs	r3, #1
 8008768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800876c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	bfa4      	itt	ge
 8008772:	4643      	movge	r3, r8
 8008774:	46a0      	movge	r8, r4
 8008776:	4630      	mov	r0, r6
 8008778:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800877c:	bfa6      	itte	ge
 800877e:	461c      	movge	r4, r3
 8008780:	2500      	movge	r5, #0
 8008782:	2501      	movlt	r5, #1
 8008784:	f7ff fd3a 	bl	80081fc <_Balloc>
 8008788:	b920      	cbnz	r0, 8008794 <__mdiff+0x5c>
 800878a:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <__mdiff+0x10c>)
 800878c:	4602      	mov	r2, r0
 800878e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008792:	e7e5      	b.n	8008760 <__mdiff+0x28>
 8008794:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008798:	6926      	ldr	r6, [r4, #16]
 800879a:	60c5      	str	r5, [r0, #12]
 800879c:	f104 0914 	add.w	r9, r4, #20
 80087a0:	f108 0514 	add.w	r5, r8, #20
 80087a4:	f100 0e14 	add.w	lr, r0, #20
 80087a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087b0:	f108 0210 	add.w	r2, r8, #16
 80087b4:	46f2      	mov	sl, lr
 80087b6:	2100      	movs	r1, #0
 80087b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80087bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087c0:	fa1f f883 	uxth.w	r8, r3
 80087c4:	fa11 f18b 	uxtah	r1, r1, fp
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	eba1 0808 	sub.w	r8, r1, r8
 80087ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087d6:	fa1f f888 	uxth.w	r8, r8
 80087da:	1419      	asrs	r1, r3, #16
 80087dc:	454e      	cmp	r6, r9
 80087de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087e2:	f84a 3b04 	str.w	r3, [sl], #4
 80087e6:	d8e7      	bhi.n	80087b8 <__mdiff+0x80>
 80087e8:	1b33      	subs	r3, r6, r4
 80087ea:	3b15      	subs	r3, #21
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	3304      	adds	r3, #4
 80087f2:	3415      	adds	r4, #21
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	bf38      	it	cc
 80087f8:	2304      	movcc	r3, #4
 80087fa:	441d      	add	r5, r3
 80087fc:	4473      	add	r3, lr
 80087fe:	469e      	mov	lr, r3
 8008800:	462e      	mov	r6, r5
 8008802:	4566      	cmp	r6, ip
 8008804:	d30e      	bcc.n	8008824 <__mdiff+0xec>
 8008806:	f10c 0203 	add.w	r2, ip, #3
 800880a:	1b52      	subs	r2, r2, r5
 800880c:	f022 0203 	bic.w	r2, r2, #3
 8008810:	3d03      	subs	r5, #3
 8008812:	45ac      	cmp	ip, r5
 8008814:	bf38      	it	cc
 8008816:	2200      	movcc	r2, #0
 8008818:	441a      	add	r2, r3
 800881a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800881e:	b17b      	cbz	r3, 8008840 <__mdiff+0x108>
 8008820:	6107      	str	r7, [r0, #16]
 8008822:	e7a3      	b.n	800876c <__mdiff+0x34>
 8008824:	f856 8b04 	ldr.w	r8, [r6], #4
 8008828:	fa11 f288 	uxtah	r2, r1, r8
 800882c:	1414      	asrs	r4, r2, #16
 800882e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008832:	b292      	uxth	r2, r2
 8008834:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008838:	f84e 2b04 	str.w	r2, [lr], #4
 800883c:	1421      	asrs	r1, r4, #16
 800883e:	e7e0      	b.n	8008802 <__mdiff+0xca>
 8008840:	3f01      	subs	r7, #1
 8008842:	e7ea      	b.n	800881a <__mdiff+0xe2>
 8008844:	0801cc47 	.word	0x0801cc47
 8008848:	0801ccb8 	.word	0x0801ccb8

0800884c <__d2b>:
 800884c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4689      	mov	r9, r1
 8008852:	2101      	movs	r1, #1
 8008854:	ec57 6b10 	vmov	r6, r7, d0
 8008858:	4690      	mov	r8, r2
 800885a:	f7ff fccf 	bl	80081fc <_Balloc>
 800885e:	4604      	mov	r4, r0
 8008860:	b930      	cbnz	r0, 8008870 <__d2b+0x24>
 8008862:	4602      	mov	r2, r0
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <__d2b+0xb0>)
 8008866:	4826      	ldr	r0, [pc, #152]	; (8008900 <__d2b+0xb4>)
 8008868:	f240 310a 	movw	r1, #778	; 0x30a
 800886c:	f000 fbc0 	bl	8008ff0 <__assert_func>
 8008870:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008874:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008878:	bb35      	cbnz	r5, 80088c8 <__d2b+0x7c>
 800887a:	2e00      	cmp	r6, #0
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	d028      	beq.n	80088d2 <__d2b+0x86>
 8008880:	4668      	mov	r0, sp
 8008882:	9600      	str	r6, [sp, #0]
 8008884:	f7ff fd82 	bl	800838c <__lo0bits>
 8008888:	9900      	ldr	r1, [sp, #0]
 800888a:	b300      	cbz	r0, 80088ce <__d2b+0x82>
 800888c:	9a01      	ldr	r2, [sp, #4]
 800888e:	f1c0 0320 	rsb	r3, r0, #32
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	430b      	orrs	r3, r1
 8008898:	40c2      	lsrs	r2, r0
 800889a:	6163      	str	r3, [r4, #20]
 800889c:	9201      	str	r2, [sp, #4]
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	61a3      	str	r3, [r4, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf14      	ite	ne
 80088a6:	2202      	movne	r2, #2
 80088a8:	2201      	moveq	r2, #1
 80088aa:	6122      	str	r2, [r4, #16]
 80088ac:	b1d5      	cbz	r5, 80088e4 <__d2b+0x98>
 80088ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088b2:	4405      	add	r5, r0
 80088b4:	f8c9 5000 	str.w	r5, [r9]
 80088b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088bc:	f8c8 0000 	str.w	r0, [r8]
 80088c0:	4620      	mov	r0, r4
 80088c2:	b003      	add	sp, #12
 80088c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088cc:	e7d5      	b.n	800887a <__d2b+0x2e>
 80088ce:	6161      	str	r1, [r4, #20]
 80088d0:	e7e5      	b.n	800889e <__d2b+0x52>
 80088d2:	a801      	add	r0, sp, #4
 80088d4:	f7ff fd5a 	bl	800838c <__lo0bits>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	6163      	str	r3, [r4, #20]
 80088dc:	2201      	movs	r2, #1
 80088de:	6122      	str	r2, [r4, #16]
 80088e0:	3020      	adds	r0, #32
 80088e2:	e7e3      	b.n	80088ac <__d2b+0x60>
 80088e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088ec:	f8c9 0000 	str.w	r0, [r9]
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f7ff fd2b 	bl	800834c <__hi0bits>
 80088f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088fa:	e7df      	b.n	80088bc <__d2b+0x70>
 80088fc:	0801cc47 	.word	0x0801cc47
 8008900:	0801ccb8 	.word	0x0801ccb8

08008904 <_calloc_r>:
 8008904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008906:	fba1 2402 	umull	r2, r4, r1, r2
 800890a:	b94c      	cbnz	r4, 8008920 <_calloc_r+0x1c>
 800890c:	4611      	mov	r1, r2
 800890e:	9201      	str	r2, [sp, #4]
 8008910:	f000 f87a 	bl	8008a08 <_malloc_r>
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	4605      	mov	r5, r0
 8008918:	b930      	cbnz	r0, 8008928 <_calloc_r+0x24>
 800891a:	4628      	mov	r0, r5
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	220c      	movs	r2, #12
 8008922:	6002      	str	r2, [r0, #0]
 8008924:	2500      	movs	r5, #0
 8008926:	e7f8      	b.n	800891a <_calloc_r+0x16>
 8008928:	4621      	mov	r1, r4
 800892a:	f7fe f84d 	bl	80069c8 <memset>
 800892e:	e7f4      	b.n	800891a <_calloc_r+0x16>

08008930 <_free_r>:
 8008930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008932:	2900      	cmp	r1, #0
 8008934:	d044      	beq.n	80089c0 <_free_r+0x90>
 8008936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893a:	9001      	str	r0, [sp, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f1a1 0404 	sub.w	r4, r1, #4
 8008942:	bfb8      	it	lt
 8008944:	18e4      	addlt	r4, r4, r3
 8008946:	f000 fcdf 	bl	8009308 <__malloc_lock>
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <_free_r+0x94>)
 800894c:	9801      	ldr	r0, [sp, #4]
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	b933      	cbnz	r3, 8008960 <_free_r+0x30>
 8008952:	6063      	str	r3, [r4, #4]
 8008954:	6014      	str	r4, [r2, #0]
 8008956:	b003      	add	sp, #12
 8008958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800895c:	f000 bcda 	b.w	8009314 <__malloc_unlock>
 8008960:	42a3      	cmp	r3, r4
 8008962:	d908      	bls.n	8008976 <_free_r+0x46>
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	1961      	adds	r1, r4, r5
 8008968:	428b      	cmp	r3, r1
 800896a:	bf01      	itttt	eq
 800896c:	6819      	ldreq	r1, [r3, #0]
 800896e:	685b      	ldreq	r3, [r3, #4]
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	e7ed      	b.n	8008952 <_free_r+0x22>
 8008976:	461a      	mov	r2, r3
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	b10b      	cbz	r3, 8008980 <_free_r+0x50>
 800897c:	42a3      	cmp	r3, r4
 800897e:	d9fa      	bls.n	8008976 <_free_r+0x46>
 8008980:	6811      	ldr	r1, [r2, #0]
 8008982:	1855      	adds	r5, r2, r1
 8008984:	42a5      	cmp	r5, r4
 8008986:	d10b      	bne.n	80089a0 <_free_r+0x70>
 8008988:	6824      	ldr	r4, [r4, #0]
 800898a:	4421      	add	r1, r4
 800898c:	1854      	adds	r4, r2, r1
 800898e:	42a3      	cmp	r3, r4
 8008990:	6011      	str	r1, [r2, #0]
 8008992:	d1e0      	bne.n	8008956 <_free_r+0x26>
 8008994:	681c      	ldr	r4, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	6053      	str	r3, [r2, #4]
 800899a:	4421      	add	r1, r4
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	e7da      	b.n	8008956 <_free_r+0x26>
 80089a0:	d902      	bls.n	80089a8 <_free_r+0x78>
 80089a2:	230c      	movs	r3, #12
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	e7d6      	b.n	8008956 <_free_r+0x26>
 80089a8:	6825      	ldr	r5, [r4, #0]
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf04      	itt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	6063      	str	r3, [r4, #4]
 80089b6:	bf04      	itt	eq
 80089b8:	1949      	addeq	r1, r1, r5
 80089ba:	6021      	streq	r1, [r4, #0]
 80089bc:	6054      	str	r4, [r2, #4]
 80089be:	e7ca      	b.n	8008956 <_free_r+0x26>
 80089c0:	b003      	add	sp, #12
 80089c2:	bd30      	pop	{r4, r5, pc}
 80089c4:	200064d4 	.word	0x200064d4

080089c8 <sbrk_aligned>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4e0e      	ldr	r6, [pc, #56]	; (8008a04 <sbrk_aligned+0x3c>)
 80089cc:	460c      	mov	r4, r1
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	4605      	mov	r5, r0
 80089d2:	b911      	cbnz	r1, 80089da <sbrk_aligned+0x12>
 80089d4:	f000 f9e6 	bl	8008da4 <_sbrk_r>
 80089d8:	6030      	str	r0, [r6, #0]
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 f9e1 	bl	8008da4 <_sbrk_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d00a      	beq.n	80089fc <sbrk_aligned+0x34>
 80089e6:	1cc4      	adds	r4, r0, #3
 80089e8:	f024 0403 	bic.w	r4, r4, #3
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d007      	beq.n	8008a00 <sbrk_aligned+0x38>
 80089f0:	1a21      	subs	r1, r4, r0
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 f9d6 	bl	8008da4 <_sbrk_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d101      	bne.n	8008a00 <sbrk_aligned+0x38>
 80089fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008a00:	4620      	mov	r0, r4
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	200064d8 	.word	0x200064d8

08008a08 <_malloc_r>:
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	1ccd      	adds	r5, r1, #3
 8008a0e:	f025 0503 	bic.w	r5, r5, #3
 8008a12:	3508      	adds	r5, #8
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	bf38      	it	cc
 8008a18:	250c      	movcc	r5, #12
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	db01      	blt.n	8008a24 <_malloc_r+0x1c>
 8008a20:	42a9      	cmp	r1, r5
 8008a22:	d905      	bls.n	8008a30 <_malloc_r+0x28>
 8008a24:	230c      	movs	r3, #12
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	2600      	movs	r6, #0
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4e2e      	ldr	r6, [pc, #184]	; (8008aec <_malloc_r+0xe4>)
 8008a32:	f000 fc69 	bl	8009308 <__malloc_lock>
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	461c      	mov	r4, r3
 8008a3a:	bb34      	cbnz	r4, 8008a8a <_malloc_r+0x82>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f7ff ffc2 	bl	80089c8 <sbrk_aligned>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	4604      	mov	r4, r0
 8008a48:	d14d      	bne.n	8008ae6 <_malloc_r+0xde>
 8008a4a:	6834      	ldr	r4, [r6, #0]
 8008a4c:	4626      	mov	r6, r4
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d140      	bne.n	8008ad4 <_malloc_r+0xcc>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4631      	mov	r1, r6
 8008a56:	4638      	mov	r0, r7
 8008a58:	eb04 0803 	add.w	r8, r4, r3
 8008a5c:	f000 f9a2 	bl	8008da4 <_sbrk_r>
 8008a60:	4580      	cmp	r8, r0
 8008a62:	d13a      	bne.n	8008ada <_malloc_r+0xd2>
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	3503      	adds	r5, #3
 8008a68:	1a6d      	subs	r5, r5, r1
 8008a6a:	f025 0503 	bic.w	r5, r5, #3
 8008a6e:	3508      	adds	r5, #8
 8008a70:	2d0c      	cmp	r5, #12
 8008a72:	bf38      	it	cc
 8008a74:	250c      	movcc	r5, #12
 8008a76:	4629      	mov	r1, r5
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7ff ffa5 	bl	80089c8 <sbrk_aligned>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d02b      	beq.n	8008ada <_malloc_r+0xd2>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	442b      	add	r3, r5
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	e00e      	b.n	8008aa8 <_malloc_r+0xa0>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	1b52      	subs	r2, r2, r5
 8008a8e:	d41e      	bmi.n	8008ace <_malloc_r+0xc6>
 8008a90:	2a0b      	cmp	r2, #11
 8008a92:	d916      	bls.n	8008ac2 <_malloc_r+0xba>
 8008a94:	1961      	adds	r1, r4, r5
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	6025      	str	r5, [r4, #0]
 8008a9a:	bf18      	it	ne
 8008a9c:	6059      	strne	r1, [r3, #4]
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	bf08      	it	eq
 8008aa2:	6031      	streq	r1, [r6, #0]
 8008aa4:	5162      	str	r2, [r4, r5]
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f104 060b 	add.w	r6, r4, #11
 8008aae:	f000 fc31 	bl	8009314 <__malloc_unlock>
 8008ab2:	f026 0607 	bic.w	r6, r6, #7
 8008ab6:	1d23      	adds	r3, r4, #4
 8008ab8:	1af2      	subs	r2, r6, r3
 8008aba:	d0b6      	beq.n	8008a2a <_malloc_r+0x22>
 8008abc:	1b9b      	subs	r3, r3, r6
 8008abe:	50a3      	str	r3, [r4, r2]
 8008ac0:	e7b3      	b.n	8008a2a <_malloc_r+0x22>
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	bf0c      	ite	eq
 8008ac8:	6032      	streq	r2, [r6, #0]
 8008aca:	605a      	strne	r2, [r3, #4]
 8008acc:	e7ec      	b.n	8008aa8 <_malloc_r+0xa0>
 8008ace:	4623      	mov	r3, r4
 8008ad0:	6864      	ldr	r4, [r4, #4]
 8008ad2:	e7b2      	b.n	8008a3a <_malloc_r+0x32>
 8008ad4:	4634      	mov	r4, r6
 8008ad6:	6876      	ldr	r6, [r6, #4]
 8008ad8:	e7b9      	b.n	8008a4e <_malloc_r+0x46>
 8008ada:	230c      	movs	r3, #12
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f000 fc18 	bl	8009314 <__malloc_unlock>
 8008ae4:	e7a1      	b.n	8008a2a <_malloc_r+0x22>
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	e7de      	b.n	8008aa8 <_malloc_r+0xa0>
 8008aea:	bf00      	nop
 8008aec:	200064d4 	.word	0x200064d4

08008af0 <__sfputc_r>:
 8008af0:	6893      	ldr	r3, [r2, #8]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	b410      	push	{r4}
 8008af8:	6093      	str	r3, [r2, #8]
 8008afa:	da08      	bge.n	8008b0e <__sfputc_r+0x1e>
 8008afc:	6994      	ldr	r4, [r2, #24]
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	db01      	blt.n	8008b06 <__sfputc_r+0x16>
 8008b02:	290a      	cmp	r1, #10
 8008b04:	d103      	bne.n	8008b0e <__sfputc_r+0x1e>
 8008b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b0a:	f000 b99f 	b.w	8008e4c <__swbuf_r>
 8008b0e:	6813      	ldr	r3, [r2, #0]
 8008b10:	1c58      	adds	r0, r3, #1
 8008b12:	6010      	str	r0, [r2, #0]
 8008b14:	7019      	strb	r1, [r3, #0]
 8008b16:	4608      	mov	r0, r1
 8008b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <__sfputs_r>:
 8008b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b20:	4606      	mov	r6, r0
 8008b22:	460f      	mov	r7, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	18d5      	adds	r5, r2, r3
 8008b28:	42ac      	cmp	r4, r5
 8008b2a:	d101      	bne.n	8008b30 <__sfputs_r+0x12>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e007      	b.n	8008b40 <__sfputs_r+0x22>
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	463a      	mov	r2, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ffda 	bl	8008af0 <__sfputc_r>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d1f3      	bne.n	8008b28 <__sfputs_r+0xa>
 8008b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b44 <_vfiprintf_r>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	460d      	mov	r5, r1
 8008b4a:	b09d      	sub	sp, #116	; 0x74
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	4698      	mov	r8, r3
 8008b50:	4606      	mov	r6, r0
 8008b52:	b118      	cbz	r0, 8008b5c <_vfiprintf_r+0x18>
 8008b54:	6983      	ldr	r3, [r0, #24]
 8008b56:	b90b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x18>
 8008b58:	f7ff fa94 	bl	8008084 <__sinit>
 8008b5c:	4b89      	ldr	r3, [pc, #548]	; (8008d84 <_vfiprintf_r+0x240>)
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	d11b      	bne.n	8008b9a <_vfiprintf_r+0x56>
 8008b62:	6875      	ldr	r5, [r6, #4]
 8008b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b72:	f7ff fb2a 	bl	80081ca <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x3c>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b9eb      	cbnz	r3, 8008bbc <_vfiprintf_r+0x78>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f9c6 	bl	8008f14 <__swsetup_r>
 8008b88:	b1c0      	cbz	r0, 8008bbc <_vfiprintf_r+0x78>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d50e      	bpl.n	8008bae <_vfiprintf_r+0x6a>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b01d      	add	sp, #116	; 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	4b7b      	ldr	r3, [pc, #492]	; (8008d88 <_vfiprintf_r+0x244>)
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	d101      	bne.n	8008ba4 <_vfiprintf_r+0x60>
 8008ba0:	68b5      	ldr	r5, [r6, #8]
 8008ba2:	e7df      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008ba4:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <_vfiprintf_r+0x248>)
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	bf08      	it	eq
 8008baa:	68f5      	ldreq	r5, [r6, #12]
 8008bac:	e7da      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	0598      	lsls	r0, r3, #22
 8008bb2:	d4ed      	bmi.n	8008b90 <_vfiprintf_r+0x4c>
 8008bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb6:	f7ff fb09 	bl	80081cc <__retarget_lock_release_recursive>
 8008bba:	e7e9      	b.n	8008b90 <_vfiprintf_r+0x4c>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bca:	2330      	movs	r3, #48	; 0x30
 8008bcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d90 <_vfiprintf_r+0x24c>
 8008bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd4:	f04f 0901 	mov.w	r9, #1
 8008bd8:	4623      	mov	r3, r4
 8008bda:	469a      	mov	sl, r3
 8008bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be0:	b10a      	cbz	r2, 8008be6 <_vfiprintf_r+0xa2>
 8008be2:	2a25      	cmp	r2, #37	; 0x25
 8008be4:	d1f9      	bne.n	8008bda <_vfiprintf_r+0x96>
 8008be6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bea:	d00b      	beq.n	8008c04 <_vfiprintf_r+0xc0>
 8008bec:	465b      	mov	r3, fp
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ff93 	bl	8008b1e <__sfputs_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f000 80aa 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c00:	445a      	add	r2, fp
 8008c02:	9209      	str	r2, [sp, #36]	; 0x24
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80a2 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c24:	931a      	str	r3, [sp, #104]	; 0x68
 8008c26:	4654      	mov	r4, sl
 8008c28:	2205      	movs	r2, #5
 8008c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2e:	4858      	ldr	r0, [pc, #352]	; (8008d90 <_vfiprintf_r+0x24c>)
 8008c30:	f7f7 fb56 	bl	80002e0 <memchr>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	b9d8      	cbnz	r0, 8008c70 <_vfiprintf_r+0x12c>
 8008c38:	06d1      	lsls	r1, r2, #27
 8008c3a:	bf44      	itt	mi
 8008c3c:	2320      	movmi	r3, #32
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	0713      	lsls	r3, r2, #28
 8008c44:	bf44      	itt	mi
 8008c46:	232b      	movmi	r3, #43	; 0x2b
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b2a      	cmp	r3, #42	; 0x2a
 8008c52:	d015      	beq.n	8008c80 <_vfiprintf_r+0x13c>
 8008c54:	9a07      	ldr	r2, [sp, #28]
 8008c56:	4654      	mov	r4, sl
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f04f 0c0a 	mov.w	ip, #10
 8008c5e:	4621      	mov	r1, r4
 8008c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c64:	3b30      	subs	r3, #48	; 0x30
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d94e      	bls.n	8008d08 <_vfiprintf_r+0x1c4>
 8008c6a:	b1b0      	cbz	r0, 8008c9a <_vfiprintf_r+0x156>
 8008c6c:	9207      	str	r2, [sp, #28]
 8008c6e:	e014      	b.n	8008c9a <_vfiprintf_r+0x156>
 8008c70:	eba0 0308 	sub.w	r3, r0, r8
 8008c74:	fa09 f303 	lsl.w	r3, r9, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	46a2      	mov	sl, r4
 8008c7e:	e7d2      	b.n	8008c26 <_vfiprintf_r+0xe2>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9103      	str	r1, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbb      	ittet	lt
 8008c8c:	425b      	neglt	r3, r3
 8008c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c92:	9307      	strge	r3, [sp, #28]
 8008c94:	9307      	strlt	r3, [sp, #28]
 8008c96:	bfb8      	it	lt
 8008c98:	9204      	strlt	r2, [sp, #16]
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c9e:	d10c      	bne.n	8008cba <_vfiprintf_r+0x176>
 8008ca0:	7863      	ldrb	r3, [r4, #1]
 8008ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca4:	d135      	bne.n	8008d12 <_vfiprintf_r+0x1ce>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	9203      	str	r2, [sp, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfb8      	it	lt
 8008cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cb6:	3402      	adds	r4, #2
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008da0 <_vfiprintf_r+0x25c>
 8008cbe:	7821      	ldrb	r1, [r4, #0]
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	f7f7 fb0c 	bl	80002e0 <memchr>
 8008cc8:	b140      	cbz	r0, 8008cdc <_vfiprintf_r+0x198>
 8008cca:	2340      	movs	r3, #64	; 0x40
 8008ccc:	eba0 000a 	sub.w	r0, r0, sl
 8008cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	4303      	orrs	r3, r0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	482c      	ldr	r0, [pc, #176]	; (8008d94 <_vfiprintf_r+0x250>)
 8008ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce6:	2206      	movs	r2, #6
 8008ce8:	f7f7 fafa 	bl	80002e0 <memchr>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d03f      	beq.n	8008d70 <_vfiprintf_r+0x22c>
 8008cf0:	4b29      	ldr	r3, [pc, #164]	; (8008d98 <_vfiprintf_r+0x254>)
 8008cf2:	bb1b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x1f8>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d02:	443b      	add	r3, r7
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	e767      	b.n	8008bd8 <_vfiprintf_r+0x94>
 8008d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7a5      	b.n	8008c5e <_vfiprintf_r+0x11a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	3401      	adds	r4, #1
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	3a30      	subs	r2, #48	; 0x30
 8008d26:	2a09      	cmp	r2, #9
 8008d28:	d903      	bls.n	8008d32 <_vfiprintf_r+0x1ee>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c5      	beq.n	8008cba <_vfiprintf_r+0x176>
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	e7c3      	b.n	8008cba <_vfiprintf_r+0x176>
 8008d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d36:	4604      	mov	r4, r0
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7f0      	b.n	8008d1e <_vfiprintf_r+0x1da>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <_vfiprintf_r+0x258>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7fd fee6 	bl	8006b18 <_printf_float>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	1c78      	adds	r0, r7, #1
 8008d50:	d1d6      	bne.n	8008d00 <_vfiprintf_r+0x1bc>
 8008d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d405      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d58:	89ab      	ldrh	r3, [r5, #12]
 8008d5a:	059a      	lsls	r2, r3, #22
 8008d5c:	d402      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d60:	f7ff fa34 	bl	80081cc <__retarget_lock_release_recursive>
 8008d64:	89ab      	ldrh	r3, [r5, #12]
 8008d66:	065b      	lsls	r3, r3, #25
 8008d68:	f53f af12 	bmi.w	8008b90 <_vfiprintf_r+0x4c>
 8008d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6e:	e711      	b.n	8008b94 <_vfiprintf_r+0x50>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <_vfiprintf_r+0x258>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7fe f970 	bl	8007060 <_printf_i>
 8008d80:	e7e4      	b.n	8008d4c <_vfiprintf_r+0x208>
 8008d82:	bf00      	nop
 8008d84:	0801cc78 	.word	0x0801cc78
 8008d88:	0801cc98 	.word	0x0801cc98
 8008d8c:	0801cc58 	.word	0x0801cc58
 8008d90:	0801ce14 	.word	0x0801ce14
 8008d94:	0801ce1e 	.word	0x0801ce1e
 8008d98:	08006b19 	.word	0x08006b19
 8008d9c:	08008b1f 	.word	0x08008b1f
 8008da0:	0801ce1a 	.word	0x0801ce1a

08008da4 <_sbrk_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	; (8008dc0 <_sbrk_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f9 fb16 	bl	80023e0 <_sbrk>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_sbrk_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_sbrk_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	200064dc 	.word	0x200064dc

08008dc4 <__sread>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dcc:	f000 faa8 	bl	8009320 <_read_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	bfab      	itete	ge
 8008dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8008dd8:	181b      	addge	r3, r3, r0
 8008dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dde:	bfac      	ite	ge
 8008de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008de2:	81a3      	strhlt	r3, [r4, #12]
 8008de4:	bd10      	pop	{r4, pc}

08008de6 <__swrite>:
 8008de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	461f      	mov	r7, r3
 8008dec:	898b      	ldrh	r3, [r1, #12]
 8008dee:	05db      	lsls	r3, r3, #23
 8008df0:	4605      	mov	r5, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	4616      	mov	r6, r2
 8008df6:	d505      	bpl.n	8008e04 <__swrite+0x1e>
 8008df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f000 f9f8 	bl	80091f4 <_lseek_r>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	4632      	mov	r2, r6
 8008e12:	463b      	mov	r3, r7
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1a:	f000 b869 	b.w	8008ef0 <_write_r>

08008e1e <__sseek>:
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	460c      	mov	r4, r1
 8008e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e26:	f000 f9e5 	bl	80091f4 <_lseek_r>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	bf15      	itete	ne
 8008e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e3a:	81a3      	strheq	r3, [r4, #12]
 8008e3c:	bf18      	it	ne
 8008e3e:	81a3      	strhne	r3, [r4, #12]
 8008e40:	bd10      	pop	{r4, pc}

08008e42 <__sclose>:
 8008e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e46:	f000 b8f1 	b.w	800902c <_close_r>
	...

08008e4c <__swbuf_r>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	460e      	mov	r6, r1
 8008e50:	4614      	mov	r4, r2
 8008e52:	4605      	mov	r5, r0
 8008e54:	b118      	cbz	r0, 8008e5e <__swbuf_r+0x12>
 8008e56:	6983      	ldr	r3, [r0, #24]
 8008e58:	b90b      	cbnz	r3, 8008e5e <__swbuf_r+0x12>
 8008e5a:	f7ff f913 	bl	8008084 <__sinit>
 8008e5e:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <__swbuf_r+0x98>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	d12b      	bne.n	8008ebc <__swbuf_r+0x70>
 8008e64:	686c      	ldr	r4, [r5, #4]
 8008e66:	69a3      	ldr	r3, [r4, #24]
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	071a      	lsls	r2, r3, #28
 8008e6e:	d52f      	bpl.n	8008ed0 <__swbuf_r+0x84>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	b36b      	cbz	r3, 8008ed0 <__swbuf_r+0x84>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	6820      	ldr	r0, [r4, #0]
 8008e78:	1ac0      	subs	r0, r0, r3
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	b2f6      	uxtb	r6, r6
 8008e7e:	4283      	cmp	r3, r0
 8008e80:	4637      	mov	r7, r6
 8008e82:	dc04      	bgt.n	8008e8e <__swbuf_r+0x42>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 f966 	bl	8009158 <_fflush_r>
 8008e8c:	bb30      	cbnz	r0, 8008edc <__swbuf_r+0x90>
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	60a3      	str	r3, [r4, #8]
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	701e      	strb	r6, [r3, #0]
 8008e9c:	6963      	ldr	r3, [r4, #20]
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	4283      	cmp	r3, r0
 8008ea2:	d004      	beq.n	8008eae <__swbuf_r+0x62>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	07db      	lsls	r3, r3, #31
 8008ea8:	d506      	bpl.n	8008eb8 <__swbuf_r+0x6c>
 8008eaa:	2e0a      	cmp	r6, #10
 8008eac:	d104      	bne.n	8008eb8 <__swbuf_r+0x6c>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f951 	bl	8009158 <_fflush_r>
 8008eb6:	b988      	cbnz	r0, 8008edc <__swbuf_r+0x90>
 8008eb8:	4638      	mov	r0, r7
 8008eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <__swbuf_r+0x9c>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d101      	bne.n	8008ec6 <__swbuf_r+0x7a>
 8008ec2:	68ac      	ldr	r4, [r5, #8]
 8008ec4:	e7cf      	b.n	8008e66 <__swbuf_r+0x1a>
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <__swbuf_r+0xa0>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	bf08      	it	eq
 8008ecc:	68ec      	ldreq	r4, [r5, #12]
 8008ece:	e7ca      	b.n	8008e66 <__swbuf_r+0x1a>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f81e 	bl	8008f14 <__swsetup_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0cb      	beq.n	8008e74 <__swbuf_r+0x28>
 8008edc:	f04f 37ff 	mov.w	r7, #4294967295
 8008ee0:	e7ea      	b.n	8008eb8 <__swbuf_r+0x6c>
 8008ee2:	bf00      	nop
 8008ee4:	0801cc78 	.word	0x0801cc78
 8008ee8:	0801cc98 	.word	0x0801cc98
 8008eec:	0801cc58 	.word	0x0801cc58

08008ef0 <_write_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	; (8008f10 <_write_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7f8 ffd0 	bl	8001ea4 <_write>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_write_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_write_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	200064dc 	.word	0x200064dc

08008f14 <__swsetup_r>:
 8008f14:	4b32      	ldr	r3, [pc, #200]	; (8008fe0 <__swsetup_r+0xcc>)
 8008f16:	b570      	push	{r4, r5, r6, lr}
 8008f18:	681d      	ldr	r5, [r3, #0]
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	b125      	cbz	r5, 8008f2a <__swsetup_r+0x16>
 8008f20:	69ab      	ldr	r3, [r5, #24]
 8008f22:	b913      	cbnz	r3, 8008f2a <__swsetup_r+0x16>
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff f8ad 	bl	8008084 <__sinit>
 8008f2a:	4b2e      	ldr	r3, [pc, #184]	; (8008fe4 <__swsetup_r+0xd0>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d10f      	bne.n	8008f50 <__swsetup_r+0x3c>
 8008f30:	686c      	ldr	r4, [r5, #4]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f38:	0719      	lsls	r1, r3, #28
 8008f3a:	d42c      	bmi.n	8008f96 <__swsetup_r+0x82>
 8008f3c:	06dd      	lsls	r5, r3, #27
 8008f3e:	d411      	bmi.n	8008f64 <__swsetup_r+0x50>
 8008f40:	2309      	movs	r3, #9
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4e:	e03e      	b.n	8008fce <__swsetup_r+0xba>
 8008f50:	4b25      	ldr	r3, [pc, #148]	; (8008fe8 <__swsetup_r+0xd4>)
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d101      	bne.n	8008f5a <__swsetup_r+0x46>
 8008f56:	68ac      	ldr	r4, [r5, #8]
 8008f58:	e7eb      	b.n	8008f32 <__swsetup_r+0x1e>
 8008f5a:	4b24      	ldr	r3, [pc, #144]	; (8008fec <__swsetup_r+0xd8>)
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	bf08      	it	eq
 8008f60:	68ec      	ldreq	r4, [r5, #12]
 8008f62:	e7e6      	b.n	8008f32 <__swsetup_r+0x1e>
 8008f64:	0758      	lsls	r0, r3, #29
 8008f66:	d512      	bpl.n	8008f8e <__swsetup_r+0x7a>
 8008f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f6a:	b141      	cbz	r1, 8008f7e <__swsetup_r+0x6a>
 8008f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f70:	4299      	cmp	r1, r3
 8008f72:	d002      	beq.n	8008f7a <__swsetup_r+0x66>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff fcdb 	bl	8008930 <_free_r>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	2300      	movs	r3, #0
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f043 0308 	orr.w	r3, r3, #8
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	b94b      	cbnz	r3, 8008fae <__swsetup_r+0x9a>
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d003      	beq.n	8008fae <__swsetup_r+0x9a>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f95b 	bl	8009264 <__smakebuf_r>
 8008fae:	89a0      	ldrh	r0, [r4, #12]
 8008fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fb4:	f010 0301 	ands.w	r3, r0, #1
 8008fb8:	d00a      	beq.n	8008fd0 <__swsetup_r+0xbc>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	6963      	ldr	r3, [r4, #20]
 8008fc0:	425b      	negs	r3, r3
 8008fc2:	61a3      	str	r3, [r4, #24]
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	b943      	cbnz	r3, 8008fda <__swsetup_r+0xc6>
 8008fc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fcc:	d1ba      	bne.n	8008f44 <__swsetup_r+0x30>
 8008fce:	bd70      	pop	{r4, r5, r6, pc}
 8008fd0:	0781      	lsls	r1, r0, #30
 8008fd2:	bf58      	it	pl
 8008fd4:	6963      	ldrpl	r3, [r4, #20]
 8008fd6:	60a3      	str	r3, [r4, #8]
 8008fd8:	e7f4      	b.n	8008fc4 <__swsetup_r+0xb0>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e7f7      	b.n	8008fce <__swsetup_r+0xba>
 8008fde:	bf00      	nop
 8008fe0:	20000010 	.word	0x20000010
 8008fe4:	0801cc78 	.word	0x0801cc78
 8008fe8:	0801cc98 	.word	0x0801cc98
 8008fec:	0801cc58 	.word	0x0801cc58

08008ff0 <__assert_func>:
 8008ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <__assert_func+0x2c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	68d8      	ldr	r0, [r3, #12]
 8008ffe:	b14c      	cbz	r4, 8009014 <__assert_func+0x24>
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <__assert_func+0x30>)
 8009002:	9100      	str	r1, [sp, #0]
 8009004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009008:	4906      	ldr	r1, [pc, #24]	; (8009024 <__assert_func+0x34>)
 800900a:	462b      	mov	r3, r5
 800900c:	f000 f8e0 	bl	80091d0 <fiprintf>
 8009010:	f000 f9a5 	bl	800935e <abort>
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <__assert_func+0x38>)
 8009016:	461c      	mov	r4, r3
 8009018:	e7f3      	b.n	8009002 <__assert_func+0x12>
 800901a:	bf00      	nop
 800901c:	20000010 	.word	0x20000010
 8009020:	0801ce25 	.word	0x0801ce25
 8009024:	0801ce32 	.word	0x0801ce32
 8009028:	0801ce60 	.word	0x0801ce60

0800902c <_close_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_close_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f9 f99d 	bl	8002376 <_close>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_close_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_close_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	200064dc 	.word	0x200064dc

0800904c <__sflush_r>:
 800904c:	898a      	ldrh	r2, [r1, #12]
 800904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	4605      	mov	r5, r0
 8009054:	0710      	lsls	r0, r2, #28
 8009056:	460c      	mov	r4, r1
 8009058:	d458      	bmi.n	800910c <__sflush_r+0xc0>
 800905a:	684b      	ldr	r3, [r1, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc05      	bgt.n	800906c <__sflush_r+0x20>
 8009060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	dc02      	bgt.n	800906c <__sflush_r+0x20>
 8009066:	2000      	movs	r0, #0
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906e:	2e00      	cmp	r6, #0
 8009070:	d0f9      	beq.n	8009066 <__sflush_r+0x1a>
 8009072:	2300      	movs	r3, #0
 8009074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009078:	682f      	ldr	r7, [r5, #0]
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	d032      	beq.n	80090e4 <__sflush_r+0x98>
 800907e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	075a      	lsls	r2, r3, #29
 8009084:	d505      	bpl.n	8009092 <__sflush_r+0x46>
 8009086:	6863      	ldr	r3, [r4, #4]
 8009088:	1ac0      	subs	r0, r0, r3
 800908a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800908c:	b10b      	cbz	r3, 8009092 <__sflush_r+0x46>
 800908e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009090:	1ac0      	subs	r0, r0, r3
 8009092:	2300      	movs	r3, #0
 8009094:	4602      	mov	r2, r0
 8009096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009098:	6a21      	ldr	r1, [r4, #32]
 800909a:	4628      	mov	r0, r5
 800909c:	47b0      	blx	r6
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	d106      	bne.n	80090b2 <__sflush_r+0x66>
 80090a4:	6829      	ldr	r1, [r5, #0]
 80090a6:	291d      	cmp	r1, #29
 80090a8:	d82c      	bhi.n	8009104 <__sflush_r+0xb8>
 80090aa:	4a2a      	ldr	r2, [pc, #168]	; (8009154 <__sflush_r+0x108>)
 80090ac:	40ca      	lsrs	r2, r1
 80090ae:	07d6      	lsls	r6, r2, #31
 80090b0:	d528      	bpl.n	8009104 <__sflush_r+0xb8>
 80090b2:	2200      	movs	r2, #0
 80090b4:	6062      	str	r2, [r4, #4]
 80090b6:	04d9      	lsls	r1, r3, #19
 80090b8:	6922      	ldr	r2, [r4, #16]
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	d504      	bpl.n	80090c8 <__sflush_r+0x7c>
 80090be:	1c42      	adds	r2, r0, #1
 80090c0:	d101      	bne.n	80090c6 <__sflush_r+0x7a>
 80090c2:	682b      	ldr	r3, [r5, #0]
 80090c4:	b903      	cbnz	r3, 80090c8 <__sflush_r+0x7c>
 80090c6:	6560      	str	r0, [r4, #84]	; 0x54
 80090c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ca:	602f      	str	r7, [r5, #0]
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d0ca      	beq.n	8009066 <__sflush_r+0x1a>
 80090d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d4:	4299      	cmp	r1, r3
 80090d6:	d002      	beq.n	80090de <__sflush_r+0x92>
 80090d8:	4628      	mov	r0, r5
 80090da:	f7ff fc29 	bl	8008930 <_free_r>
 80090de:	2000      	movs	r0, #0
 80090e0:	6360      	str	r0, [r4, #52]	; 0x34
 80090e2:	e7c1      	b.n	8009068 <__sflush_r+0x1c>
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	2301      	movs	r3, #1
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b0      	blx	r6
 80090ec:	1c41      	adds	r1, r0, #1
 80090ee:	d1c7      	bne.n	8009080 <__sflush_r+0x34>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0c4      	beq.n	8009080 <__sflush_r+0x34>
 80090f6:	2b1d      	cmp	r3, #29
 80090f8:	d001      	beq.n	80090fe <__sflush_r+0xb2>
 80090fa:	2b16      	cmp	r3, #22
 80090fc:	d101      	bne.n	8009102 <__sflush_r+0xb6>
 80090fe:	602f      	str	r7, [r5, #0]
 8009100:	e7b1      	b.n	8009066 <__sflush_r+0x1a>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	e7ad      	b.n	8009068 <__sflush_r+0x1c>
 800910c:	690f      	ldr	r7, [r1, #16]
 800910e:	2f00      	cmp	r7, #0
 8009110:	d0a9      	beq.n	8009066 <__sflush_r+0x1a>
 8009112:	0793      	lsls	r3, r2, #30
 8009114:	680e      	ldr	r6, [r1, #0]
 8009116:	bf08      	it	eq
 8009118:	694b      	ldreq	r3, [r1, #20]
 800911a:	600f      	str	r7, [r1, #0]
 800911c:	bf18      	it	ne
 800911e:	2300      	movne	r3, #0
 8009120:	eba6 0807 	sub.w	r8, r6, r7
 8009124:	608b      	str	r3, [r1, #8]
 8009126:	f1b8 0f00 	cmp.w	r8, #0
 800912a:	dd9c      	ble.n	8009066 <__sflush_r+0x1a>
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009130:	4643      	mov	r3, r8
 8009132:	463a      	mov	r2, r7
 8009134:	4628      	mov	r0, r5
 8009136:	47b0      	blx	r6
 8009138:	2800      	cmp	r0, #0
 800913a:	dc06      	bgt.n	800914a <__sflush_r+0xfe>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e78e      	b.n	8009068 <__sflush_r+0x1c>
 800914a:	4407      	add	r7, r0
 800914c:	eba8 0800 	sub.w	r8, r8, r0
 8009150:	e7e9      	b.n	8009126 <__sflush_r+0xda>
 8009152:	bf00      	nop
 8009154:	20400001 	.word	0x20400001

08009158 <_fflush_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	690b      	ldr	r3, [r1, #16]
 800915c:	4605      	mov	r5, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b913      	cbnz	r3, 8009168 <_fflush_r+0x10>
 8009162:	2500      	movs	r5, #0
 8009164:	4628      	mov	r0, r5
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	b118      	cbz	r0, 8009172 <_fflush_r+0x1a>
 800916a:	6983      	ldr	r3, [r0, #24]
 800916c:	b90b      	cbnz	r3, 8009172 <_fflush_r+0x1a>
 800916e:	f7fe ff89 	bl	8008084 <__sinit>
 8009172:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <_fflush_r+0x6c>)
 8009174:	429c      	cmp	r4, r3
 8009176:	d11b      	bne.n	80091b0 <_fflush_r+0x58>
 8009178:	686c      	ldr	r4, [r5, #4]
 800917a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0ef      	beq.n	8009162 <_fflush_r+0xa>
 8009182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009184:	07d0      	lsls	r0, r2, #31
 8009186:	d404      	bmi.n	8009192 <_fflush_r+0x3a>
 8009188:	0599      	lsls	r1, r3, #22
 800918a:	d402      	bmi.n	8009192 <_fflush_r+0x3a>
 800918c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800918e:	f7ff f81c 	bl	80081ca <__retarget_lock_acquire_recursive>
 8009192:	4628      	mov	r0, r5
 8009194:	4621      	mov	r1, r4
 8009196:	f7ff ff59 	bl	800904c <__sflush_r>
 800919a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800919c:	07da      	lsls	r2, r3, #31
 800919e:	4605      	mov	r5, r0
 80091a0:	d4e0      	bmi.n	8009164 <_fflush_r+0xc>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	059b      	lsls	r3, r3, #22
 80091a6:	d4dd      	bmi.n	8009164 <_fflush_r+0xc>
 80091a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091aa:	f7ff f80f 	bl	80081cc <__retarget_lock_release_recursive>
 80091ae:	e7d9      	b.n	8009164 <_fflush_r+0xc>
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <_fflush_r+0x70>)
 80091b2:	429c      	cmp	r4, r3
 80091b4:	d101      	bne.n	80091ba <_fflush_r+0x62>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	e7df      	b.n	800917a <_fflush_r+0x22>
 80091ba:	4b04      	ldr	r3, [pc, #16]	; (80091cc <_fflush_r+0x74>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	bf08      	it	eq
 80091c0:	68ec      	ldreq	r4, [r5, #12]
 80091c2:	e7da      	b.n	800917a <_fflush_r+0x22>
 80091c4:	0801cc78 	.word	0x0801cc78
 80091c8:	0801cc98 	.word	0x0801cc98
 80091cc:	0801cc58 	.word	0x0801cc58

080091d0 <fiprintf>:
 80091d0:	b40e      	push	{r1, r2, r3}
 80091d2:	b503      	push	{r0, r1, lr}
 80091d4:	4601      	mov	r1, r0
 80091d6:	ab03      	add	r3, sp, #12
 80091d8:	4805      	ldr	r0, [pc, #20]	; (80091f0 <fiprintf+0x20>)
 80091da:	f853 2b04 	ldr.w	r2, [r3], #4
 80091de:	6800      	ldr	r0, [r0, #0]
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	f7ff fcaf 	bl	8008b44 <_vfiprintf_r>
 80091e6:	b002      	add	sp, #8
 80091e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ec:	b003      	add	sp, #12
 80091ee:	4770      	bx	lr
 80091f0:	20000010 	.word	0x20000010

080091f4 <_lseek_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_lseek_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f9 f8de 	bl	80023c4 <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_lseek_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_lseek_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	200064dc 	.word	0x200064dc

08009218 <__swhatbuf_r>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	460e      	mov	r6, r1
 800921c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009220:	2900      	cmp	r1, #0
 8009222:	b096      	sub	sp, #88	; 0x58
 8009224:	4614      	mov	r4, r2
 8009226:	461d      	mov	r5, r3
 8009228:	da08      	bge.n	800923c <__swhatbuf_r+0x24>
 800922a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	061a      	lsls	r2, r3, #24
 8009234:	d410      	bmi.n	8009258 <__swhatbuf_r+0x40>
 8009236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923a:	e00e      	b.n	800925a <__swhatbuf_r+0x42>
 800923c:	466a      	mov	r2, sp
 800923e:	f000 f895 	bl	800936c <_fstat_r>
 8009242:	2800      	cmp	r0, #0
 8009244:	dbf1      	blt.n	800922a <__swhatbuf_r+0x12>
 8009246:	9a01      	ldr	r2, [sp, #4]
 8009248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800924c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009250:	425a      	negs	r2, r3
 8009252:	415a      	adcs	r2, r3
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	e7ee      	b.n	8009236 <__swhatbuf_r+0x1e>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	2000      	movs	r0, #0
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	b016      	add	sp, #88	; 0x58
 8009260:	bd70      	pop	{r4, r5, r6, pc}
	...

08009264 <__smakebuf_r>:
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009268:	079d      	lsls	r5, r3, #30
 800926a:	4606      	mov	r6, r0
 800926c:	460c      	mov	r4, r1
 800926e:	d507      	bpl.n	8009280 <__smakebuf_r+0x1c>
 8009270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	2301      	movs	r3, #1
 800927a:	6163      	str	r3, [r4, #20]
 800927c:	b002      	add	sp, #8
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	ab01      	add	r3, sp, #4
 8009282:	466a      	mov	r2, sp
 8009284:	f7ff ffc8 	bl	8009218 <__swhatbuf_r>
 8009288:	9900      	ldr	r1, [sp, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff fbbb 	bl	8008a08 <_malloc_r>
 8009292:	b948      	cbnz	r0, 80092a8 <__smakebuf_r+0x44>
 8009294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009298:	059a      	lsls	r2, r3, #22
 800929a:	d4ef      	bmi.n	800927c <__smakebuf_r+0x18>
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	f043 0302 	orr.w	r3, r3, #2
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	e7e3      	b.n	8009270 <__smakebuf_r+0xc>
 80092a8:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <__smakebuf_r+0x7c>)
 80092aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	6163      	str	r3, [r4, #20]
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	6120      	str	r0, [r4, #16]
 80092be:	b15b      	cbz	r3, 80092d8 <__smakebuf_r+0x74>
 80092c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 f863 	bl	8009390 <_isatty_r>
 80092ca:	b128      	cbz	r0, 80092d8 <__smakebuf_r+0x74>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	89a0      	ldrh	r0, [r4, #12]
 80092da:	4305      	orrs	r5, r0
 80092dc:	81a5      	strh	r5, [r4, #12]
 80092de:	e7cd      	b.n	800927c <__smakebuf_r+0x18>
 80092e0:	0800801d 	.word	0x0800801d

080092e4 <__ascii_mbtowc>:
 80092e4:	b082      	sub	sp, #8
 80092e6:	b901      	cbnz	r1, 80092ea <__ascii_mbtowc+0x6>
 80092e8:	a901      	add	r1, sp, #4
 80092ea:	b142      	cbz	r2, 80092fe <__ascii_mbtowc+0x1a>
 80092ec:	b14b      	cbz	r3, 8009302 <__ascii_mbtowc+0x1e>
 80092ee:	7813      	ldrb	r3, [r2, #0]
 80092f0:	600b      	str	r3, [r1, #0]
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	1e10      	subs	r0, r2, #0
 80092f6:	bf18      	it	ne
 80092f8:	2001      	movne	r0, #1
 80092fa:	b002      	add	sp, #8
 80092fc:	4770      	bx	lr
 80092fe:	4610      	mov	r0, r2
 8009300:	e7fb      	b.n	80092fa <__ascii_mbtowc+0x16>
 8009302:	f06f 0001 	mvn.w	r0, #1
 8009306:	e7f8      	b.n	80092fa <__ascii_mbtowc+0x16>

08009308 <__malloc_lock>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__malloc_lock+0x8>)
 800930a:	f7fe bf5e 	b.w	80081ca <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	200064d0 	.word	0x200064d0

08009314 <__malloc_unlock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_unlock+0x8>)
 8009316:	f7fe bf59 	b.w	80081cc <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	200064d0 	.word	0x200064d0

08009320 <_read_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_read_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f9 f804 	bl	800233c <_read>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_read_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_read_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	200064dc 	.word	0x200064dc

08009344 <__ascii_wctomb>:
 8009344:	b149      	cbz	r1, 800935a <__ascii_wctomb+0x16>
 8009346:	2aff      	cmp	r2, #255	; 0xff
 8009348:	bf85      	ittet	hi
 800934a:	238a      	movhi	r3, #138	; 0x8a
 800934c:	6003      	strhi	r3, [r0, #0]
 800934e:	700a      	strbls	r2, [r1, #0]
 8009350:	f04f 30ff 	movhi.w	r0, #4294967295
 8009354:	bf98      	it	ls
 8009356:	2001      	movls	r0, #1
 8009358:	4770      	bx	lr
 800935a:	4608      	mov	r0, r1
 800935c:	4770      	bx	lr

0800935e <abort>:
 800935e:	b508      	push	{r3, lr}
 8009360:	2006      	movs	r0, #6
 8009362:	f000 f84d 	bl	8009400 <raise>
 8009366:	2001      	movs	r0, #1
 8009368:	f7f8 ffde 	bl	8002328 <_exit>

0800936c <_fstat_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d07      	ldr	r5, [pc, #28]	; (800938c <_fstat_r+0x20>)
 8009370:	2300      	movs	r3, #0
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	4611      	mov	r1, r2
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f7f9 f808 	bl	800238e <_fstat>
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	d102      	bne.n	8009388 <_fstat_r+0x1c>
 8009382:	682b      	ldr	r3, [r5, #0]
 8009384:	b103      	cbz	r3, 8009388 <_fstat_r+0x1c>
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	bd38      	pop	{r3, r4, r5, pc}
 800938a:	bf00      	nop
 800938c:	200064dc 	.word	0x200064dc

08009390 <_isatty_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d06      	ldr	r5, [pc, #24]	; (80093ac <_isatty_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f9 f807 	bl	80023ae <_isatty>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_isatty_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_isatty_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	200064dc 	.word	0x200064dc

080093b0 <_raise_r>:
 80093b0:	291f      	cmp	r1, #31
 80093b2:	b538      	push	{r3, r4, r5, lr}
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	d904      	bls.n	80093c4 <_raise_r+0x14>
 80093ba:	2316      	movs	r3, #22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093c6:	b112      	cbz	r2, 80093ce <_raise_r+0x1e>
 80093c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093cc:	b94b      	cbnz	r3, 80093e2 <_raise_r+0x32>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f830 	bl	8009434 <_getpid_r>
 80093d4:	462a      	mov	r2, r5
 80093d6:	4601      	mov	r1, r0
 80093d8:	4620      	mov	r0, r4
 80093da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093de:	f000 b817 	b.w	8009410 <_kill_r>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00a      	beq.n	80093fc <_raise_r+0x4c>
 80093e6:	1c59      	adds	r1, r3, #1
 80093e8:	d103      	bne.n	80093f2 <_raise_r+0x42>
 80093ea:	2316      	movs	r3, #22
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7e7      	b.n	80093c2 <_raise_r+0x12>
 80093f2:	2400      	movs	r4, #0
 80093f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093f8:	4628      	mov	r0, r5
 80093fa:	4798      	blx	r3
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7e0      	b.n	80093c2 <_raise_r+0x12>

08009400 <raise>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <raise+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f7ff bfd3 	b.w	80093b0 <_raise_r>
 800940a:	bf00      	nop
 800940c:	20000010 	.word	0x20000010

08009410 <_kill_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	; (8009430 <_kill_r+0x20>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f7f8 ff73 	bl	8002308 <_kill>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d102      	bne.n	800942c <_kill_r+0x1c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b103      	cbz	r3, 800942c <_kill_r+0x1c>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	bf00      	nop
 8009430:	200064dc 	.word	0x200064dc

08009434 <_getpid_r>:
 8009434:	f7f8 bf60 	b.w	80022f8 <_getpid>

08009438 <sqrtf>:
 8009438:	b508      	push	{r3, lr}
 800943a:	ed2d 8b02 	vpush	{d8}
 800943e:	eeb0 8a40 	vmov.f32	s16, s0
 8009442:	f000 f817 	bl	8009474 <__ieee754_sqrtf>
 8009446:	eeb4 8a48 	vcmp.f32	s16, s16
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d60c      	bvs.n	800946a <sqrtf+0x32>
 8009450:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009470 <sqrtf+0x38>
 8009454:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945c:	d505      	bpl.n	800946a <sqrtf+0x32>
 800945e:	f7fd fa89 	bl	8006974 <__errno>
 8009462:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009466:	2321      	movs	r3, #33	; 0x21
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	ecbd 8b02 	vpop	{d8}
 800946e:	bd08      	pop	{r3, pc}
 8009470:	00000000 	.word	0x00000000

08009474 <__ieee754_sqrtf>:
 8009474:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009478:	4770      	bx	lr
	...

0800947c <_init>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr

08009488 <_fini>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	bf00      	nop
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr
